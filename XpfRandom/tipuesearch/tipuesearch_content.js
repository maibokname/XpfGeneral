var tipuesearch = {"pages":[{"title":" eXPerimental Fortran Library (XpfLib) Documentation ","text":"eXPerimental Fortran Library (XpfLib) Documentation XpfRandom: eXPerimental Fortran Random Package XpfRandom is an experimenal package written in Fortran.   It is a sub-package of the XpfGeneral package (a larger package within the XpfLib library), which contains a large collection of general-purpose modules.  The XpfRandom package consists of a large number of modules that implement object-oriented pseudo-random number generators (PRNGs) based on many random number generation algorithms. The source code of the XpfRandom package is organized into 3 subfolders of the XpfRandom folder.   A brief overview of the source code in each subfolder is given below. The Bases subfolder contains three modules (and two submodules) that provide abstract derived types (ADT) that are employed as base types for pseudo-random number generators.  The BaseRNG type defines an application programming interface (API) for uniformly-distributed random number generations.  It also provides a number of default implementations of random number generations.  The IntegerRNG type is a subtype of the BaseRNG type that defines additional methods for a so-called Integer PRNG.  It also provides default implementations of some deferred procedures required by a PRNG where other deferred procedures  must be implemented by its subtypes.  Similarly, the LongRNG type is also a direct subtype of the BaseRNG type that defines additional methods for a so-called Long PRNG.  By design, both the IntegerRNG and the LongRNG types are provided as base types for so-called Integer and Long PRNGs. The Integer subfolder contains a large number modules where each module contains a concrete derived type that represents the so-called Integer PRNG whose main purpose is to produce a 32-bit integer random number. The Long subfolder contains a large number modules where each module contains a concrete derived type that represents the so-called Long PRNG whose main purpose is to produce a 64-bit integer random number. The MBase_PrgnBuilder module provides a centralized access to all available PRNGs in the package. Dependencies The XpfRandom pacakge is primarily dependent on the XpfBase package. Documentation The FORD program can be used to automatically generate the documentation of the XpfRandom package via ford XpfRandomDoc.md . Developer Info Niranama","tags":"home","loc":"index.html"},{"title":"Cmwc4096RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Cmwc4096RNG The Cmwc4096RNG type is an Integer PRNG type based on the CMWC (Complimentary-Multiply-With-Carry) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Cmwc4096RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Cmwc4096RNG_BaseInit(RNG, Seed) To initialize the 'Cmwc4096RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Cmwc4096RNG ), intent(inout) :: RNG 'Cmwc4096RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Cmwc4096RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Cmwc4096RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Cmwc4096RNG ), intent(inout) :: RNG 'Cmwc4096RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Cmwc4096RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Cmwc4096RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( Cmwc4096RNG ), intent(in) :: RNG 'Cmwc4096RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Cmwc4096RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Cmwc4096RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Cmwc4096RNG ), intent(in) :: RNG 'Cmwc4096RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Cmwc4096RNG PRIVATE ! the working states tSInt32 :: State ( 0 : Q_SIZE - 1 ) ! current index in \"state\" array tSInt32 :: Index ! carry tSInt32 :: Carry CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Cmwc4096RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Cmwc4096RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Cmwc4096RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Cmwc4096RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Cmwc4096RNG","tags":"","loc":"type\\cmwc4096rng.html"},{"title":"XoShiRo256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: XoShiRo256RNG The XoShiRo256RNGRNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalization Procedures final :: XoShiRo256RNG_Finalization To perform finalization of the PRNG. private  subroutine XoShiRo256RNG_Finalization(RNG) To perform finalization of the 'XoShiRo256RNG' object. Arguments Type Intent Optional Attributes Name type( XoShiRo256RNG ), intent(inout) :: RNG 'XoShiRo256RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => XoShiRo256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine XoShiRo256RNG_BaseInit(RNG, Seed) Arguments Type Intent Optional Attributes Name class( XoShiRo256RNG ), intent(inout) :: RNG 'XoShiRo256RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => XoShiRo256RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function XoShiRo256RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo256RNG ), intent(inout) :: RNG 'XoShiRo256RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => XoShiRo256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function XoShiRo256RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( XoShiRo256RNG ), intent(in) :: RNG 'XoShiRo256RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => XoShiRo256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function XoShiRo256RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( XoShiRo256RNG ), intent(in) :: RNG 'XoShiRo256RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoShiRo256StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoShiRo256StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoShiRo256Plus algorithm --->    CALL RNG%Initialize(XoShiRo256Plus) ! initialize with seed(s); use XoShiRo256PlusPlus algorithm --->    CALL RNG%Initialize(XoShiRo256PlusPlus, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine XoShiRo256RNG_InitWithFlag(RNG, XoShiRoAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( XoShiRo256RNG ), intent(inout) :: RNG 'XoShiRo256RNG' object integer(kind=kInt32), intent(in) :: XoShiRoAlgo algorithm flag - 1, use XoShiRo256StarStar algorithm. - 2, use XoShiRo256Plus algorithm. - 3, use XoShiRo256PlusPlus algorithm. integer(kind=kInt64), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) procedure, public :: Jump => XoShiRo256RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function XoShiRo256RNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 128 calls to the generator's\n NextLong() method.  It can provide up to 2 128 non-overlapping\n subsequences. Arguments Type Intent Optional Attributes Name class( XoShiRo256RNG ), intent(inout) :: RNG 'XoShiRo256RNG' object Return Value type( XoShiRo256RNG ) new 'XoShiRo256RNG' object procedure, public :: LongJump => XoShiRo256RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function XoShiRo256RNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 192 calls to the generator's\n NextLong() method.  It can provide up to 2 64 non-overlapping\n subsequences of length 2 192 ; each subsequence can provide up to\n 2 64 non-overlapping subsequences of length 2 128 using\n the generator's Jump() method. Arguments Type Intent Optional Attributes Name class( XoShiRo256RNG ), intent(inout) :: RNG 'XoShiRo256RNG' object Return Value type( XoShiRo256RNG ) new 'XoShiRo256RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: XoShiRo256RNG PRIVATE ! states tSInt64 :: State0 , State1 , State2 , State3 ! algorithm flag tSInt32 :: XoShiRoAlgo = XoShiRo256StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoShiRo256RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoShiRo256RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoShiRo256RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoShiRo256RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoShiRo256RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoShiRo256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoShiRo256RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoShiRo256StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoShiRo256StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoShiRo256Plus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo256Plus) <br> !   ! initialize with seed(s); use XoShiRo256PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo256PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoShiRo256RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoShiRo256RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoShiRo256RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoShiRo256RNG","tags":"","loc":"type\\xoshiro256rng.html"},{"title":"XoRoShiRo64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: XoRoShiRo64RNG The XoRoShiRo64RNG type is an Integer PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalization Procedures final :: XoRoShiRo64RNG_Finalization To perform finalization of the PRNG. private  subroutine XoRoShiRo64RNG_Finalization(RNG) To perform finalization of the 'XoRoShiRo64RNG' object. Arguments Type Intent Optional Attributes Name type( XoRoShiRo64RNG ), intent(inout) :: RNG 'XoRoShiRo64RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => XoRoShiRo64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine XoRoShiRo64RNG_BaseInit(RNG, Seed) To initialize the PRNG with specified 32-bit integer seed(s). Arguments Type Intent Optional Attributes Name class( XoRoShiRo64RNG ), intent(inout) :: RNG 'XoRoShiRo64RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => XoRoShiRo64RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function XoRoShiRo64RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoRoShiRo64RNG ), intent(inout) :: RNG 'XoRoShiRo64RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => XoRoShiRo64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function XoRoShiRo64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( XoRoShiRo64RNG ), intent(in) :: RNG 'XoRoShiRo64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => XoRoShiRo64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function XoRoShiRo64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( XoRoShiRo64RNG ), intent(in) :: RNG 'XoRoShiRo64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use random rotate (default) transformation --->    CALL RNG%Initialize() ! initialize with seed(s); use random rotate (default) transformation --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use random shift transformation --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use random shift transformation --->    CALL RNG%Initialize(.TRUE., Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) private  subroutine XoRoShiRo64RNG_InitWithFlag(RNG, UseXRSR64Star, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( XoRoShiRo64RNG ), intent(inout) :: RNG 'XoRoShiRo64RNG' object logical, intent(in) :: UseXRSR64Star algorithm flag - true, use XoRoShiRo64Star algorithm. - false, use XoRoShiRo64StarStar algorithm. integer(kind=kInt32), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: XoRoShiRo64RNG PRIVATE ! states tSInt32 :: State0 , State1 ! algorithm flag tLogical :: UseXRSR64Star = FalseVal ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoRoShiRo64RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoRoShiRo64RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => XoRoShiRo64RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoRoShiRo64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoRoShiRo64RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoRoShiRo64RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoRoShiRo64RNG","tags":"","loc":"type\\xoroshiro64rng.html"},{"title":"MswsRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: MswsRNG The Mt32RNG type is a Long PRNG type based on the Middle Square\n Weyl Sequence RNG by B. Widynski. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => MswsRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine MswsRNG_BaseInit(RNG, Seed) To initialize the PRNG with specified seed(s). Arguments Type Intent Optional Attributes Name class( MswsRNG ), intent(inout) :: RNG 'MswsRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => MswsRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function MswsRNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( MswsRNG ), intent(inout) :: RNG 'MswsRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => MswsRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function MswsRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( MswsRNG ), intent(in) :: RNG 'MswsRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => MswsRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function MswsRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( MswsRNG ), intent(in) :: RNG 'MswsRNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: InitWOSeedImpl => MswsRNG_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine MswsRNG_InitNoSeed(RNG) To initialize the PRNG without specified seeds. This procedure overrides the default implementation. Arguments Type Intent Optional Attributes Name class( MswsRNG ), intent(inout) :: RNG 'MswsRNG' object procedure, public :: NextIntegerImpl => MswsRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function MswsRNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( MswsRNG ), intent(inout) :: RNG 'MswsRNG' object Return Value integer(kind=kInt32) random number Source Code TYPE , EXTENDS ( LongRNG ) :: MswsRNG PRIVATE ! State of the generator tSInt64 :: X ! State of the Weyl sequence tSInt64 :: W ! Increment for the Weyl sequence.  This must be odd to ensure a full period. ! This is not final to support the restore functionality. tSInt64 :: S CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => MswsRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => MswsRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => MswsRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => MswsRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE :: InitWOSeedImpl => MswsRNG_InitNoSeed !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => MswsRNG_NextInteger ! --------------------------------------------------------------------- END TYPE MswsRNG","tags":"","loc":"type\\mswsrng.html"},{"title":"KomiRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: KomiRNG The KomiRNG type is a Long PRNG type based on a simple, but reliable,\n self-starting, and fast 64-bit PRNG by Aleksey Vaneev. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => KomiRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine KomiRNG_BaseInit(RNG, Seed) To initialize the 'KomiRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( KomiRNG ), intent(inout) :: RNG 'KomiRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => KomiRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function KomiRNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( KomiRNG ), intent(inout) :: RNG 'KomiRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => KomiRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function KomiRNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( KomiRNG ), intent(in) :: RNG 'KomiRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => KomiRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function KomiRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( KomiRNG ), intent(in) :: RNG 'KomiRNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: KomiRNG PRIVATE tSInt64 :: Seed1 ! working seed tSInt64 :: Seed2 ! working seed CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => KomiRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => KomiRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => KomiRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => KomiRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE KomiRNG","tags":"","loc":"type\\komirng.html"},{"title":"Jsf64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: Jsf64RNG The Jsf32RNG type is a Long PRNG type based on the small\n fast non-cryptographic PRNG by Bob Jenkins. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Jsf64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Jsf64RNG_BaseInit(RNG, Seed) To initialize the 'Jsf64RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Jsf64RNG ), intent(inout) :: RNG 'Jsf64RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => Jsf64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Jsf64RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( Jsf64RNG ), intent(inout) :: RNG 'Jsf64RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => Jsf64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Jsf64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Jsf64RNG ), intent(in) :: RNG 'Jsf64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Jsf64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Jsf64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Jsf64RNG ), intent(in) :: RNG 'Jsf64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: Jsf64RNG PRIVATE ! the working states tSInt64 :: A , B , C , D CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Jsf64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Jsf64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Jsf64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Jsf64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Jsf64RNG","tags":"","loc":"type\\jsf64rng.html"},{"title":"PcgMcg32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: PcgMcg32RNG The PcgMcg32RNG type is an Integer PRNG type based on algorithms from\n the Permuted Congruential Generator (PCG) family that use an internal 64-bit\n Multiplicative Congruential Generator (MCG) and output 32-bits per cycle. Finalization Procedures final :: PcgMcg32RNG_Finalization To perform finalization of the PRNG. private  subroutine PcgMcg32RNG_Finalization(RNG) To perform finalization of the 'PcgMcg32RNG' object. Arguments Type Intent Optional Attributes Name type( PcgMcg32RNG ), intent(inout) :: RNG 'PcgMcg32RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => PcgMcg32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine PcgMcg32RNG_BaseInit(RNG, Seed) To initialize the PRNG with specified 32-bit integer seed(s). Arguments Type Intent Optional Attributes Name class( PcgMcg32RNG ), intent(inout) :: RNG 'PcgMcg32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => PcgMcg32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function PcgMcg32RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( PcgMcg32RNG ), intent(inout) :: RNG 'PcgMcg32RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => PcgMcg32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function PcgMcg32RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( PcgMcg32RNG ), intent(in) :: RNG 'PcgMcg32RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => PcgMcg32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function PcgMcg32RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( PcgMcg32RNG ), intent(in) :: RNG 'PcgMcg32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use random rotate (default) transformation --->    CALL RNG%Initialize() ! initialize with seed(s); use random rotate (default) transformation --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use random shift transformation --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use random shift transformation --->    CALL RNG%Initialize(.TRUE., Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) private  subroutine PcgMcg32RNG_InitWithFlag(RNG, UseRandShift, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( PcgMcg32RNG ), intent(inout) :: RNG 'PcgMcg32RNG' object logical, intent(in) :: UseRandShift algorithm flag - true, the PCG generator is composed of a 64-bit LCG combined with\n  the XSH-RS (xorshift; random shift) output transformation. - false, the PCG generator is composed of a 64-bit LCG combined with\n  the XSH-RR (xorshift; random rotate) output transformation. integer(kind=kInt32), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: PcgMcg32RNG PRIVATE ! The state of the MCG tSInt64 :: State ! algorithm flag tLogical :: UseRandShift = FalseVal ! function to transform the state PROCEDURE ( Transform ), NOPASS , POINTER :: Permute => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitLongSeeds => PcgMcg32RNG_InitLongSeeds PROCEDURE , PRIVATE :: InitWithFlag => PcgMcg32RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => PcgMcg32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => PcgMcg32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => PcgMcg32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => PcgMcg32RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: PcgMcg32RNG_Finalization ! --------------------------------------------------------------------- END TYPE PcgMcg32RNG","tags":"","loc":"type\\pcgmcg32rng.html"},{"title":"L64X1024RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L64X1024RNG The L64X1024RNG type is a Long PRNG type based on the L64X1024 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => L64X1024RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L64X1024RNG_BaseInit(RNG, Seed) To initialize the 'L64X1024RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L64X1024RNG ), intent(inout) :: RNG 'L64X1024RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed procedure, public :: NextLongImpl => L64X1024RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L64X1024RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( L64X1024RNG ), intent(inout) :: RNG 'L64X1024RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L64X1024RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L64X1024RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( L64X1024RNG ), intent(in) :: RNG 'L64X1024RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L64X1024RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L64X1024RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L64X1024RNG ), intent(in) :: RNG 'L64X1024RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Split => L64X1024RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L64X1024RNG_Split(RNG, Brine) result(NewRNG) To initialize and return a new 'L64X1024RNG' object that shares no mutable\n state with this object. However, with very high probability, the set of\n values collectively generated by the two objects has the same statistical\n properties as if the same quantity of values were generated by a single\n thread using a single object.  Either or both of the two objects may be\n further split using this routine, and the same expected statistical\n properties apply to the entire set of generators constructed by such\n recursive splitting. Arguments Type Intent Optional Attributes Name class( L64X1024RNG ), intent(inout) :: RNG 'L64X1024RNG' object integer(kind=kInt64), intent(in), optional :: Brine a long value, of which the low 63 bits provide a unique id among calls\n to this routine for constructing a single series of Generator objects. Return Value type( L64X1024RNG ) new 'L64X1024RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L64X1024RNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0 ... X15 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: S tSInt64 :: X ( 0 : N - 1 ) tSInt32 :: P CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64X1024RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64X1024RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64X1024RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64X1024RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64X1024RNG_Split ! --------------------------------------------------------------------- END TYPE L64X1024RNG","tags":"","loc":"type\\l64x1024rng.html"},{"title":"WyRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: WyRNG The WyRNG type is a Long PRNG type based on a combination of\nWyRand and WyHash64 algorithms by Wang Yi. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => WyRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine WyRNG_BaseInit(RNG, Seed) To initialize the 'WyRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( WyRNG ), intent(inout) :: RNG 'WyRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => WyRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function WyRNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( WyRNG ), intent(inout) :: RNG 'WyRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => WyRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function WyRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( WyRNG ), intent(in) :: RNG 'WyRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => WyRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function WyRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( WyRNG ), intent(in) :: RNG 'WyRNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: WyRNG PRIVATE ! tSInt64     :: State1 = ToInt64(Z'8EBC6AF09C88C6E3') ! tSInt64     :: State2 = ToInt64(Z'589965CC75374CC') tSInt64 :: State1 = ToInt64 ( Z '4B33A62ED433D4A3' ) tSInt64 :: State2 = ToInt64 ( Z '4D5A2DA51DE1AA47' ) tSInt32 :: Counter = 0 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => WyRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => WyRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => WyRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => WyRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE WyRNG","tags":"","loc":"type\\wyrng.html"},{"title":"Kiss64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: Kiss64RNG The Kiss64RNG type is a Long PRNG type based on the KISS (Keep it Simple Stupid) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Kiss64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the BaseInit method to initialize the PRNG instead. private  subroutine Kiss64RNG_BaseInit(RNG, Seed) To initialize the 'Kiss64RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Kiss64RNG ), intent(inout) :: RNG 'Kiss64RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => Kiss64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Kiss64RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( Kiss64RNG ), intent(inout) :: RNG 'Kiss64RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => Kiss64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Kiss64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Kiss64RNG ), intent(in) :: RNG 'Kiss64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Kiss64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Kiss64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Kiss64RNG ), intent(in) :: RNG 'Kiss64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: Kiss64RNG PRIVATE !% state of the linear congruential generator tSInt64 :: X = 123456789123_kInt64 !% state of the xor-shift generator tSInt64 :: Y = 987654321987_kInt64 !% states and carries of the multiply-with-carry generators tSInt32 :: Z1 = 43219876_kInt32 tSInt32 :: C1 = 6543217_kInt32 tSInt32 :: Z2 = 21987643_kInt32 tSInt32 :: C2 = 1732654_kInt32 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *BaseInit* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Kiss64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Kiss64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Kiss64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Kiss64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Kiss64RNG","tags":"","loc":"type\\kiss64rng.html"},{"title":"IsaccRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: IsaccRNG The IsaccRNG type is an Integer PRNG type based on the ISAAC (Indirection, Shift, Accumulate, Add, and Count) algorithm. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => IsaccRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine IsaccRNG_BaseInit(RNG, Seed) To initialize the 'IsaccRNG' object with specified seed(s)\n where the maximum seed size is 256. Arguments Type Intent Optional Attributes Name class( IsaccRNG ), intent(inout) :: RNG 'IsaccRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seeds procedure, public :: NextIntegerImpl => IsaccRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function IsaccRNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( IsaccRNG ), intent(inout) :: RNG 'IsaccRNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => IsaccRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function IsaccRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( IsaccRNG ), intent(in) :: RNG 'IsaccRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => IsaccRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function IsaccRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( IsaccRNG ), intent(in) :: RNG 'IsaccRNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: IsaccRNG PRIVATE ! The results given to the user. tSInt32 :: Rsl ( 0 : N_SIZE - 1 ) ! The internal state. tSInt32 :: Mem ( 0 : N_SIZE - 1 ) ! Count through the results in rsl(). tSInt32 :: Count ! Accumulator. tSInt32 :: IsaacA ! The last result. tSInt32 :: IsaacB ! Counter, guarantees cycle is at least 2&#94;40. tSInt32 :: IsaacC ! Service variable. tSInt32 :: IsaacX ! Service variable. tSInt32 :: IsaacI ! Service variable. tSInt32 :: IsaacJ CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => IsaccRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => IsaccRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => IsaccRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => IsaccRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE IsaccRNG","tags":"","loc":"type\\isaccrng.html"},{"title":"RanLuxRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: RanLuxRNG The RanLuxRNG type is an Integer PRNG type based on the RANLUX algorithm by Martin Luscher. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => RanLuxRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine RanLuxRNG_BaseInit(RNG, Seed) To initialize the 'RanLuxRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( RanLuxRNG ), intent(inout) :: RNG 'RanLuxRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed procedure, public :: NextIntegerImpl => RanLuxRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function RanLuxRNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( RanLuxRNG ), intent(inout) :: RNG 'RanLuxRNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => RanLuxRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function RanLuxRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( RanLuxRNG ), intent(in) :: RNG 'RanLuxRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => RanLuxRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function RanLuxRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( RanLuxRNG ), intent(in) :: RNG 'RanLuxRNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithLuxLevel Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use default luxury level (= 3) --->    CALL RNG%Initialize() ! initialize with seed(s); use default luxury level (= 3) --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use specified luxury level (= 1) --->    CALL RNG%Initialize(1) ! initialize with seed(s); use specified luxury level (= 4) --->    CALL RNG%Initialize(4, Seeds) Usage : If specified, the luxury level should be between 0 and 4. private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) private  subroutine RanLuxRNG_InitWithLuxLevel(RNG, LuxLevel, Seed) To initialize the PRNG with the specified luxury level.  Optionally,\n initial Seeds can be specified. Arguments Type Intent Optional Attributes Name class( RanLuxRNG ), intent(inout) :: RNG 'RanLuxRNG' object integer(kind=kInt32), intent(in) :: LuxLevel luxury level (0-4 or 24-1999) - Value in the range [0, 4] corresponds to the standard luxury level. - Value in the range [24, 1999] corresponds to the p (skipping) parameter . - Value out of valid ranges is set to a valid value. integer(kind=kInt32), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) procedure, public :: Default_NextSingle => RanLuxRNG_NextSingle Default_NextSingle is an overridden procedure. Use the NextSingle method in place of the Default_NextSingle method to generate a 32-bit real number. private  function RanLuxRNG_NextSingle(RNG) result(RandNum) To return the 32-bit random real value. Arguments Type Intent Optional Attributes Name class( RanLuxRNG ), intent(inout) :: RNG 'RanLuxRNG' object Return Value real(kind=kSingle) random number Source Code TYPE , EXTENDS ( IntegerRNG ) :: RanLuxRNG PRIVATE !% indices tSInt32 :: I24 = 24 tSInt32 :: J24 = 10 !% next 24 inte4ger numbers tSInt32 :: Next ( 24 ) !> luxury level (0-4 or 24-1999) <br> !  - Value in the range [0, 4] corresponds to the standard luxury level. <br> !  - Value in the range [24, 1999] corresponds to the *p* (skipping) parameter . <br> tSInt32 :: LuxLev = LuxLevDflt !% how many numbers generate and skip tSInt32 :: NSkip !% the seed number used to initialize the generator tSInt32 :: JSeed !% numbers delivered to a user after the skipping tSInt32 :: In24 = 0 !% total generated numbers tSInt32 :: Kount = 0 !% state vector tRealSP :: State ( 24 ) !% carry tSInt32 :: Carry = 0.0 tSInt32 :: TwoM24 , TwoM12 CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithLuxLevel => RanLuxRNG_InitWithLuxLevel ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => RanLuxRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => RanLuxRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => RanLuxRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => RanLuxRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use default luxury level (= 3) <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use default luxury level (= 3) <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use specified luxury level (= 1) <br> !   --->    CALL RNG%Initialize(1) <br> !   ! initialize with seed(s); use specified luxury level (= 4) <br> !   --->    CALL RNG%Initialize(4, Seeds) <br> !  **Usage**: If specified, the luxury level should be between 0 and 4. GENERIC :: Initialize => InitWithLuxLevel ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *Default_NextSingle* is an overridden procedure. <br> !  Use the *NextSingle* method in place of the *Default_NextSingle* !  method to generate a 32-bit real number. PROCEDURE :: Default_NextSingle => RanLuxRNG_NextSingle ! --------------------------------------------------------------------- END TYPE RanLuxRNG","tags":"","loc":"type\\ranluxrng.html"},{"title":"IntegerRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, ABSTRACT, extends( BaseRNG ) :: IntegerRNG The IntegerRNG type is an abstract PRNG type that directly extends\n the BaseRNG type.  It is provided to aid the implementation of an Integer PRNG whose main purpose is to produce a 32-bit integer random\n number.  Therefore, all so-called Integer PRNGs should extend from\n this base type. Type-Bound Procedures procedure(NextI32), public, deferred :: NextIntegerImpl NextIntegerImpl is a binding name of the NextI32 deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. function NextI32(RNG) result(RandNum) Prototype NextI32 is a deferred procedure to return a random 32-bit-integer value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value integer(kind=kInt32) random number generated procedure(RNGName), public, deferred :: GetName GetName is a binding name of the RNGName deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() function RNGName(RNG) result(Name) Prototype RNGName is a deferred procedure to return the name of the generator. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(in) :: RNG random number generator Return Value character(kind=kChar, len=:), ALLOCATABLE generator's name procedure(SeedSize), public, deferred :: GetSeedSize GetSeedSize is a binding name of the SeedSize deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize the PRNG. Usage : --->    SeedSize = PRNG%GetSeedSize() function SeedSize(RNG) result(Size) Prototype SeedSize is a deferred procedure to return size of specified\n seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(in) :: RNG random number generator Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure(InitBase), public, deferred :: BaseInit BaseInit is a binding name of the InitBase deferred procedure. This procedure is intentionally employed as a base initialization that\n all other initialization procedures should call this procedure.  Also,\n it is intended to be used internally by an implementor, not a user. subroutine InitBase(RNG, Seed) Prototype InitBase is a deferred procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. This procedure is intentionally employed as a base initialization that\n all other initialization procedures should call this procedure.  Also,\n it is intended to be used internally by an implementor, not a user. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG random number generator integer(kind=kInt32), intent(in) :: Seed (:) seed(s) whose size depends on the PRNG to be initialized procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) Source Code TYPE , ABSTRACT , EXTENDS ( BaseRNG ) :: IntegerRNG PRIVATE ! initial seed used to re-initialize the PRNG tSInt32 , ALLOCATABLE :: InitSeed (:) CONTAINS ! --------------------------------------------------------------------- ! -----               Additional Deferred Procedure               ----- ! --------------------------------------------------------------------- !> *BaseInit* is a binding name of the *InitBase* deferred procedure. <br> !  This procedure is intentionally employed as a base initialization that !  all other initialization procedures should call this procedure.  Also, !  it is intended to be used internally by an implementor, not a user. PROCEDURE ( InitBase ), DEFERRED :: BaseInit ! --------------------------------------------------------------------- ! -----               Deferred Procedures Implemented             ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE :: InitWOSeedImpl => Default_InitNoSeed !> *ReInit* is a deferred procedure. <br> !  **Type-Bound Subroutine**: ReInit <br> !  **Purpose**:  To reset the PRNG to its initial state. <br> !  **Usage**: <br> !   --->    CALL PRNG%ReInit() PROCEDURE :: ReInit => Default_ReInitialize !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Default_NextLong !> *NextI128Impl* is a deferred procedure. <br> !  Use the *NextI128* method in place of the *NextI128Impl* method !  to generate a signed 128-bit integer number. PROCEDURE :: NextI128Impl => Default_NextI128 !> *NextU128Impl* is a deferred procedure. <br> !  Use the *NextU128* method in place of the *NextU128Impl* method !  to generate an unsigned 128-bit integer number. PROCEDURE :: NextU128Impl => Default_NextU128 !> *NextDoubleImpl* is a deferred procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Default_NextDouble !> *NextQuadImpl* is a deferred procedure. <br> !  Use the *NextQuad* method in place of the *NextQuadImpl* method !  to generate a 128-bit real number. PROCEDURE :: NextQuadImpl => Default_NextQuad ! --------------------------------------------------------------------- ! -----               Public Procedures                           ----- ! --------------------------------------------------------------------- !> *InitWSeedImpl* is a procedure to initialize the generator with !  specified seed(s).  Instances of the PRNG initialized with the same !  seed(s) in the same program should  produce identical sequences of !  values. <br> !  Use the *Initialize* method in place of the *InitWSeedImpl* method to !  initialize the PRNG with specified seed(s). PROCEDURE :: InitWSeedImpl => Default_InitWithSeeds !> **Type-Bound Subroutine**: CopySeed <br> !  **Purpose**:  To copy the initial seeds of the source PRNG to !                that of the destination PRNG. <br> !  **Usage**: <br> !   --->    CALL SrcRNG%CopySeed(DstRNG) <br> !  **Usage**: This method is intended for internal use only. PROCEDURE :: CopySeed => Copy_InitSeed ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   --->    CALL RNG%Initialize() <br> !   --->    CALL RNG%Initialize(Seeds) GENERIC :: Initialize => InitWSeedImpl ! --------------------------------------------------------------------- END TYPE IntegerRNG","tags":"","loc":"type\\integerrng.html"},{"title":"Mt64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: Mt64RNG The Mt64RNG type is a Long PRNG type based on the Mersenne\n Twister algorithm by Makoto Matsumoto and Takuji Nishimura. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Mt64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Mt64RNG_BaseInit(RNG, Seed) To initialize the 'Mt64RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Mt64RNG ), intent(inout) :: RNG 'Mt64RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => Mt64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Mt64RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( Mt64RNG ), intent(inout) :: RNG 'Mt64RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => Mt64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Mt64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Mt64RNG ), intent(in) :: RNG 'Mt64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Mt64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Mt64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Mt64RNG ), intent(in) :: RNG 'Mt64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: Mt64RNG PRIVATE ! Bytes pool tSInt64 :: MT ( 0 : NN - 1 ) ! Current index in the bytes pool tSInt32 :: MTI CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mt64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Mt64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mt64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mt64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Mt64RNG","tags":"","loc":"type\\mt64rng.html"},{"title":"Sip24RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: Sip24RNG The Sip24RNG type is a Long PRNG type based on the SipHash24 algorithm\n by J.P. Aumasson and D.J. Bernstein. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Sip24RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Sip24RNG_BaseInit(RNG, Seed) To initialize the 'Sip24RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Sip24RNG ), intent(inout) :: RNG 'Sip24RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => Sip24RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Sip24RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( Sip24RNG ), intent(inout) :: RNG 'Sip24RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => Sip24RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Sip24RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( Sip24RNG ), intent(in) :: RNG 'Sip24RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Sip24RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Sip24RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Sip24RNG ), intent(in) :: RNG 'Sip24RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: Sip24RNG PRIVATE !% initial state tSInt64 :: InitState ( SEED_SIZE ) !% current state tSInt64 :: State ( SEED_SIZE ) !% index into the current state (position of the output) tIndex :: Index !% counter (used as a current message) tSInt64 :: Counter CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: Update => Sip24RNG_Update ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Sip24RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Sip24RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Sip24RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Sip24RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Sip24RNG","tags":"","loc":"type\\sip24rng.html"},{"title":"Lfsr258RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: Lfsr258RNG The Lfsr258RNG type is a Long PRNG type based on 64-bit composite\n linear feedback shift register (LFSR) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Lfsr258RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Lfsr258RNG_BaseInit(RNG, Seed) To initialize the 'Lfsr258RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Lfsr258RNG ), intent(inout) :: RNG 'Lfsr258RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed procedure, public :: NextLongImpl => Lfsr258RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Lfsr258RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( Lfsr258RNG ), intent(inout) :: RNG 'Lfsr258RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => Lfsr258RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Lfsr258RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( Lfsr258RNG ), intent(in) :: RNG 'Lfsr258RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Lfsr258RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Lfsr258RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Lfsr258RNG ), intent(in) :: RNG 'Lfsr258RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: NextDoubleImpl => Lfsr258RNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Lfsr258RNG_NextDouble(RNG) result(RandNum) To return the 64-bit random floating-point value. Arguments Type Intent Optional Attributes Name class( Lfsr258RNG ), intent(inout) :: RNG 'Lfsr258RNG' object Return Value real(kind=kDouble) random number procedure, public :: Default_NextIntegerLimits => Lfsr258RNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound. private  function Lfsr258RNG_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in between the lower limit (inclusive) and the upper\n limit (exclusive). This routine overrides the default implementation. Arguments Type Intent Optional Attributes Name class( Lfsr258RNG ), intent(inout) :: RNG 'Lfsr258RNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number Source Code TYPE , EXTENDS ( LongRNG ) :: Lfsr258RNG PRIVATE tSInt64 :: State1 = 153587801 tSInt64 :: State2 = - 759022222 tSInt64 :: State3 = 1288503317 tSInt64 :: State4 = - 1718083407 tSInt64 :: State5 = - 123456789 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Lfsr258RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Lfsr258RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Lfsr258RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Lfsr258RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Lfsr258RNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Lfsr258RNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Lfsr258RNG","tags":"","loc":"type\\lfsr258rng.html"},{"title":"BaseRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, ABSTRACT :: BaseRNG The BaseRNG type is an abstract PRNG type that provides an API\n for random number generations.  Some random number generations are\n deferred while others (with default implementation) can be overridden. Type-Bound Procedures procedure(InitRNG), public, deferred :: InitWOSeedImpl InitWOSeedImpl is a binding name of the InitRNG deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). subroutine InitRNG(RNG) Prototype InitRNG is a deferred procedure to initialize the generator without\n any specified seed(s).  The PRNG initialized with this procedure\n should  produce sequences of values that are statistically independent\n of those of any other instances in the current program execution,\n but may, and typically does, vary across program invocations. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator procedure(NextI32), public, deferred :: NextIntegerImpl NextIntegerImpl is a binding name of the NextI32 deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. function NextI32(RNG) result(RandNum) Prototype NextI32 is a deferred procedure to return a random 32-bit-integer value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value integer(kind=kInt32) random number generated procedure(NextI64), public, deferred :: NextLongImpl NextLongImpl is a binding name of the NextI64 deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. function NextI64(RNG) result(RandNum) Prototype NextI64 is a deferred procedure to return a random 64-bit-integer value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value integer(kind=kInt64) random number generated procedure(NextI128), public, deferred :: NextI128Impl NextI128Impl is a binding name of the NextI128 deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. function NextI128(RNG) result(RandNum) Prototype NextI128 is a deferred procedure to return a random signed 128-bit-integer value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value type(SInt128) random number generated procedure(NextU128), public, deferred :: NextU128Impl NextU128Impl is a binding name of the NextU128 deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. function NextU128(RNG) result(RandNum) Prototype NextU128 is a deferred procedure to return a random unsigned 128-bit-integer value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value type(UInt128) random number generated procedure( NextR64 ), public, deferred :: NextDoubleImpl NextDoubleImpl is a binding name of the NextR64 deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. function NextR64(RNG) result(RandNum) Prototype NextR64 is a deferred procedure to return a random 64-bit-real value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure(NextR128), public, deferred :: NextQuadImpl NextQuadImpl is a binding name of the NextR128 deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. function NextR128(RNG) result(RandNum) Prototype NextR128 is a deferred procedure to return a random 128-bit-real value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kQuad) random number generated procedure(Reset), public, deferred :: ReInit ReInit is a binding name of the Reset deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() subroutine Reset(RNG) Prototype Reset is a deferred procedure to reset the generator to its initial state. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator procedure(RNGName), public, deferred :: GetName GetName is a binding name of the RNGName deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() function RNGName(RNG) result(Name) Prototype RNGName is a deferred procedure to return the name of the generator. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(in) :: RNG random number generator Return Value character(kind=kChar, len=:), ALLOCATABLE generator's name procedure(SeedSize), public, deferred :: GetSeedSize GetSeedSize is a binding name of the SeedSize deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize the PRNG. Usage : --->    SeedSize = PRNG%GetSeedSize() function SeedSize(RNG) result(Size) Prototype SeedSize is a deferred procedure to return size of specified\n seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(in) :: RNG random number generator Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: Initialize => InitWOSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() subroutine InitRNG(RNG) Prototype InitRNG is a deferred procedure to initialize the generator without\n any specified seed(s).  The PRNG initialized with this procedure\n should  produce sequences of values that are statistically independent\n of those of any other instances in the current program execution,\n but may, and typically does, vary across program invocations. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated Source Code TYPE , ABSTRACT :: BaseRNG CONTAINS ! --------------------------------------------------------------------- ! -----                     Deferred Procedures                   ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a binding name of the *InitRNG* deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE ( InitRNG ), DEFERRED :: InitWOSeedImpl !> *NextIntegerImpl* is a binding name of the *NextI32* deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE ( NextI32 ), DEFERRED :: NextIntegerImpl !> *NextLongImpl* is a binding name of the *NextI64* deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE ( NextI64 ), DEFERRED :: NextLongImpl !> *NextI128Impl* is a binding name of the *NextI128* deferred procedure. <br> !  Use the *NextI128* method in place of the *NextI128Impl* method !  to generate a signed 128-bit integer number. PROCEDURE ( NextI128 ), DEFERRED :: NextI128Impl !> *NextU128Impl* is a binding name of the *NextU128* deferred procedure. <br> !  Use the *NextU128* method in place of the *NextU128Impl* method !  to generate an unsigned 128-bit integer number. PROCEDURE ( NextU128 ), DEFERRED :: NextU128Impl !> *NextDoubleImpl* is a binding name of the *NextR64* deferred procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE ( NextR64 ), DEFERRED :: NextDoubleImpl !> *NextQuadImpl* is a binding name of the *NextR128* deferred procedure. <br> !  Use the *NextQuad* method in place of the *NextQuadImpl* method !  to generate a 128-bit real number. PROCEDURE ( NextR128 ), DEFERRED :: NextQuadImpl !> *ReInit* is a binding name of the *Reset* deferred procedure. <br> !  **Type-Bound Subroutine**: ReInit <br> !  **Purpose**:  To reset the PRNG to its initial state. <br> !  **Usage**: <br> !   --->    CALL PRNG%ReInit() PROCEDURE ( Reset ), DEFERRED :: ReInit !> *GetName* is a binding name of the *RNGName* deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE ( RNGName ), DEFERRED :: GetName !> *GetSeedSize* is a binding name of the *SeedSize* deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize the PRNG. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE ( SeedSize ), DEFERRED :: GetSeedSize ! --------------------------------------------------------------------- ! ----- Default-Implementation Procedures with Generic Interfaces ----- ! --------------------------------------------------------------------- !> Use the *NextInteger* Method instead of this method. PROCEDURE :: Default_NextIntegerLimits !> Use the *NextLong* Method instead of this method. PROCEDURE :: Default_NextLongLimits !> Use the *NextI128* Method instead of this method. PROCEDURE :: Default_NextI128Limits !> Use the *NextU128* Method instead of this method. PROCEDURE :: Default_NextU128Limits !> Use the *NextSingle* Method instead of this method. PROCEDURE :: Default_NextSingle !> Use the *NextSingle* Method instead of this method. PROCEDURE :: Default_NextSingleLimits !> Use the *NextDouble* Method instead of this method. PROCEDURE :: Default_NextDoubleLimits !> Use the *NextQuad* Method instead of this method. PROCEDURE :: Default_NextQuadLimits ! --------------------------------------------------------------------- ! -----                     Public Procedures                     ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   --->    CALL RNG%Initialize() GENERIC :: Initialize => InitWOSeedImpl !> **Type-Bound Function**: NextInteger  <br> !  **Purpose**:  To return a 32-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    I32Val = RNG%NextInteger() <br> !           ! random value between 0 and Limit1 <br> !   --->    I32Val = RNG%NextInteger(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    I32Val = RNG%NextInteger(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextInteger => NextIntegerImpl , & Default_NextIntegerLimits !> **Type-Bound Function**: NextLong <br> !  **Purpose**:  To return a 64-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    I64Val = RNG%NextLong() <br> !           ! random value between 0 and Limit1 <br> !   --->    I64Val = RNG%NextLong(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    I64Val = RNG%NextLong(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextLong => NextLongImpl , & Default_NextLongLimits !> **Type-Bound Function**: NextIndex  <br> !  **Purpose**:  To return an integer random number representing an index. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    Index = RNG%NextIndex() <br> !           ! random value between 0 and Limit1 <br> !   --->    Index = RNG%NextIndex(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    Index = RNG%NextIndex(Limit1, Limit2) <br> !  **Note**: The number can be either 32-bit or 64-bit integer depending on the configuration !            set when the code is compiled. #ifdef Indx32Bits GENERIC :: NextIndex => NextIntegerImpl , & Default_NextIntegerLimits #else GENERIC :: NextIndex => NextLongImpl , & Default_NextLongLimits #endif !> **Type-Bound Function**: NextI128 <br> !  **Purpose**:  To return a signed 128-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    I128Val = RNG%NextI128() <br> !           ! random value between 0 and Limit1 <br> !   --->    I128Val = RNG%NextI128(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    I128Val = RNG%NextI128(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextI128 => NextI128Impl , & Default_NextI128Limits !> **Type-Bound Function**: NextU128 <br> !  **Purpose**:  To return an unsigned 128-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    U128Val = RNG%NextU128() <br> !           ! random value between 0 and Limit1 <br> !   --->    U128Val = RNG%NextU128(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    U128Val = RNG%NextU128(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextU128 => NextU128Impl , & Default_NextU128Limits !> **Type-Bound Function**: NextSingle <br> !  **Purpose**:  To return a 32-bit real random number. <br> !  **Usage**: <br> !           ! random value between 0.0 (inclusive) and 1.0 (exclusive) <br> !   --->    R32Val = RNG%NextSingle() <br> !           ! random value between 0.0 and Limit1 <br> !   --->    R32Val = RNG%NextSingle(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    R32Val = RNG%NextSingle(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextSingle => Default_NextSingle , & Default_NextSingleLimits !> **Type-Bound Function**: NextDouble <br> !  **Purpose**:  To return a 64-bit real random number. <br> !  **Usage**: <br> !           ! random value between 0.0 (inclusive) and 1.0 (exclusive) <br> !   --->    R64Val = RNG%NextDouble() <br> !           ! random value between 0.0 and Limit1 <br> !   --->    R64Val = RNG%NextDouble(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    R64Val = RNG%NextDouble(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextDouble => NextDoubleImpl , & Default_NextDoubleLimits !> **Type-Bound Function**: NextQuad <br> !  **Purpose**:  To return a 128-bit real random number. <br> !  **Usage**: <br> !           ! random value between 0.0 (inclusive) and 1.0 (exclusive) <br> !   --->    R128Val = RNG%NextQuad() <br> !           ! random value between 0.0 and Limit1 <br> !   --->    R128Val = RNG%NextQuad(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    R128Val = RNG%NextQuad(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextQuad => NextQuadImpl , & Default_NextQuadLimits !> **Type-Bound Function**: NextString <br> !  **Purpose**:  To return a random character string. <br> !  **Usage**: <br> !           ! random string with default settings <br> !   --->    Str = RNG%NextString() <br> !           ! random string with a specified character set <br> !   --->    Str = RNG%NextString(AlphaOnlyCap) <br> !           ! random string with a specified length <br> !   --->    Str = RNG%NextString(StrLen=OutLen) <br> !           ! random string with a specified maximum length <br> !   --->    Str = RNG%NextString(MaxLen=MaxLen) PROCEDURE :: NextString => Default_NextString !> **Type-Bound Function**: NextLogical <br> !  **Purpose**:  To return a logical random value. <br> !  **Usage**: <br> !   --->    LogVal = RNG%NextLogical() PROCEDURE :: NextLogical => Default_NextLogical !> **Type-Bound Subroutine**: NextLogicalArray <br> !  **Purpose**:  To fill the specified array with logical random values. <br> !  **Usage**: <br> !   --->    CALL RNG%NextLogicalArray(RndArr) PROCEDURE :: NextLogicalArray => Default_NextLogicalArray !> **Type-Bound Function**: NextByte <br> !  **Purpose**:  To return a 8-bit integer random number. <br> !  **Usage**: <br> !   --->    I8Val = RNG%NextByte() PROCEDURE :: NextByte => Default_NextByte !> **Type-Bound Subroutine**: NextByteArray <br> !  **Purpose**:  To fill the specified array with 8-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextByteArray(RndArr) PROCEDURE :: NextByteArray => Default_NextByteArray !> **Type-Bound Function**: NextShort <br> !  **Purpose**:  To return a 16-bit integer random number. <br> !  **Usage**: <br> !   --->    I16Val = RNG%NextShort() PROCEDURE :: NextShort => Default_NextShort !> **Type-Bound Subroutine**: NextShortArray <br> !  **Purpose**:  To fill the specified array with 16-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextShortArray(RndArr) PROCEDURE :: NextShortArray => Default_NextShortArray !> **Type-Bound Subroutine**: NextIntegerArray <br> !  **Purpose**:  To fill the specified array with 32-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextIntegerArray(RndArr) PROCEDURE :: NextIntegerArray => Default_NextIntegerArray !> **Type-Bound Subroutine**: NextLongArray <br> !  **Purpose**:  To fill the specified array with 64-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextLongArray(RndArr) PROCEDURE :: NextLongArray => Default_NextLongArray !> **Type-Bound Subroutine**: NextI128Array <br> !  **Purpose**:  To fill the specified array with signed 128-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextI128Array(RndArr) PROCEDURE :: NextI128Array => Default_NextI128Array !> **Type-Bound Subroutine**: NextU128Array <br> !  **Purpose**:  To fill the specified array with unsigned 128-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextU128Array(RndArr) !        PROCEDURE   :: NextU128Array    => Default_NextU128Array !> **Type-Bound Subroutine**: NextSingleArray <br> !  **Purpose**:  To fill the specified array with 32-bit real random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextSingleArray(RndArr) PROCEDURE :: NextSingleArray => Default_NextSingleArray !> **Type-Bound Subroutine**: NextDoubleArray <br> !  **Purpose**:  To fill the specified array with 64-bit real random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextDoubleArray(RndArr) PROCEDURE :: NextDoubleArray => Default_NextDoubleArray !> **Type-Bound Subroutine**: NextQuadArray <br> !  **Purpose**:  To fill the specified array with 128-bit real random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextQuadArray(RndArr) PROCEDURE :: NextQuadArray => Default_NextQuadArray !> **Type-Bound Function**: NextGaussian <br> !  **Purpose**:  To return a 64-bit real value pseudo-randomly chosen from !                a Gaussian (normal) distribution whose mean is 0.0 and whose !                standard deviation is 1.0. <br> !  **Usage**: <br> !   --->    R64Val = RNG%NextGaussian() PROCEDURE :: NextGaussian => Default_NextGaussian !> **Type-Bound Function**: NextExponential <br> !  **Purpose**:  To return a nonnegative 64-bit real value pseudo-randomly chosen !                from a exponential distribution whose mean is 1.0. <br> !  **Usage**: <br> !   --->    R64Val = RNG%NextExponential() PROCEDURE :: NextExponential => Default_NextExponential ! --------------------------------------------------------------------- END TYPE BaseRNG","tags":"","loc":"type\\baserng.html"},{"title":"XoShiRo128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: XoShiRo128RNG The XoShiRo128RNG type is an Integer PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalization Procedures final :: XoShiRo128RNG_Finalization To perform finalization of the PRNG. private  subroutine XoShiRo128RNG_Finalization(RNG) To perform finalization of the 'XoShiRo128RNG' object. Arguments Type Intent Optional Attributes Name type( XoShiRo128RNG ), intent(inout) :: RNG 'XoShiRo128RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => XoShiRo128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine XoShiRo128RNG_BaseInit(RNG, Seed) To initialize the PRNG with specified seed(s). Arguments Type Intent Optional Attributes Name class( XoShiRo128RNG ), intent(inout) :: RNG 'XoShiRo128RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => XoShiRo128RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function XoShiRo128RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo128RNG ), intent(inout) :: RNG 'XoShiRo128RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => XoShiRo128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function XoShiRo128RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( XoShiRo128RNG ), intent(in) :: RNG 'XoShiRo128RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => XoShiRo128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function XoShiRo128RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( XoShiRo128RNG ), intent(in) :: RNG 'XoShiRo128RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoShiRo128Plus algorithm --->    CALL RNG%Initialize(XoShiRo128Plus) ! initialize with seed(s); use XoShiRo128PlusPlus algorithm --->    CALL RNG%Initialize(XoShiRo128PlusPlus, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) private  subroutine XoShiRo128RNG_InitWithFlag(RNG, XoShiRoAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( XoShiRo128RNG ), intent(inout) :: RNG 'XoShiRo128RNG' object integer(kind=kInt32), intent(in) :: XoShiRoAlgo algorithm flag - 1, use XoShiRo128StarStar algorithm. - 2, use XoShiRo128Plus algorithm. - 3, use XoShiRo128PlusPlus algorithm. integer(kind=kInt32), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) procedure, public :: Jump => XoShiRo128RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function XoShiRo128RNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 64 calls to the generator's\n NextInteger() method.  It can provide up to 2 64 non-overlapping\n subsequences. Arguments Type Intent Optional Attributes Name class( XoShiRo128RNG ), intent(inout) :: RNG 'XoShiRo128RNG' object Return Value type( XoShiRo128RNG ) new 'XoShiRo128RNG' object procedure, public :: LongJump => XoShiRo128RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function XoShiRo128RNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 96 calls to the generator's\n NextInteger() method.  It can provide up to 2 32 non-overlapping\n subsequences of length 2 96 ; each subsequence can provide up to\n 2 32 non-overlapping subsequences of length 2 64 using\n the generator's Jump() method. Arguments Type Intent Optional Attributes Name class( XoShiRo128RNG ), intent(inout) :: RNG 'XoShiRo128RNG' object Return Value type( XoShiRo128RNG ) new 'XoShiRo128RNG' object Source Code TYPE , EXTENDS ( IntegerRNG ) :: XoShiRo128RNG PRIVATE ! states tSInt32 :: State0 , State1 , State2 , State3 ! algorithm flag tSInt32 :: XoShiRoAlgo = XoShiRo128StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoShiRo128RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoShiRo128RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoShiRo128RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoShiRo128RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => XoShiRo128RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoShiRo128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoShiRo128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoShiRo128Plus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo128Plus) <br> !   ! initialize with seed(s); use XoShiRo128PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo128PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoShiRo128RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoShiRo128RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoShiRo128RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoShiRo128RNG","tags":"","loc":"type\\xoshiro128rng.html"},{"title":"SplitMixRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: SplitMixRNG The SplitMixRNG type is a Long PRNG type based on the SplitMix algorithm by Steele, Lea, and Flood. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => SplitMixRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine SplitMixRNG_BaseInit(RNG, Seed) To initialize the 'SplitMixRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( SplitMixRNG ), intent(inout) :: RNG 'SplitMixRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed procedure, public :: NextLongImpl => SplitMixRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function SplitMixRNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( SplitMixRNG ), intent(inout) :: RNG 'SplitMixRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => SplitMixRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function SplitMixRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( SplitMixRNG ), intent(in) :: RNG 'SplitMixRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => SplitMixRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function SplitMixRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( SplitMixRNG ), intent(in) :: RNG 'SplitMixRNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: SplitMixRNG PRIVATE tSInt64 :: State ! working seed CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => SplitMixRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => SplitMixRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => SplitMixRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => SplitMixRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE SplitMixRNG","tags":"","loc":"type\\splitmixrng.html"},{"title":"XoRoShiRo1024RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: XoRoShiRo1024RNG The XoRoShiRo1024RNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalization Procedures final :: XoRoShiRo1024RNG_Finalization To perform finalization of the PRNG. private  subroutine XoRoShiRo1024RNG_Finalization(RNG) To perform finalization of the 'XoRoShiRo1024RNG' object. Arguments Type Intent Optional Attributes Name type( XoRoShiRo1024RNG ), intent(inout) :: RNG 'XoRoShiRo1024RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => XoRoShiRo1024RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine XoRoShiRo1024RNG_BaseInit(RNG, Seed) To initialize the PRNG with specified seed(s). Arguments Type Intent Optional Attributes Name class( XoRoShiRo1024RNG ), intent(inout) :: RNG 'XoRoShiRo1024RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => XoRoShiRo1024RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function XoRoShiRo1024RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoRoShiRo1024RNG ), intent(inout) :: RNG 'XoRoShiRo1024RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => XoRoShiRo1024RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function XoRoShiRo1024RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( XoRoShiRo1024RNG ), intent(in) :: RNG 'XoRoShiRo1024RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => XoRoShiRo1024RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function XoRoShiRo1024RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( XoRoShiRo1024RNG ), intent(in) :: RNG 'XoRoShiRo1024RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoRoShiRo1024StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoRoShiRo1024StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoRoShiRo1024Star algorithm --->    CALL RNG%Initialize(XoRoShiRo1024Star) ! initialize with seed(s); use XoRoShiRo1024PlusPlus algorithm --->    CALL RNG%Initialize(XoRoShiRo1024PlusPlus, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine XoRoShiRo1024RNG_InitWithFlag(RNG, XoRoShiRoAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( XoRoShiRo1024RNG ), intent(inout) :: RNG 'XoRoShiRo1024RNG' object integer(kind=kInt32), intent(in) :: XoRoShiRoAlgo algorithm flag - 1, use XoRoShiRo1024StarStar algorithm. - 2, use XoRoShiRo1024Star algorithm. - 3, use XoRoShiRo1024PlusPlus algorithm. integer(kind=kInt64), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) procedure, public :: Jump => XoRoShiRo1024RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function XoRoShiRo1024RNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 512 calls to the generator's\n NextLong() method.  It can provide up to 2 512 non-overlapping\n subsequences. Arguments Type Intent Optional Attributes Name class( XoRoShiRo1024RNG ), intent(inout) :: RNG 'XoRoShiRo1024RNG' object Return Value type( XoRoShiRo1024RNG ) new 'XoRoShiRo1024RNG' object procedure, public :: LongJump => XoRoShiRo1024RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function XoRoShiRo1024RNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 768 calls to the generator's\n NextLong() method.  It can provide up to 2 256 non-overlapping\n subsequences of length 2 768 ; each subsequence can provide up to\n 2 256 non-overlapping subsequences of length 2 512 using\n the generator's Jump() method. Arguments Type Intent Optional Attributes Name class( XoRoShiRo1024RNG ), intent(inout) :: RNG 'XoRoShiRo1024RNG' object Return Value type( XoRoShiRo1024RNG ) new 'XoRoShiRo1024RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: XoRoShiRo1024RNG PRIVATE ! states tSInt64 :: State ( 0 : SEED_SIZE - 1 ) ! index in \"state\" array tSInt32 :: Index ! algorithm flag tSInt32 :: XoRoShiRoAlgo = XoRoShiRo1024StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoRoShiRo1024RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoRoShiRo1024RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoRoShiRo1024RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoRoShiRo1024RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoRoShiRo1024RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoRoShiRo1024RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoRoShiRo1024RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoRoShiRo1024StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoRoShiRo1024StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoRoShiRo1024Star algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo1024Star) <br> !   ! initialize with seed(s); use XoRoShiRo1024PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo1024PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoRoShiRo1024RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoRoShiRo1024RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoRoShiRo1024RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoRoShiRo1024RNG","tags":"","loc":"type\\xoroshiro1024rng.html"},{"title":"SuperKiss32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: SuperKiss32RNG The SuperKiss32RNG type is an Integer PRNG type based on the SuperKISS algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => SuperKiss32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the BaseInit method to initialize the PRNG instead. private  subroutine SuperKiss32RNG_BaseInit(RNG, Seed) To initialize the 'SuperKiss32RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( SuperKiss32RNG ), intent(inout) :: RNG 'SuperKiss32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => SuperKiss32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function SuperKiss32RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( SuperKiss32RNG ), intent(inout) :: RNG 'SuperKiss32RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => SuperKiss32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function SuperKiss32RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( SuperKiss32RNG ), intent(in) :: RNG 'SuperKiss32RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => SuperKiss32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function SuperKiss32RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( SuperKiss32RNG ), intent(in) :: RNG 'SuperKiss32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: SuperKiss32RNG PRIVATE !% state of CMWC generator tSInt32 :: QState ( QSIZE ) !% index into QState tIndex :: Index = QSIZE + 1_kIndex !% carry tSInt32 :: Carry = 362_kInt32 !% state of the linear congruential generator tSInt32 :: CState = 1236789_kInt32 !% state of the xorshift generator tSInt32 :: XState = 521288629_kInt32 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *BaseInit* method to initialize the PRNG instead. PROCEDURE :: BaseInit => SuperKiss32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => SuperKiss32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => SuperKiss32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => SuperKiss32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE SuperKiss32RNG","tags":"","loc":"type\\superkiss32rng.html"},{"title":"L128X128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L128X128RNG The L128X128RNG type is a Long PRNG type based on the L128X128 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => L128X128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L128X128RNG_BaseInit(RNG, Seed) To initialize the 'L128X128RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L128X128RNG ), intent(inout) :: RNG 'L128X128RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => L128X128RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L128X128RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( L128X128RNG ), intent(inout) :: RNG 'L128X128RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L128X128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L128X128RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L128X128RNG ), intent(in) :: RNG 'L128X128RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L128X128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L128X128RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L128X128RNG ), intent(in) :: RNG 'L128X128RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Split => L128X128RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L128X128RNG_Split(RNG, Brine) result(NewRNG) To initialize and return a new 'L128X128RNG' object that shares no mutable\n state with this object. However, with very high probability, the set of\n values collectively generated by the two objects has the same statistical\n properties as if the same quantity of values were generated by a single\n thread using a single object.  Either or both of the two objects may be\n further split using this routine, and the same expected statistical\n properties apply to the entire set of generators constructed by such\n recursive splitting. Arguments Type Intent Optional Attributes Name class( L128X128RNG ), intent(inout) :: RNG 'L128X128RNG' object integer(kind=kInt64), intent(in), optional :: Brine a long value, of which the low 63 bits provide a unique id among calls\n to this routine for constructing a single series of Generator objects. Return Value type( L128X128RNG ) new 'L128X128RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L128X128RNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt64 :: SH , SL , X0 , X1 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128X128RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128X128RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128X128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128X128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128X128RNG_Split ! --------------------------------------------------------------------- END TYPE L128X128RNG","tags":"","loc":"type\\l128x128rng.html"},{"title":"PcgLcg32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: PcgLcg32RNG The PcgLcg32RNG type is an Integer PRNG type based on algorithms from\n the Permuted Congruential Generator (PCG) family that use an internal 64-bit\n Linear Congruential Generator (LCG) and output 32-bits per cycle. Finalization Procedures final :: PcgLcg32RNG_Finalization To perform finalization of the PRNG. private  subroutine PcgLcg32RNG_Finalization(RNG) To perform finalization of the 'PcgLcg32RNG' object. Arguments Type Intent Optional Attributes Name type( PcgLcg32RNG ), intent(inout) :: RNG 'PcgLcg32RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => PcgLcg32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine PcgLcg32RNG_BaseInit(RNG, Seed) To initialize the PRNG with specified 32-bit integer seed(s). Arguments Type Intent Optional Attributes Name class( PcgLcg32RNG ), intent(inout) :: RNG 'PcgLcg32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => PcgLcg32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function PcgLcg32RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( PcgLcg32RNG ), intent(inout) :: RNG 'PcgLcg32RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => PcgLcg32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function PcgLcg32RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( PcgLcg32RNG ), intent(in) :: RNG 'PcgLcg32RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => PcgLcg32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function PcgLcg32RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( PcgLcg32RNG ), intent(in) :: RNG 'PcgLcg32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use random rotate (default) transformation --->    CALL RNG%Initialize() ! initialize with seed(s); use random rotate (default) transformation --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use random shift transformation --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use random shift transformation --->    CALL RNG%Initialize(.TRUE., Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) private  subroutine PcgLcg32RNG_InitWithFlag(RNG, UseRandShift, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( PcgLcg32RNG ), intent(inout) :: RNG 'PcgLcg32RNG' object logical, intent(in) :: UseRandShift algorithm flag - true, the PCG generator is composed of a 64-bit LCG combined with\n  the XSH-RS (xorshift; random shift) output transformation. - false, the PCG generator is composed of a 64-bit LCG combined with\n  the XSH-RR (xorshift; random rotate) output transformation. integer(kind=kInt32), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: PcgLcg32RNG PRIVATE ! The state of the LCG tSInt64 :: State ! The increment of the LCG tSInt64 :: Increment ! algorithm flag tLogical :: UseRandShift = FalseVal ! function to transform the state PROCEDURE ( Transform ), NOPASS , POINTER :: Permute => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitLongSeeds => PcgLcg32RNG_InitLongSeeds PROCEDURE , PRIVATE :: InitWithFlag => PcgLcg32RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => PcgLcg32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => PcgLcg32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => PcgLcg32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => PcgLcg32RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: PcgLcg32RNG_Finalization ! --------------------------------------------------------------------- END TYPE PcgLcg32RNG","tags":"","loc":"type\\pcglcg32rng.html"},{"title":"XoShiRo512RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: XoShiRo512RNG The XoShiRo512RNGRNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalization Procedures final :: XoShiRo512RNG_Finalization To perform finalization of the PRNG. private  subroutine XoShiRo512RNG_Finalization(RNG) To perform finalization of the 'XoShiRo512RNG' object. Arguments Type Intent Optional Attributes Name type( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => XoShiRo512RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine XoShiRo512RNG_BaseInit(RNG, Seed) Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => XoShiRo512RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => XoShiRo512RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function XoShiRo512RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(in) :: RNG 'XoShiRo512RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => XoShiRo512RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function XoShiRo512RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(in) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoShiRo512StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoShiRo512StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoShiRo512Plus algorithm --->    CALL RNG%Initialize(XoShiRo512Plus) ! initialize with seed(s); use XoShiRo512PlusPlus algorithm --->    CALL RNG%Initialize(XoShiRo512PlusPlus, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine XoShiRo512RNG_InitWithFlag(RNG, XoShiRoAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object integer(kind=kInt32), intent(in) :: XoShiRoAlgo algorithm flag - 1, use XoShiRo512StarStar algorithm. - 2, use XoShiRo512Plus algorithm. - 3, use XoShiRo512PlusPlus algorithm. integer(kind=kInt64), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) procedure, public :: Jump => XoShiRo512RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function XoShiRo512RNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 256 calls to the generator's\n NextLong() method.  It can provide up to 2 256 non-overlapping\n subsequences. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value type( XoShiRo512RNG ) new 'XoShiRo512RNG' object procedure, public :: LongJump => XoShiRo512RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function XoShiRo512RNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 384 calls to the generator's\n NextLong() method.  It can provide up to 2 128 non-overlapping\n subsequences of length 2 384 ; each subsequence can provide up to\n 2 128 non-overlapping subsequences of length 2 256 using\n the generator's Jump() method. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value type( XoShiRo512RNG ) new 'XoShiRo512RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: XoShiRo512RNG PRIVATE ! states tSInt64 :: State ( 0 : SEED_SIZE - 1 ) ! algorithm flag tSInt32 :: XoShiRoAlgo = XoShiRo512StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoShiRo512RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoShiRo512RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoShiRo512RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoShiRo512RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoShiRo512RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoShiRo512RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoShiRo512RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoShiRo512StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoShiRo512StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoShiRo512Plus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo512Plus) <br> !   ! initialize with seed(s); use XoShiRo512PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo512PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoShiRo512RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoShiRo512RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoShiRo512RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoShiRo512RNG","tags":"","loc":"type\\xoshiro512rng.html"},{"title":"Well32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Well32RNG The Well32RNG type is an Integer PRNG type based on the Well\n Equidistributed Long-period Linear (WELL) generators by Francois\n Panneton, Pierre L'Ecuyer, and Makoto Matsumoto. Finalization Procedures final :: Well32RNG_Finalization To perform finalization of the PRNG. private  subroutine Well32RNG_Finalization(RNG) To perform finalization of the 'Well32RNG' object. Arguments Type Intent Optional Attributes Name type( Well32RNG ), intent(inout) :: RNG 'Well32RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => WELL32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine WELL32RNG_BaseInit(RNG, Seed) To initialize the PRNG with the specified seed(s). Arguments Type Intent Optional Attributes Name class( Well32RNG ), intent(inout) :: RNG 'WELL32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Well32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Well32RNG_NextInteger(RNG) result(RandNum) Arguments Type Intent Optional Attributes Name class( Well32RNG ), intent(inout) :: RNG Return Value integer(kind=kInt32) procedure, public :: GetName => Well32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Well32RNG_GetName(RNG) result(Name) Arguments Type Intent Optional Attributes Name class( Well32RNG ), intent(in) :: RNG Return Value character(kind=kChar, len=:), ALLOCATABLE procedure, public :: GetSeedSize => Well32RNG_GetSeedSize_I GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator for the default algorithm (WELL49937b). Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Well32RNG_GetSeedSize_I(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator\n for default algorithm (WELL49937b). Arguments Type Intent Optional Attributes Name class( Well32RNG ), intent(in) :: RNG 'Well32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: GetSeedSize2 => Well32RNG_GetSeedSize_II Type-Bound Function : GetSeedSize2 Purpose :  To get size of specified seed(s) needed to initialize\n               the generator for a specified algorithm. Usage : --->    SeedSize = PRNG%GetSeedSize2(WELL1024a) private  function Well32RNG_GetSeedSize_II(RNG, WellAlgo) result(Size) To return size of specified seed(s) needed to initialize the generator\n for the specified algorithm. Arguments Type Intent Optional Attributes Name class( Well32RNG ), intent(in) :: RNG 'Well32RNG' object integer(kind=kInt32), intent(in) :: WellAlgo algorithm flag (1-6); if out of applicable range, set it to default (WELL49937b) Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use WELL49937b (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use WELL49937b (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use WELL512a algorithm --->    CALL RNG%Initialize(WELL512a) ! initialize with seed(s); use WELL19937c algorithm --->    CALL RNG%Initialize(WELL19937c, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) private  subroutine WELL32RNG_InitWithFlag(RNG, WellAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( Well32RNG ), intent(inout) :: RNG 'WELL32RNG' object integer(kind=kInt32), intent(in) :: WellAlgo algorithm flag (1-6); if out of applicable range, set it to default (WELL49937b) integer(kind=kInt32), intent(in), optional :: Seed (:) optional seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Well32RNG PRIVATE ! Current index in the bytes pool tSInt32 :: Index ! Bytes pool tSInt32 , ALLOCATABLE :: V (:) ! Index indirection table giving for each index its predecessor taking table size into account. tSInt32 , ALLOCATABLE :: IRm1 (:) ! Index indirection table giving for each index its second predecessor taking table size into account. tSInt32 , ALLOCATABLE :: IRm2 (:) ! Index indirection table giving for each index the value index + m1 taking table size into account. tSInt32 , ALLOCATABLE :: I1 (:) ! Index indirection table giving for each index the value index + m2 taking table size into account. tSInt32 , ALLOCATABLE :: I2 (:) ! Index indirection table giving for each index the value index + m3 taking table size into account. tSInt32 , ALLOCATABLE :: I3 (:) ! algorithm flag tSInt32 :: WellAlgo = WELL49937b ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- ! initialization procedures PROCEDURE , PRIVATE :: InitWithFlag => WELL32RNG_InitWithFlag ! auxiliary procedures PROCEDURE , PRIVATE :: GetIndexPred PROCEDURE , PRIVATE :: GetIndexPred2 PROCEDURE , PRIVATE :: GetIndexM1 PROCEDURE , PRIVATE :: GetIndexM2 PROCEDURE , PRIVATE :: GetIndexM3 ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Well32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Well32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Well32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator for the default algorithm (WELL49937b). <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Well32RNG_GetSeedSize_I !> **Type-Bound Function**: GetSeedSize2 <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator for a specified algorithm. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize2(WELL1024a) PROCEDURE :: GetSeedSize2 => Well32RNG_GetSeedSize_II ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use WELL49937b (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use WELL49937b (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use WELL512a algorithm <br> !   --->    CALL RNG%Initialize(WELL512a) <br> !   ! initialize with seed(s); use WELL19937c algorithm <br> !   --->    CALL RNG%Initialize(WELL19937c, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: Well32RNG_Finalization ! --------------------------------------------------------------------- END TYPE Well32RNG","tags":"","loc":"type\\well32rng.html"},{"title":"L128XMRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L128XMRNG The L128XMRNG type is a Long PRNG type based on the L128XM algorithms, which are specific members of the LXM family of\n algorithms for pseudo-random number generators. Finalization Procedures final :: L128XMRNG_Finalization To perform finalization of the PRNG. private  subroutine L128XMRNG_Finalization(RNG) To perform finalization of the 'L128XMRNG' object. Arguments Type Intent Optional Attributes Name type( L128XMRNG ), intent(inout) :: RNG 'L128XMRNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => L128XMRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L128XMRNG_BaseInit(RNG, Seed) To initialize the 'L128XMRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(inout) :: RNG 'L128XMRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => L128XMRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L128XMRNG_NextLong(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(inout) :: RNG 'L128XMRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L128XMRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L128XMRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(in) :: RNG 'L128XMRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L128XMRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L128XMRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(in) :: RNG 'L128XMRNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use L128X128Mix (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use L128X128Mix (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use L128X256Mix algorithm --->    CALL RNG%Initialize(L128X256Mix) ! initialize with seed(s); use L128X1024Mix algorithm --->    CALL RNG%Initialize(L128X1024Mix, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine L128XMRNG_InitWithFlag(RNG, L128XMAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(inout) :: RNG 'L128XMRNG' object integer(kind=kInt32), intent(in) :: L128XMAlgo algorithm flag (1-4); if out of applicable range, set it to default (L128X128Mix) integer(kind=kInt64), intent(in), optional :: Seed (:) optional seed(s) procedure, public :: Split => L128XMRNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L128XMRNG_Split(RNG) result(NewRNG) To create a new generator split off from the current instance.\n Use the current generator to generate an initial seed and also\n employ it as a source of randomness used to initialize the\n new generator. Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(inout) :: RNG 'L128XMRNG' object Return Value type( L128XMRNG ) new 'L128XMRNG' object procedure, public :: Jump => L128XMRNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function L128XMRNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The jump is performed by advancing the state of the LCG sub-generator by 1 cycle.\n The XBG state is unchanged. For L128X128MixRNG, the jump size is the equivalent of moving the state backwards\n by (2 128 - 1) positions.  It can provide up to 2 128 non-overlapping subsequences. For L128X256MixRNG, the jump size is the equivalent of moving the state backwards\n by (2 256 - 1) positions.  It can provide up to 2 128 non-overlapping subsequences. For L128X1024MixRNG, the jump size is the equivalent of moving the state backwards\n by (2 1024 - 1) positions.  It can provide up to 2 128 non-overlapping subsequences. Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(inout) :: RNG 'L128XMRNG' object Return Value type( L128XMRNG ) new 'L128XMRNG' object procedure, public :: LongJump => L128XMRNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function L128XMRNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The jump is performed by advancing the state of the LCG sub-generator by\n 2 64 cycles.  The XBG state is unchanged. For L128X128MixRNG, the jump size is the equivalent of moving the state backwards\n by roughly 2 192 positions.  It can provide up to 2 64 non-overlapping subsequences of length approximately 2 192 ; each\n subsequence can provide up to 2 64 non-overlapping subsequences of\n length (2 128 - 1) using the Jump() method. For L128X256MixRNG, the jump size is the equivalent of moving the state backwards\n by roughly 2 320 positions.  It can provide up to 2 64 non-overlapping subsequences of length approximately 2 320 ; each\n subsequence can provide up to 2 64 non-overlapping subsequences of\n length (2 256 - 1) using the Jump() method. For L128X256MixRNG, the jump size is the equivalent of moving the state backwards\n by roughly 2 1088 positions.  It can provide up to 2 64 non-overlapping subsequences of length approximately 2 1088 ; each\n subsequence can provide up to 2 64 non-overlapping subsequences of\n length (2 1024 - 1) using the Jump() method. Arguments Type Intent Optional Attributes Name class( L128XMRNG ), intent(inout) :: RNG 'L128XMRNG' object Return Value type( L128XMRNG ) new 'L128XMRNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L128XMRNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0 ... for the XBG. ! At least one of the fields Xs must be nonzero. tSInt64 :: SH , SL tSInt64 , ALLOCATABLE :: X (:) ! index into the X \"state\" array tSInt32 :: Indx ! algorithm flag tSInt32 :: L128XMAlgo = L128X128Mix ! pointers to Next and Update routines PROCEDURE ( Next ), POINTER :: NextOutput => NULL () PROCEDURE ( Update ), POINTER :: UpdateState => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => L128XMRNG_InitWithFlag PROCEDURE , PRIVATE :: MakeACopy => L128XMRNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128XMRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128XMRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128XMRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128XMRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use L128X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use L128X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use L128X256Mix algorithm <br> !   --->    CALL RNG%Initialize(L128X256Mix) <br> !   ! initialize with seed(s); use L128X1024Mix algorithm <br> !   --->    CALL RNG%Initialize(L128X1024Mix, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128XMRNG_Split !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => L128XMRNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => L128XMRNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: L128XMRNG_Finalization ! --------------------------------------------------------------------- END TYPE L128XMRNG","tags":"","loc":"type\\l128xmrng.html"},{"title":"Taus88RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Taus88RNG The Taus88RNG type is an Integer PRNG type based on a Tausworthe\n random number generator by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Taus88RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Taus88RNG_BaseInit(RNG, Seed) To initialize the 'Taus88RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Taus88RNG ), intent(inout) :: RNG 'Taus88RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Taus88RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Taus88RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Taus88RNG ), intent(inout) :: RNG 'Taus88RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Taus88RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Taus88RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Taus88RNG ), intent(in) :: RNG 'Taus88RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Taus88RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Taus88RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Taus88RNG ), intent(in) :: RNG 'Taus88RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Taus88RNG PRIVATE tSInt32 :: State1 = 1234 tSInt32 :: State2 = - 4567 tSInt32 :: State3 = 7890 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Taus88RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Taus88RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Taus88RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Taus88RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Taus88RNG","tags":"","loc":"type\\taus88rng.html"},{"title":"Lfsr113RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Lfsr113RNG The Lfsr113RNG type is an Integer PRNG type based on 32-bit composite\n linear feedback shift register (LFSR) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Lfsr113RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Lfsr113RNG_BaseInit(RNG, Seed) To initialize the 'Lfsr113RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Lfsr113RNG ), intent(inout) :: RNG 'Lfsr113RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Lfsr113RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Lfsr113RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Lfsr113RNG ), intent(inout) :: RNG 'Lfsr113RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Lfsr113RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Lfsr113RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Lfsr113RNG ), intent(in) :: RNG 'Lfsr113RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Lfsr113RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Lfsr113RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Lfsr113RNG ), intent(in) :: RNG 'Lfsr113RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: NextDoubleImpl => Lfsr113RNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Lfsr113RNG_NextDouble(RNG) result(RandNum) To return the 64-bit random floating-point value.  This routine\n overrides the default implementation. Arguments Type Intent Optional Attributes Name class( Lfsr113RNG ), intent(inout) :: RNG 'Lfsr113RNG' object Return Value real(kind=kDouble) random number procedure, public :: Default_NextIntegerLimits => Lfsr113RNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound. private  function Lfsr113RNG_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in between the lower limit (inclusive) and the upper\n limit (exclusive). This routine overrides the default implementation. Arguments Type Intent Optional Attributes Name class( Lfsr113RNG ), intent(inout) :: RNG 'Lfsr113RNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number Source Code TYPE , EXTENDS ( IntegerRNG ) :: Lfsr113RNG PRIVATE tSInt32 :: State1 = 153587801 tSInt32 :: State2 = - 759022222 tSInt32 :: State3 = 1288503317 tSInt32 :: State4 = - 1718083407 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Lfsr113RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Lfsr113RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Lfsr113RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Lfsr113RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Lfsr113RNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Lfsr113RNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Lfsr113RNG","tags":"","loc":"type\\lfsr113rng.html"},{"title":"L64X256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L64X256RNG The L64X256RNG type is a Long PRNG type based on the L64X256 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => L64X256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L64X256RNG_BaseInit(RNG, Seed) To initialize the 'L64X256RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L64X256RNG ), intent(inout) :: RNG 'L64X256RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => L64X256RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L64X256RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( L64X256RNG ), intent(inout) :: RNG 'L64X256RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L64X256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L64X256RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( L64X256RNG ), intent(in) :: RNG 'L64X256RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L64X256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L64X256RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L64X256RNG ), intent(in) :: RNG 'L64X256RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Split => L64X256RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L64X256RNG_Split(RNG, Brine) result(NewRNG) To initialize and return a new 'L64X256RNG' object that shares no mutable\n state with this object. However, with very high probability, the set of\n values collectively generated by the two objects has the same statistical\n properties as if the same quantity of values were generated by a single\n thread using a single object.  Either or both of the two objects may be\n further split using this routine, and the same expected statistical\n properties apply to the entire set of generators constructed by such\n recursive splitting. Arguments Type Intent Optional Attributes Name class( L64X256RNG ), intent(inout) :: RNG 'L64X256RNG' object integer(kind=kInt64), intent(in), optional :: Brine a long value, of which the low 63 bits provide a unique id among calls\n to this routine for constructing a single series of Generator objects. Return Value type( L64X256RNG ) new 'L64X256RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L64X256RNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0, X1, X2 and X3 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: S , X0 , X1 , X2 , X3 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64X256RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64X256RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64X256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64X256RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64X256RNG_Split ! --------------------------------------------------------------------- END TYPE L64X256RNG","tags":"","loc":"type\\l64x256rng.html"},{"title":"Mrg63k3aRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: Mrg63k3aRNG The Mrg63k3aRNG type is a Long PRNG type based on 63-bit\n combined multiple recursive generator (MRG) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Mrg63k3aRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Mrg63k3aRNG_BaseInit(RNG, Seed) To initialize the 'Mrg63k3aRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Mrg63k3aRNG ), intent(inout) :: RNG 'Mrg63k3aRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed procedure, public :: NextLongImpl => Mrg63k3aRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Mrg63k3aRNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( Mrg63k3aRNG ), intent(inout) :: RNG 'Mrg63k3aRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => Mrg63k3aRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Mrg63k3aRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Mrg63k3aRNG ), intent(in) :: RNG 'Mrg63k3aRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Mrg63k3aRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Mrg63k3aRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Mrg63k3aRNG ), intent(in) :: RNG 'Mrg63k3aRNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: NextDoubleImpl => Mrg63k3aRNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Mrg63k3aRNG_NextDouble(RNG) result(RandNum) To return the 64-bit random floating-point value. Arguments Type Intent Optional Attributes Name class( Mrg63k3aRNG ), intent(inout) :: RNG 'Mrg63k3aRNG' object Return Value real(kind=kDouble) random number procedure, public :: Default_NextIntegerLimits => Mrg63k3aRNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound. private  function Mrg63k3aRNG_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in between the lower limit (inclusive) and the upper\n limit (exclusive). This routine overrides the default implementation. Arguments Type Intent Optional Attributes Name class( Mrg63k3aRNG ), intent(inout) :: RNG 'Mrg63k3aRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number Source Code TYPE , EXTENDS ( LongRNG ) :: Mrg63k3aRNG PRIVATE ! states tSInt64 :: State ( 0 : 5 ) = DefaultSeed CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: NextValue => Mrg63k3aRNG_NextValue ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mrg63k3aRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Mrg63k3aRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mrg63k3aRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mrg63k3aRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Mrg63k3aRNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Mrg63k3aRNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Mrg63k3aRNG","tags":"","loc":"type\\mrg63k3arng.html"},{"title":"SuperKiss64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: SuperKiss64RNG The SuperKiss64RNG type is a Long PRNG type based on the SuperKISS algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => SuperKiss64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the BaseInit method to initialize the PRNG instead. private  subroutine SuperKiss64RNG_BaseInit(RNG, Seed) To initialize the 'SuperKiss64RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( SuperKiss64RNG ), intent(inout) :: RNG 'SuperKiss64RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => SuperKiss64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function SuperKiss64RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( SuperKiss64RNG ), intent(inout) :: RNG 'SuperKiss64RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => SuperKiss64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function SuperKiss64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( SuperKiss64RNG ), intent(in) :: RNG 'SuperKiss64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => SuperKiss64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function SuperKiss64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( SuperKiss64RNG ), intent(in) :: RNG 'SuperKiss64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: SuperKiss64RNG PRIVATE !% state of CMWC generator tSInt64 :: QState ( QSIZE ) !% index into QState tIndex :: Index = QSIZE + 1_kIndex !% carry tSInt64 :: Carry = 36243678541_kInt64 !% state of the linear congruential generator tSInt64 :: CState = 12367890123456_kInt64 !% state of the xorshift generator tSInt64 :: XState = 521288629546311_kInt64 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *BaseInit* method to initialize the PRNG instead. PROCEDURE :: BaseInit => SuperKiss64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => SuperKiss64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => SuperKiss64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => SuperKiss64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE SuperKiss64RNG","tags":"","loc":"type\\superkiss64rng.html"},{"title":"PcgRxsMXs64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: PcgRxsMXs64RNG The PcgLcg32RNG type is a Long PRNG type based on an algorithm from\n the Permuted Congruential Generator (PCG) family that use an internal 64-bit\n Linear Congruential Generator (LCG) and output 64-bits per cycle. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => PcgRxsMXs64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine PcgRxsMXs64RNG_BaseInit(RNG, Seed) To initialize the 'PcgRxsMXs64RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( PcgRxsMXs64RNG ), intent(inout) :: RNG 'PcgRxsMXs64RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => PcgRxsMXs64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function PcgRxsMXs64RNG_NextLong(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( PcgRxsMXs64RNG ), intent(inout) :: RNG 'PcgRxsMXs64RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => PcgRxsMXs64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function PcgRxsMXs64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( PcgRxsMXs64RNG ), intent(in) :: RNG 'PcgRxsMXs64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => PcgRxsMXs64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function PcgRxsMXs64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( PcgRxsMXs64RNG ), intent(in) :: RNG 'PcgRxsMXs64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: PcgRxsMXs64RNG PRIVATE ! The state of the LCG tSInt64 :: State ! The increment of the LCG tSInt64 :: Increment CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => PcgRxsMXs64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => PcgRxsMXs64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => PcgRxsMXs64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => PcgRxsMXs64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE PcgRxsMXs64RNG","tags":"","loc":"type\\pcgrxsmxs64rng.html"},{"title":"RanLuxPpRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: RanLuxPpRNG The RanLuxPpRNG type is a Long PRNG type based on the RANLUX++ algorithm\n by A. Sibidanov. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => RanLuxPpRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine RanLuxPpRNG_BaseInit(RNG, Seed) To initialize the 'RanLuxPpRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( RanLuxPpRNG ), intent(inout) :: RNG 'RanLuxPpRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => RanLuxPpRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function RanLuxPpRNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( RanLuxPpRNG ), intent(inout) :: RNG 'RanLuxPpRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => RanLuxPpRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function RanLuxPpRNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( RanLuxPpRNG ), intent(in) :: RNG 'RanLuxPpRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => RanLuxPpRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function RanLuxPpRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( RanLuxPpRNG ), intent(in) :: RNG 'RanLuxPpRNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithSkipping Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use default skipping parameter (= 2048) --->    CALL RNG%Initialize() ! initialize with seed(s); default skipping parameter (= 2048) --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use specified skipping parameter (= 389) --->    CALL RNG%Initialize(389) ! initialize with seed(s); use specified luxury level (= 1024) --->    CALL RNG%Initialize(1024, Seeds) Usage : If specified, the skipping parameter should be between 24 and 4096. private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine RanLuxPpRNG_InitWithSkipping(RNG, Skip, Seed) To initialize the PRNG with the specified skipping (p) parameter.\n Optionally, initial Seeds can be specified. Arguments Type Intent Optional Attributes Name class( RanLuxPpRNG ), intent(inout) :: RNG 'RanLuxPpRNG' object integer(kind=kInt32), intent(in) :: Skip skipping (p) parameter with valid range of [24, 4096]. If value is out of the valid range, use default value (2048). integer(kind=kInt64), intent(in), optional :: Seed (:) optional 64-bit integer seed(s) procedure, public :: Default_NextDouble => RanLuxPpRNG_NextDouble Default_NextDouble is an overridden procedure. Use the NextDouble method in place of the Default_NextDouble method to generate a 64-bit real number. private  function RanLuxPpRNG_NextDouble(RNG) result(RandNum) To return the 64-bit random real value. Arguments Type Intent Optional Attributes Name class( RanLuxPpRNG ), intent(inout) :: RNG 'RanLuxPpRNG' object Return Value real(kind=kDouble) random number Source Code TYPE , EXTENDS ( LongRNG ) :: RanLuxPpRNG PRIVATE !% multiplier tUInt64 :: A ( STATE_SIZE ) = InitA !% current state tUInt64 :: X ( STATE_SIZE ) = 0_kInt64 !% cached double-precision random numbers tRealDP :: D ( CACHE_SIZE ) = 0.0_kDouble !% skipping parameter tUInt64 :: P = 2048_kInt64 !% index into the cached output tIndex :: Index = CACHE_SIZE + 1_kIndex CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithSkipping => RanLuxPpRNG_InitWithSkipping PROCEDURE , PRIVATE :: Update => RanLuxPpRNG_Update ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => RanLuxPpRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => RanLuxPpRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => RanLuxPpRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => RanLuxPpRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use default skipping parameter (= 2048) <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); default skipping parameter (= 2048) <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use specified skipping parameter (= 389) <br> !   --->    CALL RNG%Initialize(389) <br> !   ! initialize with seed(s); use specified luxury level (= 1024) <br> !   --->    CALL RNG%Initialize(1024, Seeds) <br> !  **Usage**: If specified, the skipping parameter should be between 24 and 4096. GENERIC :: Initialize => InitWithSkipping ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *Default_NextDouble* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *Default_NextDouble* !  method to generate a 64-bit real number. PROCEDURE :: Default_NextDouble => RanLuxPpRNG_NextDouble ! --------------------------------------------------------------------- END TYPE RanLuxPpRNG","tags":"","loc":"type\\ranluxpprng.html"},{"title":"L32X64MRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: L32X64MRNG The L32X64MRNG type is an Integer PRNG type based on the L32X64 algorithm, which is a specific member of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => L32X64MRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L32X64MRNG_BaseInit(RNG, Seed) To initialize the 'L32X64MRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L32X64MRNG ), intent(inout) :: RNG 'L32X64MRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed procedure, public :: NextIntegerImpl => L32X64MRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function L32X64MRNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( L32X64MRNG ), intent(inout) :: RNG 'L32X64MRNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => L32X64MRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L32X64MRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L32X64MRNG ), intent(in) :: RNG 'L32X64MRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L32X64MRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L32X64MRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L32X64MRNG ), intent(in) :: RNG 'L32X64MRNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Split => L32X64MRNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L32X64MRNG_Split(RNG) result(NewRNG) To create a new generator split off from the current instance.\n Use the current generator to generate an initial seed and also\n employ it as a source of randomness used to initialize the\n new generator. Arguments Type Intent Optional Attributes Name class( L32X64MRNG ), intent(inout) :: RNG 'L32X64MRNG' object Return Value type( L32X64MRNG ) new 'L32X64MRNG' object procedure, public :: Jump => L32X64MRNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function L32X64MRNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n one.  The new generator is returned. The jump is performed by advancing the state of the LCG sub-generator by 1 cycle.\n The XBG state is unchanged.  The jump size is the equivalent of moving the state\n backwards by (2 64 - 1) positions. It can provide up to 2 32 non-overlapping subsequences. Arguments Type Intent Optional Attributes Name class( L32X64MRNG ), intent(inout) :: RNG 'L32X64MRNG' object Return Value type( L32X64MRNG ) new 'L32X64MRNG' object procedure, public :: LongJump => L32X64MRNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function L32X64MRNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n one.  The new generator is returned. The jump is performed by advancing the state of the LCG sub-generator by\n 2 16 cycles.  The XBG state is unchanged.  The jump size is the\n equivalent of moving the state backwards by roughly 2 80 positions.\n It can provide up to 2 16 non-overlapping subsequences of length\n about 2 80 ; each subsequence can provide up to 2 16 non-overlapping subsequences of length (2 64 - 1) using the\n Jump() method. Arguments Type Intent Optional Attributes Name class( L32X64MRNG ), intent(inout) :: RNG 'L32X64MRNG' object Return Value type( L32X64MRNG ) new 'L32X64MRNG' object Source Code TYPE , EXTENDS ( IntegerRNG ) :: L32X64MRNG PRIVATE !  The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt32 :: A ! The per-instance state: S for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt32 :: S , X0 , X1 CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: MakeACopy => L32X64MRNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L32X64MRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => L32X64MRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L32X64MRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L32X64MRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L32X64MRNG_Split !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => L32X64MRNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => L32X64MRNG_LongJump ! --------------------------------------------------------------------- END TYPE L32X64MRNG","tags":"","loc":"type\\l32x64mrng.html"},{"title":"L32X64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: L32X64RNG The L32X64RNG type is an Integer PRNG type based on the L32X64 algorithm, which is a specific member of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => L32X64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L32X64RNG_BaseInit(RNG, Seed) To initialize the 'L32X64RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L32X64RNG ), intent(inout) :: RNG 'L32X64RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seeds procedure, public :: NextIntegerImpl => L32X64RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function L32X64RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( L32X64RNG ), intent(inout) :: RNG 'L32X64RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => L32X64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L32X64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L32X64RNG ), intent(in) :: RNG 'L32X64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L32X64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L32X64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L32X64RNG ), intent(in) :: RNG 'L32X64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Split => L32X64RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L32X64RNG_Split(RNG, Brine) result(NewRNG) To create a new generator split off from the current instance.\n The new generator is initialized and returned where it shares\n no mutable state with the current generator.  However, with very\n high probability, the set of values collectively generated by\n the two generators has the same statistical properties as if the\n same quantity of values were generated by a single thread using\n a single generator.  Either or both of the two generators may be\n further split using this routine, and the same expected statistical\n properties apply to the entire set of generators constructed by\n such recursive splitting. Arguments Type Intent Optional Attributes Name class( L32X64RNG ), intent(inout) :: RNG 'L32X64RNG' object integer(kind=kInt64), intent(in), optional :: Brine a long value, of which the low 63 bits provide a unique id among calls\n to this routine for constructing a single series of Generator objects. Return Value type( L32X64RNG ) new 'L32X64RNG' object Source Code TYPE , EXTENDS ( IntegerRNG ) :: L32X64RNG PRIVATE !  The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt32 :: A ! The per-instance state: S for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt32 :: S , X0 , X1 CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: SetParameters => L32X64RNG_SetParameters ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L32X64RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => L32X64RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L32X64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L32X64RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L32X64RNG_Split ! --------------------------------------------------------------------- END TYPE L32X64RNG","tags":"","loc":"type\\l32x64rng.html"},{"title":"L128X1024RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L128X1024RNG The L128X1024RNG type is a Long PRNG type based on the L128X1024 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => L128X1024RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L128X1024RNG_BaseInit(RNG, Seed) To initialize the 'L128X1024RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L128X1024RNG ), intent(inout) :: RNG 'L128X1024RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => L128X1024RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L128X1024RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( L128X1024RNG ), intent(inout) :: RNG 'L128X1024RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L128X1024RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L128X1024RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L128X1024RNG ), intent(in) :: RNG 'L128X1024RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L128X1024RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L128X1024RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L128X1024RNG ), intent(in) :: RNG 'L128X1024RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Split => L128X1024RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L128X1024RNG_Split(RNG, Brine) result(NewRNG) To initialize and return a new 'L128X1024RNG' object that shares no mutable\n state with this object. However, with very high probability, the set of\n values collectively generated by the two objects has the same statistical\n properties as if the same quantity of values were generated by a single\n thread using a single object.  Either or both of the two objects may be\n further split using this routine, and the same expected statistical\n properties apply to the entire set of generators constructed by such\n recursive splitting. Arguments Type Intent Optional Attributes Name class( L128X1024RNG ), intent(inout) :: RNG 'L128X1024RNG' object integer(kind=kInt64), intent(in), optional :: Brine a long value, of which the low 63 bits provide a unique id among calls\n to this routine for constructing a single series of Generator objects. Return Value type( L128X1024RNG ) new 'L128X1024RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L128X1024RNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0 ... X15 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: SH , SL tSInt64 :: X ( 0 : N - 1 ) tSInt32 :: P CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128X1024RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128X1024RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128X1024RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128X1024RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128X1024RNG_Split ! --------------------------------------------------------------------- END TYPE L128X1024RNG","tags":"","loc":"type\\l128x1024rng.html"},{"title":"Sfc64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: Sfc64RNG The Sfc64RNG type is a Long PRNG type based on the Small,\n Fast, Counting (SFC) 64-bit generator by Chris Doty-Humphrey. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Sfc64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Sfc64RNG_BaseInit(RNG, Seed) To initialize the 'Sfc64RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Sfc64RNG ), intent(inout) :: RNG integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => Sfc64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Sfc64RNG_NextLong(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Sfc64RNG ), intent(inout) :: RNG 'Sfc64RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => Sfc64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Sfc64RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Sfc64RNG ), intent(in) :: RNG 'Sfc64RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Sfc64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Sfc64RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Sfc64RNG ), intent(in) :: RNG 'Sfc64RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: Sfc64RNG PRIVATE ! the working states tSInt64 :: A , B , C ! the counter tSInt64 :: Counter CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Sfc64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Sfc64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Sfc64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Sfc64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Sfc64RNG","tags":"","loc":"type\\sfc64rng.html"},{"title":"Mrg32k3aRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Mrg32k3aRNG The Mrg32k3aRNG type is an Integer PRNG type based on 32-bit\n combined multiple recursive generator (MRG) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Mrg32k3aRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Mrg32k3aRNG_BaseInit(RNG, Seed) To initialize the 'Mrg32k3aRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Mrg32k3aRNG ), intent(inout) :: RNG 'Mrg32k3aRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Mrg32k3aRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Mrg32k3aRNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Mrg32k3aRNG ), intent(inout) :: RNG 'Mrg32k3aRNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Mrg32k3aRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Mrg32k3aRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Mrg32k3aRNG ), intent(in) :: RNG 'Mrg32k3aRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Mrg32k3aRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Mrg32k3aRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Mrg32k3aRNG ), intent(in) :: RNG 'Mrg32k3aRNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: NextDoubleImpl => Mrg32k3aRNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Mrg32k3aRNG_NextDouble(RNG) result(RandNum) To return the 64-bit random floating-point value.  This routine\n overrides the default implementation. Arguments Type Intent Optional Attributes Name class( Mrg32k3aRNG ), intent(inout) :: RNG 'Mrg32k3aRNG' object Return Value real(kind=kDouble) random number procedure, public :: Default_NextIntegerLimits => Mrg32k3aRNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound. private  function Mrg32k3aRNG_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in between the lower limit (inclusive) and the upper\n limit (exclusive). This routine overrides the default implementation. Arguments Type Intent Optional Attributes Name class( Mrg32k3aRNG ), intent(inout) :: RNG 'Mrg32k3aRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number Source Code TYPE , EXTENDS ( IntegerRNG ) :: Mrg32k3aRNG PRIVATE ! states tSInt64 :: State ( 0 : 5 ) = DefaultSeed CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: NextValue => Mrg32k3aRNG_NextValue ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mrg32k3aRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Mrg32k3aRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mrg32k3aRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mrg32k3aRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Mrg32k3aRNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Mrg32k3aRNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Mrg32k3aRNG","tags":"","loc":"type\\mrg32k3arng.html"},{"title":"L128X256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L128X256RNG The L128X256RNG type is a Long PRNG type based on the L128X256 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => L128X256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L128X256RNG_BaseInit(RNG, Seed) To initialize the 'L128X256RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L128X256RNG ), intent(inout) :: RNG 'L128X256RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed procedure, public :: NextLongImpl => L128X256RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L128X256RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( L128X256RNG ), intent(inout) :: RNG 'L128X256RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L128X256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L128X256RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L128X256RNG ), intent(in) :: RNG 'L128X256RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L128X256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L128X256RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L128X256RNG ), intent(in) :: RNG 'L128X256RNG' object Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Split => L128X256RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L128X256RNG_Split(RNG, Brine) result(NewRNG) To initialize and return a new 'L128X256RNG' object that shares no mutable\n state with this object. However, with very high probability, the set of\n values collectively generated by the two objects has the same statistical\n properties as if the same quantity of values were generated by a single\n thread using a single object.  Either or both of the two objects may be\n further split using this routine, and the same expected statistical\n properties apply to the entire set of generators constructed by such\n recursive splitting. Arguments Type Intent Optional Attributes Name class( L128X256RNG ), intent(inout) :: RNG 'L128X256RNG' object integer(kind=kInt64), intent(in), optional :: Brine a long value, of which the low 63 bits provide a unique id among calls\n to this routine for constructing a single series of Generator objects. Return Value type( L128X256RNG ) new 'L128X256RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L128X256RNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0, X1, X2 and X3 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: SH , SL , X0 , X1 , X2 , X3 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128X256RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128X256RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128X256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128X256RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128X256RNG_Split ! --------------------------------------------------------------------- END TYPE L128X256RNG","tags":"","loc":"type\\l128x256rng.html"},{"title":"L64X128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L64X128RNG The L64X128RNG type is a Long PRNG type based on the L64X128 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => L64X128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L64X128RNG_BaseInit(RNG, Seed) To initialize the 'L64X128RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L64X128RNG ), intent(inout) :: RNG 'L64X128RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => L64X128RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L64X128RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( L64X128RNG ), intent(inout) :: RNG 'L64X128RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L64X128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L64X128RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L64X128RNG ), intent(in) :: RNG 'L64X128RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L64X128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L64X128RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L64X128RNG ), intent(in) :: RNG 'L64X128RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use L64X128 (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use L64X128 (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use L64X128StarStar algorithm --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use L64X128StarStar algorithm --->    CALL RNG%Initialize(.TRUE., Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine L64X128RNG_InitWithFlag(RNG, Seed, UseStarStar) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( L64X128RNG ), intent(inout) :: RNG 'L64X128RNG' object integer(kind=kInt64), intent(in), optional :: Seed (:) optional 64-bit integer seed(s) logical, intent(in) :: UseStarStar algorithm flag - true, use L64X128StarStar algorithm. - false, use L64X128 algorithm. procedure, public :: Split => L64X128RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L64X128RNG_Split(RNG, Brine) result(NewRNG) To initialize and return a new 'L64X128RNG' object that shares no mutable\n state with this object. However, with very high probability, the set of\n values collectively generated by the two objects has the same statistical\n properties as if the same quantity of values were generated by a single\n thread using a single object.  Either or both of the two objects may be\n further split using this routine, and the same expected statistical\n properties apply to the entire set of generators constructed by such\n recursive splitting. Arguments Type Intent Optional Attributes Name class( L64X128RNG ), intent(inout) :: RNG 'L64X128RNG' object integer(kind=kInt64), intent(in), optional :: Brine a long value, of which the low 63 bits provide a unique id among calls\n to this routine for constructing a single series of Generator objects. Return Value type( L64X128RNG ) new 'L64X128RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L64X128RNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt64 :: S , X0 , X1 ! algorithm flag tLogical :: UseStarStar = FalseVal CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => L64X128RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64X128RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64X128RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64X128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64X128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use L64X128 (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use L64X128 (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use L64X128StarStar algorithm <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use L64X128StarStar algorithm <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64X128RNG_Split ! --------------------------------------------------------------------- END TYPE L64X128RNG","tags":"","loc":"type\\l64x128rng.html"},{"title":"XoRoShiRo128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: XoRoShiRo128RNG The XoRoShiRo128RNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalization Procedures final :: XoRoShiRo128RNG_Finalization To perform finalization of the PRNG. private  subroutine XoRoShiRo128RNG_Finalization(RNG) To perform finalization of the 'XoRoShiRo128RNG' object. Arguments Type Intent Optional Attributes Name type( XoRoShiRo128RNG ), intent(inout) :: RNG 'XoRoShiRo128RNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => XoRoShiRo128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine XoRoShiRo128RNG_BaseInit(RNG, Seed) To initialize the PRNG with specified seed(s). Arguments Type Intent Optional Attributes Name class( XoRoShiRo128RNG ), intent(inout) :: RNG 'XoRoShiRo128RNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => XoRoShiRo128RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function XoRoShiRo128RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoRoShiRo128RNG ), intent(inout) :: RNG 'XoRoShiRo128RNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => XoRoShiRo128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function XoRoShiRo128RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( XoRoShiRo128RNG ), intent(in) :: RNG 'XoRoShiRo128RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => XoRoShiRo128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function XoRoShiRo128RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( XoRoShiRo128RNG ), intent(in) :: RNG 'XoRoShiRo128RNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoRoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoRoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoRoShiRo128Plus algorithm --->    CALL RNG%Initialize(XoRoShiRo128Plus) ! initialize with seed(s); use XoRoShiRo128PlusPlus algorithm --->    CALL RNG%Initialize(XoRoShiRo128PlusPlus, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine XoRoShiRo128RNG_InitWithFlag(RNG, XoRoShiRoAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( XoRoShiRo128RNG ), intent(inout) :: RNG 'XoRoShiRo128RNG' object integer(kind=kInt32), intent(in) :: XoRoShiRoAlgo algorithm flag - 1, use XoRoShiRo128StarStar algorithm. - 2, use XoRoShiRo128Plus algorithm. - 3, use XoRoShiRo128PlusPlus algorithm. integer(kind=kInt64), intent(in), optional :: Seed (:) optional 32-bit integer seed(s) procedure, public :: Jump => XoRoShiRo128RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function XoRoShiRo128RNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent\n of a number of sequential calls to a method that updates the state of the\n generator.  The jump size is the equivalent of 2 64 calls to the\n generator's NextLong() method.  It can provide up to 2 64 non-overlapping subsequences. Arguments Type Intent Optional Attributes Name class( XoRoShiRo128RNG ), intent(inout) :: RNG 'XoRoShiRo128RNG' object Return Value type( XoRoShiRo128RNG ) new 'XoRoShiRo128RNG' object procedure, public :: LongJump => XoRoShiRo128RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function XoRoShiRo128RNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The current state will be advanced in a single operation by the equivalent of\n a number of sequential calls to a method that updates the state of the generator.\n The jump size is the equivalent of 2 96 calls to the generator's\n NextLong() method.  It can provide up to 2 32 non-overlapping\n subsequences of length 2 96 ; each subsequence can provide up to\n 2 32 non-overlapping subsequences of length 2 64 using the generator's Jump() method. Arguments Type Intent Optional Attributes Name class( XoRoShiRo128RNG ), intent(inout) :: RNG 'XoRoShiRo128RNG' object Return Value type( XoRoShiRo128RNG ) new 'XoRoShiRo128RNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: XoRoShiRo128RNG PRIVATE ! states tSInt64 :: State0 , State1 ! algorithm flag tSInt32 :: XoRoShiRoAlgo = XoRoShiRo128StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () PROCEDURE ( Update ), POINTER :: UpdateState => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoRoShiRo128RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoRoShiRo128RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoRoShiRo128RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoRoShiRo128RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoRoShiRo128RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoRoShiRo128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoRoShiRo128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoRoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoRoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoRoShiRo128Plus algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo128Plus) <br> !   ! initialize with seed(s); use XoRoShiRo128PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo128PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoRoShiRo128RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoRoShiRo128RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoRoShiRo128RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoRoShiRo128RNG","tags":"","loc":"type\\xoroshiro128rng.html"},{"title":"Jsf32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Jsf32RNG The Jsf32RNG type is an Integer PRNG type based on the small\n fast non-cryptographic PRNG by Bob Jenkins. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Jsf32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Jsf32RNG_BaseInit(RNG, Seed) To initialize the 'Jsf32RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Jsf32RNG ), intent(inout) :: RNG 'Jsf32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed procedure, public :: NextIntegerImpl => Jsf32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Jsf32RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Jsf32RNG ), intent(inout) :: RNG 'Jsf32RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Jsf32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Jsf32RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Jsf32RNG ), intent(in) :: RNG 'Jsf32RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Jsf32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Jsf32RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Jsf32RNG ), intent(in) :: RNG 'Jsf32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Jsf32RNG PRIVATE ! the working states tSInt32 :: A , B , C , D CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Jsf32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Jsf32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Jsf32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Jsf32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Jsf32RNG","tags":"","loc":"type\\jsf32rng.html"},{"title":"Mwc256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Mwc256RNG The Mwc256RNG type is an Integer PRNG type based on the MWC (Multiply-With-Carry) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Mwc256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Mwc256RNG_BaseInit(RNG, Seed) To initialize the 'Mwc256RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Mwc256RNG ), intent(inout) :: RNG 'Mwc256RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Mwc256RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Mwc256RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Mwc256RNG ), intent(inout) :: RNG 'Mwc256RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Mwc256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Mwc256RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( Mwc256RNG ), intent(in) :: RNG 'Mwc256RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Mwc256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Mwc256RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Mwc256RNG ), intent(in) :: RNG 'Mwc256RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Mwc256RNG PRIVATE ! the working states tSInt32 :: State ( 0 : Q_SIZE - 1 ) ! current index in \"state\" array tSInt32 :: Index ! carry tSInt32 :: Carry CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mwc256RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Mwc256RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mwc256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mwc256RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Mwc256RNG","tags":"","loc":"type\\mwc256rng.html"},{"title":"ChaChaRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: ChaChaRNG The ChaChaRNG type is a Long PRNG type based on the ChaCha algorithm\n by D.J. Bernstein. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => ChaChaRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine ChaChaRNG_BaseInit(RNG, Seed) To initialize the 'ChaChaRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( ChaChaRNG ), intent(inout) :: RNG 'ChaChaRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => ChaChaRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function ChaChaRNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( ChaChaRNG ), intent(inout) :: RNG 'ChaChaRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => ChaChaRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function ChaChaRNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( ChaChaRNG ), intent(in) :: RNG 'ChaChaRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => ChaChaRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function ChaChaRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( ChaChaRNG ), intent(in) :: RNG 'ChaChaRNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( LongRNG ) :: ChaChaRNG PRIVATE !% current state and parts of the recently generated numbers. tUInt32 :: Input ( STATE_SIZE ) tUInt32 :: Output ( STATE_SIZE ) !% index into the output tIndex :: Index CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: Update => ChaChaRNG_Update ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => ChaChaRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => ChaChaRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => ChaChaRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => ChaChaRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE ChaChaRNG","tags":"","loc":"type\\chacharng.html"},{"title":"Mt32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Mt32RNG The Mt32RNG type is an Integer PRNG type based on the Mersenne\n Twister algorithm by Makoto Matsumoto and Takuji Nishimura. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Mt32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Mt32RNG_BaseInit(RNG, Seed) To initialize the 'Mt32RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Mt32RNG ), intent(inout) :: RNG 'Mt32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Mt32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Mt32RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Mt32RNG ), intent(inout) :: RNG 'Mt32RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Mt32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Mt32RNG_GetName(RNG) result(Name) To return the name of the generator Arguments Type Intent Optional Attributes Name class( Mt32RNG ), intent(in) :: RNG 'Mt32RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Mt32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Mt32RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Mt32RNG ), intent(in) :: RNG 'Mt32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Mt32RNG PRIVATE ! bytes pool tSInt32 :: MT ( 0 : N - 1 ) ! current index in the bytes pool tSInt32 :: MTI CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mt32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Mt32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mt32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mt32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Mt32RNG","tags":"","loc":"type\\mt32rng.html"},{"title":"LongRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, ABSTRACT, extends( BaseRNG ) :: LongRNG The LongRNG type is an abstract PRNG type that directly extends\n the BaseRNG type.  It is provided to aid the implementation of an Long PRNG whose main purpose is to produce a 64-bit integer random\n number.  Therefore, all so-called Long PRNGs should extend from\n this base type. Type-Bound Procedures procedure(NextI64), public, deferred :: NextLongImpl NextLongImpl is a binding name of the NextI64 deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. function NextI64(RNG) result(RandNum) Prototype NextI64 is a deferred procedure to return a random 64-bit-integer value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value integer(kind=kInt64) random number generated procedure(RNGName), public, deferred :: GetName GetName is a binding name of the RNGName deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() function RNGName(RNG) result(Name) Prototype RNGName is a deferred procedure to return the name of the generator. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(in) :: RNG random number generator Return Value character(kind=kChar, len=:), ALLOCATABLE generator's name procedure(SeedSize), public, deferred :: GetSeedSize GetSeedSize is a binding name of the SeedSize deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize the PRNG. Usage : --->    SeedSize = PRNG%GetSeedSize() function SeedSize(RNG) result(Size) Prototype SeedSize is a deferred procedure to return size of specified\n seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(in) :: RNG random number generator Return Value integer(kind=kInt32) size of specified seed(s) procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure(InitBase), public, deferred :: BaseInit BaseInit is a binding name of the InitBase deferred procedure. This procedure is intentionally employed as a base initialization that\n all other initialization procedures should call this procedure.  Also,\n it is intended to be used internally by an implementor, not a user. subroutine InitBase(RNG, Seed) Prototype InitBase is a deferred procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. This procedure is intentionally employed as a base initialization that\n all other initialization procedures should call this procedure.  Also,\n it is intended to be used internally by an implementor, not a user. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG random number generator integer(kind=kInt64), intent(in) :: Seed (:) seed(s) whose size depends on the PRNG to be initialized procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) Source Code TYPE , ABSTRACT , EXTENDS ( BaseRNG ) :: LongRNG PRIVATE ! initial seed used to re-initialize the PRNG tSInt64 , ALLOCATABLE :: InitSeed (:) CONTAINS ! --------------------------------------------------------------------- ! -----               Additional Deferred Procedure               ----- ! --------------------------------------------------------------------- !> *BaseInit* is a binding name of the *InitBase* deferred procedure. <br> !  This procedure is intentionally employed as a base initialization that !  all other initialization procedures should call this procedure.  Also, !  it is intended to be used internally by an implementor, not a user. PROCEDURE ( InitBase ), DEFERRED :: BaseInit ! --------------------------------------------------------------------- ! -----               Deferred Procedures Implemented             ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE :: InitWOSeedImpl => Default_InitNoSeed !> *ReInit* is a deferred procedure. <br> !  **Type-Bound Subroutine**: ReInit <br> !  **Purpose**:  To reset the PRNG to its initial state. <br> !  **Usage**: <br> !   --->    CALL PRNG%ReInit() PROCEDURE :: ReInit => Default_ReInitialize !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Default_NextInteger !> *NextI128Impl* is a deferred procedure. <br> !  Use the *NextI128* method in place of the *NextI128Impl* method !  to generate a signed 128-bit integer number. PROCEDURE :: NextI128Impl => Default_NextI128 !> *NextU128Impl* is a deferred procedure. <br> !  Use the *NextU128* method in place of the *NextU128Impl* method !  to generate an unsigned 128-bit integer number. PROCEDURE :: NextU128Impl => Default_NextU128 !> *NextDoubleImpl* is a deferred procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Default_NextDouble !> *NextQuadImpl* is a deferred procedure. <br> !  Use the *NextQuad* method in place of the *NextQuadImpl* method !  to generate a 128-bit real number. PROCEDURE :: NextQuadImpl => Default_NextQuad ! --------------------------------------------------------------------- ! -----               Public Procedures                           ----- ! --------------------------------------------------------------------- !> *InitWSeedImpl* is a procedure to initialize the generator with !  specified seed(s).  Instances of the PRNG initialized with the same !  seed(s) in the same program should  produce identical sequences of !  values. <br> !  Use the *Initialize* method in place of the *InitWSeedImpl* method to !  initialize the PRNG with specified seed(s). PROCEDURE :: InitWSeedImpl => Default_InitWithSeeds !> **Type-Bound Subroutine**: CopySeed <br> !  **Purpose**:  To copy the initial seeds of the source PRNG to !                that of the destination PRNG. <br> !  **Usage**: <br> !   --->    CALL SrcRNG%CopySeed(DstRNG) <br> !  **Usage**: This method is intended for internal use only. PROCEDURE :: CopySeed => Copy_InitSeed ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   --->    CALL RNG%Initialize() <br> !   --->    CALL RNG%Initialize(Seeds) GENERIC :: Initialize => InitWSeedImpl ! --------------------------------------------------------------------- END TYPE LongRNG","tags":"","loc":"type\\longrng.html"},{"title":"L64XMRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( LongRNG ) :: L64XMRNG The L64XMRNG type is a Long PRNG type based on the L64XM algorithms, which are specific members of the LXM family of\n algorithms for pseudo-random number generators. Finalization Procedures final :: L64XMRNG_Finalization To perform finalization of the PRNG. private  subroutine L64XMRNG_Finalization(RNG) To perform finalization of the 'L64XMRNG' object. Arguments Type Intent Optional Attributes Name type( L64XMRNG ), intent(inout) :: RNG 'L64XMRNG' object Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'LongRNG' object. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(in) :: SrcRng the source class( LongRNG ), intent(inout) :: DstRng the destination procedure, public :: BaseInit => L64XMRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine L64XMRNG_BaseInit(RNG, Seed) To initialize the 'L64XMRNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(inout) :: RNG 'L64XMRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) procedure, public :: NextLongImpl => L64XMRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. private  function L64XMRNG_NextLong(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(inout) :: RNG 'L64XMRNG' object Return Value integer(kind=kInt64) random number procedure, public :: GetName => L64XMRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function L64XMRNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(in) :: RNG 'L64XMRNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => L64XMRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function L64XMRNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(in) :: RNG 'L64XMRNG' object Return Value integer(kind=kInt32) size of specified seed(s) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use L64X128Mix (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use L64X128Mix (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use L64X128StarStar algorithm --->    CALL RNG%Initialize(L64X128StarStar) ! initialize with seed(s); use L64X1024Mix algorithm --->    CALL RNG%Initialize(L64X1024Mix, Seeds) private  subroutine Default_InitNoSeed(RNG) To initialize an 'LongRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'LongRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object integer(kind=kInt64), intent(in) :: Seed (:) seed(s) private  subroutine L64XMRNG_InitWithFlag(RNG, L64XMAlgo, Seed) To initialize the PRNG with the specified algorithm flag.  Optionally,\n initial seeds can be specified. Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(inout) :: RNG 'L64XMRNG' object integer(kind=kInt32), intent(in) :: L64XMAlgo algorithm flag (1-4); if out of applicable range, set it to default (L64X128Mix) integer(kind=kInt64), intent(in), optional :: Seed (:) optional seed(s) procedure, public :: Split => L64XMRNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. private  function L64XMRNG_Split(RNG) result(NewRNG) To create a new generator split off from the current instance.\n Use the current generator to generate an initial seed and also\n employ it as a source of randomness used to initialize the\n new generator. Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(inout) :: RNG 'L64XMRNG' object Return Value type( L64XMRNG ) new 'L64XMRNG' object procedure, public :: Jump => L64XMRNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. private  function L64XMRNG_Jump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The jump is performed by advancing the state of the LCG sub-generator by 1 cycle.\n The XBG state is unchanged. For L64X128MixRNGs, the jump size is the equivalent of moving the state backwards\n by (2 128 - 1) positions.  It can provide up to 2 64 non-overlapping subsequences. For L64X256MixRNG, the jump size is the equivalent of moving the state backwards\n by (2 256 - 1) positions.  It can provide up to 2 64 non-overlapping subsequences. For L64X128MixRNG, the jump size is the equivalent of moving the state backwards\n by (2 1024 - 1) positions.  It can provide up to 2 64 non-overlapping subsequences. Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(inout) :: RNG 'L64XMRNG' object Return Value type( L64XMRNG ) new 'L64XMRNG' object procedure, public :: LongJump => L64XMRNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times. private  function L64XMRNG_LongJump(RNG) result(NewRNG) To create a copy of the generator and then advances the state of the current\n instance.  The new instance is returned. The jump is performed by advancing the state of the LCG sub-generator by\n 2 64 cycles.  The XBG state is unchanged. For L64X128MixRNGs, the jump size is the equivalent of moving the state backwards\n by roughly 2 160 positions.  It can provide up to 2 32 non-overlapping subsequences of length approximately 2 160 ; each\n subsequence can provide up to 2 32 non-overlapping subsequences of\n length (2 128 - 1) using the Jump() method. For L64X256MixRNG, the jump size is the equivalent of moving the state backwards\n by roughly 2 288 positions.  It can provide up to 2 32 non-overlapping subsequences of length approximately 2 288 ; each\n subsequence can provide up to 2 32 non-overlapping subsequences of\n length (2 256 - 1) using the Jump() method. For L64X256MixRNG, the jump size is the equivalent of moving the state backwards\n by roughly 2 1056 positions.  It can provide up to 2 32 non-overlapping subsequences of length approximately 2 1056 ; each\n subsequence can provide up to 2 32 non-overlapping subsequences of\n length (2 1024 - 1) using the Jump() method. Arguments Type Intent Optional Attributes Name class( L64XMRNG ), intent(inout) :: RNG 'L64XMRNG' object Return Value type( L64XMRNG ) new 'L64XMRNG' object Source Code TYPE , EXTENDS ( LongRNG ) :: L64XMRNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0 ... for the XBG. ! At least one of the fields Xs must be nonzero. tSInt64 :: S tSInt64 , ALLOCATABLE :: X (:) ! index into the X \"state\" array tSInt32 :: Indx ! algorithm flag tSInt32 :: L64XMAlgo = L64X128Mix ! pointers to Next and Update routines PROCEDURE ( Next ), POINTER :: NextOutput => NULL () PROCEDURE ( Update ), POINTER :: UpdateState => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => L64XMRNG_InitWithFlag PROCEDURE , PRIVATE :: MakeACopy => L64XMRNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64XMRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64XMRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64XMRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64XMRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use L64X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use L64X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use L64X128StarStar algorithm <br> !   --->    CALL RNG%Initialize(L64X128StarStar) <br> !   ! initialize with seed(s); use L64X1024Mix algorithm <br> !   --->    CALL RNG%Initialize(L64X1024Mix, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64XMRNG_Split !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => L64XMRNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => L64XMRNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: L64XMRNG_Finalization ! --------------------------------------------------------------------- END TYPE L64XMRNG","tags":"","loc":"type\\l64xmrng.html"},{"title":"Sfc32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Sfc32RNG The Sfc32RNG type is an Integer PRNG type based on the Small,\n Fast, Counting (SFC) 32-bit generator by Chris Doty-Humphrey. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Sfc32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Sfc32RNG_BaseInit(RNG, Seed) To initialize the 'Sfc32RNG' object with specified seed(s). Arguments Type Intent Optional Attributes Name class( Sfc32RNG ), intent(inout) :: RNG 'Sfc32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed procedure, public :: NextIntegerImpl => Sfc32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Sfc32RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Sfc32RNG ), intent(inout) :: RNG 'Sfc32RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Sfc32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Sfc32RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Sfc32RNG ), intent(in) :: RNG 'Sfc32RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Sfc32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Sfc32RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Sfc32RNG ), intent(in) :: RNG 'Sfc32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Sfc32RNG PRIVATE ! the working states tSInt32 :: A , B , C ! the counter tSInt32 :: Counter CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Sfc32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Sfc32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Sfc32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Sfc32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Sfc32RNG","tags":"","loc":"type\\sfc32rng.html"},{"title":"Kiss32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation ","text":"type, public, extends( IntegerRNG ) :: Kiss32RNG The Kiss32RNG type is an Integer PRNG type based on the KISS (Keep it Simple Stupid) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextLong => NextLongImpl , Default_NextLongLimits private  function XoShiRo512RNG_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( XoShiRo512RNG ), intent(inout) :: RNG 'XoShiRo512RNG' object Return Value integer(kind=kInt64) random number private  function Default_NextLongLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(in) :: Bound1 a required limit integer(kind=kInt64), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt64) random number generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits private  function Default_NextInteger(RNG) result(RandNum) To return a random 32-bit-integer value.  This default implementation\n uses the 32 high-order bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value integer(kind=kInt32) random number private  function Default_NextIntegerLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit-integer value in the specified range.\n If Bound2 is not specified, the value is in the range between\n 0 and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in) :: Bound1 a required limit integer(kind=kInt32), intent(in), optional :: Bound2 an optional limit Return Value integer(kind=kInt32) random number generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(SInt128) random number private  function Default_NextI128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random signed 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can have either a positive\n or a negative value.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(in) :: Bound1 a required limit type(SInt128), intent(in), optional :: Bound2 an optional limit Return Value type(SInt128) random number generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value type(UInt128) random number private  function Default_NextU128Limits(RNG, Bound1, Bound2) result(RandNum) To generate a random unsigned 128-bit-integer value in the specified range.  If Bound2 is not specified, the value is in the range between 0 and Bound1 .  Otherwise, the\n value is in the range between Bound1 and Bound2 , where either one can be a lower\n or an upper limit.  The returned value is always in the range between the lower limit\n (inclusive) and the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(UInt128), intent(in) :: Bound1 a required limit type(UInt128), intent(in), optional :: Bound2 an optional limit Return Value type(UInt128) random number generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits private  function Default_NextSingle(RNG) result(RandNum) To return a random 32-bit real value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 24 high-order\n bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value real(kind=kSingle) random number private  function Default_NextSingleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 32-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(in) :: Bound1 a required limit real(kind=kSingle), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kSingle) random number generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive).  This default implementation uses the 53 high-order\n bits from a call to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kDouble) random number private  function Default_NextDoubleLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 64-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(in) :: Bound1 a required limit real(kind=kDouble), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kDouble) random number generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( LongRNG ), intent(inout) :: RNG 'LongRNG' object Return Value real(kind=kQuad) random number private  function Default_NextQuadLimits(RNG, Bound1, Bound2) result(RandNum) To generate a random 128-bit real value in the specified range.\n If Bound2 is not specified, the value is in the range between\n zero and Bound1 .  Otherwise, the value is in the range between Bound1 and Bound2 . It should be noted that both Bound1 and Bound2 arguments can\n have either a positive or a negative value.  The returned value\n is always in the range between the lower limit (inclusive) and\n the upper limit (exclusive). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(in) :: Bound1 a required limit real(kind=kQuad), intent(in), optional :: Bound2 an optional limit Return Value real(kind=kQuad) random number procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) private  function Default_NextString(RNG, StrType, StrLen, MaxLen) result(RandStr) To generate a random string (according to the specified optional\n input if they are present; otherwise, according default settings). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(in), optional :: StrType type of string (1-6) integer(kind=kInt32), intent(in), optional :: StrLen length of output string integer(kind=kInt32), intent(in), optional :: MaxLen maximum length of output string; if StrLen present, this parameter is ignored Return Value character(kind=kChar, len=:), ALLOCATABLE random string procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() private  function Default_NextLogical(RNG) result(RandVal) To return a random logical value.  This default implementation\n uses the sign bit from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value logical random value procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) private  subroutine Default_NextLogicalArray(RNG, BoolArray) To fill a user-supplied logical array with generated logical values\n based on calls to NextLogical(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object logical, intent(out) :: BoolArray (:) random numbers procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() private  function Default_NextByte(RNG) result(RandNum) To return a random 8-bit-integer value.  This default implementation\n uses the 8 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt8) random number procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) private  subroutine Default_NextByteArray(RNG, ByteArray) To fill a user-supplied 8-bit-integer array with generated byte values\n pseudo-randomly chosen uniformly from the range of values between\n -128 (inclusive) and 127 (inclusive). This default implementation generates random bytes from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt8), intent(out) :: ByteArray (0:) random numbers procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() private  function Default_NextShort(RNG) result(RandNum) To return a random 16-bit-integer value.  This default implementation\n uses the 16 high-order bits from a call to the 'NextInteger' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object Return Value integer(kind=kInt16) random number procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) private  subroutine Default_NextShortArray(RNG, ShortArray) To fill a user-supplied 16-bit-integer array with generated short values\n pseudo-randomly chosen uniformly from the range of values between\n -32768 (inclusive) and 32767 (inclusive). This default implementation generates random shorts from repeated\n calls to the 'NextLong' procedure. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt16), intent(out) :: ShortArray (0:) random numbers procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) private  subroutine Default_NextIntegerArray(RNG, IntegerArray) To fill a user-supplied 32-bit-integer array with generated integer values\n based on calls to NextInteger(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt32), intent(out) :: IntegerArray (:) random numbers procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) private  subroutine Default_NextLongArray(RNG, LongArray) To fill a user-supplied 64-bit-integer array with generated long values\n based on calls to NextLong(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object integer(kind=kInt64), intent(out) :: LongArray (:) random numbers procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) private  subroutine Default_NextI128Array(RNG, I128Array) To fill a user-supplied signed 128-bit-integer array with generated signed\n 128-bit-integer values based on calls to NextI128(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object type(SInt128), intent(out) :: I128Array (:) random numbers procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) private  subroutine Default_NextSingleArray(RNG, SingleArray) To fill a user-supplied 32-bit-floating-point array with generated\n single values based on calls to NextSingle(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kSingle), intent(out) :: SingleArray (:) random numbers procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) private  subroutine Default_NextDoubleArray(RNG, DoubleArray) To fill a user-supplied 64-bit-floating-point array with generated\n single values based on calls to NextDouble(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kDouble), intent(out) :: DoubleArray (:) random numbers procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) private  subroutine Default_NextQuadArray(RNG, QuadArray) To fill a user-supplied 128-bit-floating-point array with generated\n single values based on calls to NextQuad(). Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG 'BaseRNG' object real(kind=kQuad), intent(out) :: QuadArray (:) random numbers procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() interface private module function Default_NextGaussian(RNG) result(RandNum) To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian\n (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() interface private module function Default_NextExponential(RNG) result(RandNum) To return a nonnegative 64-bit floating point value pseudo-randomly chosen\n from a exponential distribution whose mean is 1.0. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() private  subroutine Default_ReInitialize(RNG) To re-initialize an 'IntegerRNG' object. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. private  function Default_NextLong(RNG) result(RandNum) To return the 64-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value integer(kind=kInt64) random number procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. private  function Default_NextI128(RNG) result(RandNum) To return the signed 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(SInt128) random number procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. private  function Default_NextU128(RNG) result(RandNum) To return the unsigned 128-bit random integer value. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value type(UInt128) random number procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. private  function Default_NextDouble(RNG) result(RandNum) To return a random 64-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kDouble) random number procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. private  function Default_NextQuad(RNG) result(RandNum) To return a random 128-bit-floating-point value between zero (inclusive)\n and one (exclusive). Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object Return Value real(kind=kQuad) random number procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. private  subroutine Copy_InitSeed(SrcRng, DstRng) To copy the InitSeed of the source to that of the destination. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(in) :: SrcRng the source class( IntegerRNG ), intent(inout) :: DstRng the destination generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl private  subroutine Default_InitNoSeed(RNG) To initialize an 'IntegerRNG' object without specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object private  subroutine Default_InitWithSeeds(RNG, Seed) To initialize an 'IntegerRNG' object with specified seeds. Arguments Type Intent Optional Attributes Name class( IntegerRNG ), intent(inout) :: RNG 'IntegerRNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: BaseInit => Kiss32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. private  subroutine Kiss32RNG_BaseInit(RNG, Seed) To initialize the PRNG with specified seed(s). Arguments Type Intent Optional Attributes Name class( Kiss32RNG ), intent(inout) :: RNG 'Kiss32RNG' object integer(kind=kInt32), intent(in) :: Seed (:) seed(s) procedure, public :: NextIntegerImpl => Kiss32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. private  function Kiss32RNG_NextInteger(RNG) result(RandNum) To return the 32-bit random integer value. Arguments Type Intent Optional Attributes Name class( Kiss32RNG ), intent(inout) :: RNG 'Kiss32RNG' object Return Value integer(kind=kInt32) random number procedure, public :: GetName => Kiss32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() private  function Kiss32RNG_GetName(RNG) result(Name) To return the name of the generator. Arguments Type Intent Optional Attributes Name class( Kiss32RNG ), intent(in) :: RNG 'Kiss32RNG' object Return Value character(kind=kChar, len=:), ALLOCATABLE name of the generator procedure, public :: GetSeedSize => Kiss32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() private  function Kiss32RNG_GetSeedSize(RNG) result(Size) To return size of specified seed(s) needed to initialize the generator. Arguments Type Intent Optional Attributes Name class( Kiss32RNG ), intent(in) :: RNG 'Kiss32RNG' object Return Value integer(kind=kInt32) size of specified seed(s) Source Code TYPE , EXTENDS ( IntegerRNG ) :: Kiss32RNG PRIVATE ! the working states tSInt32 :: Z , W , Jsr , Jcong CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Kiss32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Kiss32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Kiss32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Kiss32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Kiss32RNG","tags":"","loc":"type\\kiss32rng.html"},{"title":"NextR64 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"interface public  function NextR64(RNG) result(RandNum) Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated Description NextR64 is a deferred procedure to return a random 64-bit-real value.","tags":"","loc":"interface\\nextr64.html"},{"title":"I128_To_R128 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public  function I128_To_R128(I128Hi, I128Lo) result(R128) To convert a 128-bit integer value to a 128-bit real value. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: I128Hi upper 64 bits of the 128-bit integer integer(kind=kInt64), intent(in) :: I128Lo lower 64 bits of the 128-bit integer Return Value real(kind=kQuad) the 128-bit real Source Code FUNCTION I128_To_R128 ( I128Hi , I128Lo ) RESULT ( R128 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To convert a 128-bit integer value to a 128-bit real value. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: I128Hi !! upper 64 bits of the 128-bit integer tUInt64 , INTENT ( IN ) :: I128Lo !! lower 64 bits of the 128-bit integer tRealQP :: R128 !! the 128-bit real !** SUBROUTINE ARGUMENT DECLARATIONS: ! parameters for converting from 128-bit integer to 128-bit floating point number tRealQP , PARAMETER :: TwoPow64 = 2.0_kQuad ** 64 tUInt64 , PARAMETER :: TwoPow112 ( 2 ) = [ 0_kInt64 , 281474976710656_kInt64 ] ! SHIFTL(1, 112) tUInt32 , PARAMETER :: Mask = ToInt32 ( Z '00007FFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tLogical :: Negative tSInt64 :: High tUInt64 :: Low tSInt32 :: S , Shift tUInt64 :: Exp TYPE ( C_PTR ) :: cPtr ! C pointer to IBits tRealQP , POINTER :: fPtr ! Fortran pointer to IBits tUInt64 , TARGET :: IBits ( 2 ) ! FLOW ! get sign flag and absolute values of components Negative = ( I128Hi < 0_kInt64 ) IF ( Negative ) THEN High = NOT ( I128Hi ) IF ( I128Lo == 0_kInt64 ) High = High + 1_kInt64 Low = NOT ( I128Lo ) + 1_kInt64 ELSE High = I128Hi Low = I128Lo END IF IF ( High == 0_kInt64 ) THEN R128 = U64_To_R128 ( Low ) IF ( Negative ) R128 = - R128 RETURN END IF S = LEADZ ( High ) IF ( S >= 15 ) THEN R128 = U64_To_R128 ( Low ) + REAL ( High , KIND = kQuad ) * TwoPow64 IF ( Negative ) R128 = - R128 RETURN END IF ! Mask out the 113 MSBits Shift = 15 - S IBits ( 2 ) = SHIFTR ( High , Shift ) IBits ( 1 ) = IOR ( SHIFTR ( Low , Shift ), SHIFTL ( High , 64 - Shift )) ! get the binary exponent Exp = ToInt64 ( IAND ( 16510 - S , Mask )) ! 16510 = 64 + 64 + 16383 - 1 ! The leading bit is implicit, cancel it out to get the significand ! and also add the exponent IBits ( 1 ) = IEOR ( IOR ( SHIFTR ( Low , Shift ), SHIFTL ( High , 64 - Shift )), TwoPow112 ( 1 )) IBits ( 2 ) = IOR ( IEOR ( SHIFTR ( High , Shift ), TwoPow112 ( 2 )), SHIFTL ( Exp , 48 )) ! 48 = 112 - 64 !-----------------------------------------------------------------------! !+++++  Transfer output (R128 mapped to IBits using C_F_POINTER)   +++++! !-----------------------------------------------------------------------! IF (. NOT . IsLittleEndian ) THEN ! big-endian so swap IBits(1) and IBits(2) BLOCK tUInt64 :: Tmp Tmp = IBits ( 1 ); IBits ( 1 ) = IBits ( 2 ); IBits ( 2 ) = Tmp END BLOCK END IF ! get a C pointer to IBits cPtr = C_LOC ( IBits ) ! associate a Fortran data pointer with the C pointer CALL C_F_POINTER ( cPtr , fPtr ) ! get a 128-bit real number equivalent to the 128-bit integer number R128 = fPtr ! check and add sign if needed IF ( Negative ) R128 = - R128 ! nullify pointers NULLIFY ( fPtr ) cPtr = C_NULL_PTR RETURN CONTAINS FUNCTION U64_To_R128 ( LongVal ) RESULT ( QuadVal ) !** PURPOSE OF THIS SUBROUTINE: ! To convert an unsigned 64-bit integer number to a 128-bit floating point number !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: LongVal ! integer number treated as unsigned one tRealQP :: QuadVal ! floating point number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na !** FLOW IF ( LongVal >= 0_kInt64 ) THEN QuadVal = REAL ( LongVal , KIND = kQuad ) ELSE QuadVal = TwoPow64 + REAL ( LongVal , KIND = kQuad ) END IF RETURN END FUNCTION U64_To_R128 !****************************************************************************** END FUNCTION I128_To_R128","tags":"","loc":"proc\\i128_to_r128.html"},{"title":"Mix_Stafford_13 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"interface public module function Mix_Stafford_13(Input) result(Output) Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Input Return Value integer(kind=kInt64) Description To compute Stafford variant 13 of the 64-bit mixing function of\nthe MurmurHash3 hash function.","tags":"","loc":"interface\\mix_stafford_13.html"},{"title":"ScrambleWell â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"interface public module function ScrambleWell(Seed, Add) result(Output) Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Seed seed element integer(kind=kInt32), intent(in) :: Add offset Return Value integer(kind=kInt64) the transformed seed element Description To transform the initial state of a generator.","tags":"","loc":"interface\\scramblewell.html"},{"title":"GetRandomSeed64 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public interface GetRandomSeed64 To get a 64-bit integer value representing a seed value. Functions private module function Get_Random_Seed64() result(Output) To return a random 64-bit integer value that may be useful for\n initializing a source of seed value(s). Arguments None Return Value integer(kind=kInt64)","tags":"","loc":"interface\\getrandomseed64.html"},{"title":"GetRandomSeed32 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public interface GetRandomSeed32 To get a 32-bit integer value representing a seed value. Functions private module function Get_Random_Seed32() result(Output) To return a random 32-bit integer value that may be useful for\n initializing a source of seed value(s). Arguments None Return Value integer(kind=kInt32)","tags":"","loc":"interface\\getrandomseed32.html"},{"title":"Mix_Murmur â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public interface Mix_Murmur To compute the mixing function of the MurmurHash3 hash function. Functions private module function Mix_Murmur_32(Input) result(Output) To compute the 32-bit mixing function of the MurmurHash3 hash function. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: Input Return Value integer(kind=kInt32) private module function Mix_Murmur_64(Input) result(Output) To compute the 64-bit mixing function of the MurmurHash3 hash function. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Input Return Value integer(kind=kInt64)","tags":"","loc":"interface\\mix_murmur.html"},{"title":"Mix_Lea â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public interface Mix_Lea To compute Doug Lea's mixing function. Functions private module function Mix_Lea_32(Input) result(Output) To compute Doug Lea's 32-bit mixing function. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: Input Return Value integer(kind=kInt32) private module function Mix_Lea_64(Input) result(Output) To compute Doug Lea's 64-bit mixing function. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Input Return Value integer(kind=kInt64)","tags":"","loc":"interface\\mix_lea.html"},{"title":"Fill_State â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public interface Fill_State To fill state(s) based on the given seed(s). Subroutines private module subroutine Fill_State32(Seed, State) To fill 32-bit integer state(s) based on the given seed(s). Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: Seed (0:) integer(kind=kInt32), intent(out) :: State (0:) private module subroutine Fill_State64(Seed, State) To fill 64-bit integer state(s) based on the given seed(s). Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Seed (0:) integer(kind=kInt64), intent(out) :: State (0:)","tags":"","loc":"interface\\fill_state.html"},{"title":"Extend_Seed â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public interface Extend_Seed To extend the seed if the length of SeedIn is less than that of SeedOut. Subroutines private module subroutine Extend_Seed32(SeedIn, SeedOut) To extend the 32-bit integer seeds if the length of SeedIn is less than that of SeedOut. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: SeedIn (0:) integer(kind=kInt32), intent(out) :: SeedOut (0:) private module subroutine Extend_Seed64(SeedIn, SeedOut) To extend the 64-bit integer seeds if the length of SeedIn is less than that of SeedOut. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: SeedIn (0:) integer(kind=kInt64), intent(out) :: SeedOut (0:)","tags":"","loc":"interface\\extend_seed.html"},{"title":"CalculateBlockCount â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public  function CalculateBlockCount(K) result(Count) Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: K Return Value integer(kind=kInt32) Source Code FUNCTION CalculateBlockCount ( K ) RESULT ( Count ) !** PURPOSE OF THIS SUBROUTINE: ! To calculate the number of 32-bits blocks. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: K ! Number of bits in the pool tSInt32 :: Count ! the number of 32-bits blocks !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! The bits pool contains k bits, k = r w - p where r is the number ! of w bits blocks, w is the block size (always 32 in the original paper) ! and p is the number of unused bits in the last block. Count = ( K + BLOCK_SIZE - 1 ) / BLOCK_SIZE RETURN END FUNCTION CalculateBlockCount","tags":"","loc":"proc\\calculateblockcount.html"},{"title":"CreateIntegerRng â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public  function CreateIntegerRng(RngAlgo, Seed) result(NewRng) To create an instance of the specified Integer random number generator\n as well as to initialize the generator. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-29) integer(kind=kInt32), intent(in), optional :: Seed (:) seed(s) Return Value class( BaseRNG ), ALLOCATABLE 'BaseRNG' object Source Code FUNCTION CreateIntegerRng ( RngAlgo , Seed ) RESULT ( NewRng ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create an instance of the specified *Integer* random number generator !  as well as to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-29) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !! seed(s) CLASS ( BaseRNG ), ALLOCATABLE :: NewRng !! 'BaseRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I32_CMWC ) ALLOCATE ( Cmwc4096RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Cmwc4096RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_ISACC ) ALLOCATE ( IsaccRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( IsaccRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_JSF ) ALLOCATE ( Jsf32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Jsf32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_KISS ) ALLOCATE ( Kiss32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Kiss32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_L32_X64_M1 ) ALLOCATE ( L32X64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L32X64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_L32_X64_M2 ) ALLOCATE ( L32X64MRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L32X64MRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_LFSR113 ) ALLOCATE ( Lfsr113RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Lfsr113RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_MRG32K3A ) ALLOCATE ( Mrg32k3aRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mrg32k3aRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_MT ) ALLOCATE ( Mt32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_MWC ) ALLOCATE ( Mwc256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mwc256RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_PCG_LCG_XRS , I32_PCG_LCG_XRR ) ALLOCATE ( PcgLcg32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( PcgLcg32RNG ) IF ( RngAlgo == I32_PCG_LCG_XRS ) THEN CALL NewRng % Initialize ( TrueVal , Seed ) ELSE CALL NewRng % Initialize ( FalseVal , Seed ) END IF END SELECT CASE ( I32_PCG_MCG_XRS , I32_PCG_MCG_XRR ) ALLOCATE ( PcgMcg32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( PcgMcg32RNG ) IF ( RngAlgo == I32_PCG_MCG_XRS ) THEN CALL NewRng % Initialize ( TrueVal , Seed ) ELSE CALL NewRng % Initialize ( FalseVal , Seed ) END IF END SELECT CASE ( I32_RANLUX ) ALLOCATE ( RanLuxRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( RanLuxRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_SFC ) ALLOCATE ( Sfc32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Sfc32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_SUPERKISS ) ALLOCATE ( SuperKiss32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( SuperKiss32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_TUAS88 ) ALLOCATE ( Taus88RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Taus88RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_WELL512A , I32_WELL1024A , I32_WELL19937A , & I32_WELL19937C , I32_WELL49937A , I32_WELL49937B ) ALLOCATE ( Well32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Well32RNG ) SELECT CASE ( RngAlgo ) CASE ( I32_WELL512A ) CALL NewRng % Initialize ( WELL512a , Seed ) CASE ( I32_WELL1024A ) CALL NewRng % Initialize ( WELL1024a , Seed ) CASE ( I32_WELL19937A ) CALL NewRng % Initialize ( WELL19937a , Seed ) CASE ( I32_WELL19937C ) CALL NewRng % Initialize ( WELL19937C , Seed ) CASE ( I32_WELL49937A ) CALL NewRng % Initialize ( WELL49937a , Seed ) CASE ( I32_WELL49937B ) CALL NewRng % Initialize ( WELL49937b , Seed ) END SELECT END SELECT CASE ( I32_XOROSHIRO64S , I32_XOROSHIRO64SS ) ALLOCATE ( XoRoShiRo64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoRoShiRo64RNG ) IF ( RngAlgo == I32_XOROSHIRO64S ) THEN CALL NewRng % Initialize ( TrueVal , Seed ) ELSE CALL NewRng % Initialize ( FalseVal , Seed ) END IF END SELECT CASE ( I32_XOSHIRO128SS , I32_XOSHIRO128P , I32_XOSHIRO128PP ) ALLOCATE ( XoShiRo128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoShiRo128RNG ) SELECT CASE ( RngAlgo ) CASE ( I32_XOSHIRO128SS ) CALL NewRng % Initialize ( XoShiRo128StarStar , Seed ) CASE ( I32_XOSHIRO128P ) CALL NewRng % Initialize ( XoShiRo128Plus , Seed ) CASE ( I32_XOSHIRO128PP ) CALL NewRng % Initialize ( XoShiRo128PlusPlus , Seed ) END SELECT END SELECT CASE DEFAULT ALLOCATE ( Mt32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT END SELECT RETURN END FUNCTION CreateIntegerRng","tags":"","loc":"proc\\createintegerrng.html"},{"title":"CreateLongRng â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public  function CreateLongRng(RngAlgo, Seed) result(NewRng) To create an instance of the specified Long random number generator\n as well as to initialize the generator. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-41) integer(kind=kInt64), intent(in), optional :: Seed (:) seed(s) Return Value class( BaseRNG ), ALLOCATABLE 'BaseRNG' object Source Code FUNCTION CreateLongRng ( RngAlgo , Seed ) RESULT ( NewRng ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create an instance of the specified *Long* random number generator !  as well as to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-41) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !! seed(s) CLASS ( BaseRNG ), ALLOCATABLE :: NewRng !! 'BaseRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I64_CHACHA ) ALLOCATE ( ChaChaRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( ChaChaRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_JSF ) ALLOCATE ( Jsf64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Jsf64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_KISS ) ALLOCATE ( Kiss64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Kiss64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_KOMI ) ALLOCATE ( KomiRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( KomiRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L64_X128_M1 , I64_L64_X128_SS1 ) ALLOCATE ( L64X128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64X128RNG ) IF ( RngAlgo == I64_L64_X128_SS1 ) THEN CALL NewRng % Initialize ( Seed , UseStarStar = TrueVal ) ELSE CALL NewRng % Initialize ( Seed , UseStarStar = FalseVal ) END IF END SELECT CASE ( I64_L64_X256_M1 ) ALLOCATE ( L64X256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64X256RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L64_X1024_M1 ) ALLOCATE ( L64X1024RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64X1024RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L128_X128_M1 ) ALLOCATE ( L128X128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128X128RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L128_X256_M1 ) ALLOCATE ( L128X256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128X256RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L128_X1024_M1 ) ALLOCATE ( L128X1024RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128X1024RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L64_X128_M2 , I64_L64_X128_SS2 , I64_L64_X256_M2 , I64_L64_X1024_M2 ) ALLOCATE ( L64XMRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64XMRNG ) SELECT CASE ( RngAlgo ) CASE ( I64_L64_X128_M2 ) CALL NewRng % Initialize ( L64X128Mix , Seed ) CASE ( I64_L64_X128_SS2 ) CALL NewRng % Initialize ( L64X128StarStar , Seed ) CASE ( I64_L64_X256_M2 ) CALL NewRng % Initialize ( L64X256Mix , Seed ) CASE ( I64_L64_X1024_M2 ) CALL NewRng % Initialize ( L64X1024Mix , Seed ) END SELECT END SELECT CASE ( I64_L128_X128_M2 , I64_L128_X256_M2 , I64_L128_X1024_M2 ) ALLOCATE ( L128XMRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128XMRNG ) SELECT CASE ( RngAlgo ) CASE ( I64_L128_X128_M2 ) CALL NewRng % Initialize ( L128X128Mix , Seed ) CASE ( I64_L128_X256_M2 ) CALL NewRng % Initialize ( L128X256Mix , Seed ) CASE ( I64_L128_X1024_M2 ) CALL NewRng % Initialize ( L128X1024Mix , Seed ) END SELECT END SELECT CASE ( I64_LFSR258 ) ALLOCATE ( Lfsr258RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Lfsr258RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_MRG63K3A ) ALLOCATE ( Mrg63k3aRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mrg63k3aRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_MSWS ) ALLOCATE ( MswsRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( MswsRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_MT ) ALLOCATE ( Mt64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_PCG_RXS_M_XS ) ALLOCATE ( PcgRxsMXs64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( PcgRxsMXs64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_RANLUXPP ) ALLOCATE ( RanLuxPpRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( RanLuxPpRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SFC ) ALLOCATE ( Sfc64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Sfc64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SIP24 ) ALLOCATE ( Sip24RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Sip24RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SPLITMIX ) ALLOCATE ( SplitMixRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( SplitMixRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SUPERKISS ) ALLOCATE ( SuperKiss64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( SuperKiss64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_WY ) ALLOCATE ( WyRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( WyRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_XOROSHIRO128SS , I64_XOROSHIRO128P , I64_XOROSHIRO128PP ) ALLOCATE ( XoRoShiRo128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoRoShiRo128RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOROSHIRO128SS ) CALL NewRng % Initialize ( XoRoShiRo128StarStar , Seed ) CASE ( I64_XOROSHIRO128P ) CALL NewRng % Initialize ( XoRoShiRo128Plus , Seed ) CASE ( I64_XOROSHIRO128PP ) CALL NewRng % Initialize ( XoRoShiRo128PlusPlus , Seed ) END SELECT END SELECT CASE ( I64_XOROSHIRO1024S , I64_XOROSHIRO1024SS , I64_XOROSHIRO1024PP ) ALLOCATE ( XoRoShiRo1024RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoRoShiRo1024RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOROSHIRO1024S ) CALL NewRng % Initialize ( XoRoShiRo1024Star , Seed ) CASE ( I64_XOROSHIRO1024SS ) CALL NewRng % Initialize ( XoRoShiRo1024StarStar , Seed ) CASE ( I64_XOROSHIRO1024PP ) CALL NewRng % Initialize ( XoRoShiRo1024PlusPlus , Seed ) END SELECT END SELECT CASE ( I64_XOSHIRO256SS , I64_XOSHIRO256P , I64_XOSHIRO256PP ) ALLOCATE ( XoShiRo256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoShiRo256RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOSHIRO256SS ) CALL NewRng % Initialize ( XoShiRo256StarStar , Seed ) CASE ( I64_XOSHIRO256P ) CALL NewRng % Initialize ( XoShiRo256Plus , Seed ) CASE ( I64_XOSHIRO256PP ) CALL NewRng % Initialize ( XoShiRo256PlusPlus , Seed ) END SELECT END SELECT CASE ( I64_XOSHIRO512SS , I64_XOSHIRO512P , I64_XOSHIRO512PP ) ALLOCATE ( XoShiRo512RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoShiRo512RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOSHIRO512SS ) CALL NewRng % Initialize ( XoShiRo512StarStar , Seed ) CASE ( I64_XOSHIRO512P ) CALL NewRng % Initialize ( XoShiRo512Plus , Seed ) CASE ( I64_XOSHIRO512PP ) CALL NewRng % Initialize ( XoShiRo512PlusPlus , Seed ) END SELECT END SELECT CASE DEFAULT ALLOCATE ( Mt64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT END SELECT RETURN END FUNCTION CreateLongRng","tags":"","loc":"proc\\createlongrng.html"},{"title":"GetSeedSizeIntegerRng â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public  function GetSeedSizeIntegerRng(RngAlgo) result(Number) To return the number of seeds required by the specified algorithm. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-29) Return Value integer(kind=kInt32) number of seeds required by the specified algorithm Source Code FUNCTION GetSeedSizeIntegerRng ( RngAlgo ) RESULT ( Number ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the number of seeds required by the specified algorithm. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-29) tIndex :: Number !! number of seeds required by the specified algorithm !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I32_CMWC ) Number = 4097_kIndex CASE ( I32_ISACC ) Number = SHIFTL ( 1_kIndex , 8 ) CASE ( I32_JSF ) Number = 1_kIndex CASE ( I32_KISS ) Number = 4_kIndex CASE ( I32_L32_X64_M1 ) Number = 2_kIndex CASE ( I32_L32_X64_M2 ) Number = 4_kIndex CASE ( I32_LFSR113 ) Number = 4_kIndex CASE ( I32_MRG32K3A ) Number = 6_kIndex CASE ( I32_MT ) Number = 624_kIndex CASE ( I32_MWC ) Number = 257_kIndex CASE ( I32_PCG_LCG_XRS , I32_PCG_LCG_XRR ) Number = 4_kIndex CASE ( I32_PCG_MCG_XRS , I32_PCG_MCG_XRR ) Number = 2_kIndex CASE ( I32_RANLUX ) Number = 1_kIndex CASE ( I32_SFC ) Number = 3_kIndex CASE ( I32_SUPERKISS ) Number = 3_kIndex CASE ( I32_TUAS88 ) Number = 3_kIndex CASE ( I32_WELL512A ) Number = CalculateBlockCount ( 512 ) CASE ( I32_WELL1024A ) Number = CalculateBlockCount ( 1024 ) CASE ( I32_WELL19937A ) Number = CalculateBlockCount ( 19937 ) CASE ( I32_WELL19937C ) Number = CalculateBlockCount ( 19937 ) CASE ( I32_WELL49937A ) Number = CalculateBlockCount ( 49937 ) CASE ( I32_WELL49937B ) Number = CalculateBlockCount ( 49937 ) CASE ( I32_XOROSHIRO64S , I32_XOROSHIRO64SS ) Number = 2_kIndex CASE ( I32_XOSHIRO128SS , I32_XOSHIRO128P , I32_XOSHIRO128PP ) Number = 4_kIndex CASE DEFAULT Number = 624_kIndex END SELECT RETURN END FUNCTION GetSeedSizeIntegerRng","tags":"","loc":"proc\\getseedsizeintegerrng.html"},{"title":"GetSeedSizeLongRng â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"public  function GetSeedSizeLongRng(RngAlgo) result(Number) To return the number of seeds required by the specified algorithm. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-41) Return Value integer(kind=kInt32) number of seeds required by the specified algorithm Source Code FUNCTION GetSeedSizeLongRng ( RngAlgo ) RESULT ( Number ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the number of seeds required by the specified algorithm. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-41) tIndex :: Number !! number of seeds required by the specified algorithm !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I64_CHACHA ) Number = 5_kIndex CASE ( I64_JSF ) Number = 1_kIndex CASE ( I64_KISS ) Number = 4_kIndex CASE ( I64_KOMI ) Number = 1_kIndex CASE ( I64_L64_X128_M1 , I64_L64_X128_SS1 , I64_L64_X256_M1 , I64_L64_X1024_M1 ) Number = 1_kIndex CASE ( I64_L128_X128_M1 , I64_L128_X256_M1 , I64_L128_X1024_M1 ) Number = 1_kIndex CASE ( I64_L64_X128_M2 , I64_L64_X128_SS2 ) Number = 4_kIndex CASE ( I64_L64_X256_M2 ) Number = 6_kIndex CASE ( I64_L64_X1024_M2 ) Number = 18_kIndex CASE ( I64_L128_X128_M2 ) Number = 6_kIndex CASE ( I64_L128_X256_M2 ) Number = 8_kIndex CASE ( I64_L128_X1024_M2 ) Number = 20_kIndex CASE ( I64_LFSR258 ) Number = 5_kIndex CASE ( I64_MRG63K3A ) Number = 6_kIndex CASE ( I64_MSWS ) Number = 6_kIndex CASE ( I64_MT ) Number = 312_kIndex CASE ( I64_PCG_RXS_M_XS ) Number = 2_kIndex CASE ( I64_RANLUXPP ) Number = 1_kIndex CASE ( I64_SFC ) Number = 3_kIndex CASE ( I64_SIP24 ) Number = 4_kIndex CASE ( I64_SPLITMIX ) Number = 1_kIndex CASE ( I64_SUPERKISS ) Number = 3_kIndex CASE ( I64_WY ) Number = 1_kIndex CASE ( I64_XOROSHIRO128SS , I64_XOROSHIRO128P , I64_XOROSHIRO128PP ) Number = 2_kIndex CASE ( I64_XOROSHIRO1024S , I64_XOROSHIRO1024SS , I64_XOROSHIRO1024PP ) Number = 16_kIndex CASE ( I64_XOSHIRO256SS , I64_XOSHIRO256P , I64_XOSHIRO256PP ) Number = 4_kIndex CASE ( I64_XOSHIRO512SS , I64_XOSHIRO512P , I64_XOSHIRO512PP ) Number = 8_kIndex CASE DEFAULT Number = 312_kIndex END SELECT RETURN END FUNCTION GetSeedSizeLongRng","tags":"","loc":"proc\\getseedsizelongrng.html"},{"title":"MClass_Cmwc4096RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Cmwc4096RNG type and its related routines.\n  The Cmwc4096RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Cmwc4096RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the Complimentary-Multiply-With-Carry (CMWC) algorithm by George Marsaglia.  Its memory footprint is 131104 bits\n  and its period is roughly 2 131104 .\n  It is important to note that the CMWC PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Multiply-with-carry pseudorandom number generator [2] What stops the Multiply-With-Carry RNG from being a Cryptographically Secure PRNG? Uses MClass_IntegerRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Cmwc4096RNG The Cmwc4096RNG type is an Integer PRNG type based on the CMWC (Complimentary-Multiply-With-Carry) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Cmwc4096RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Cmwc4096RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Cmwc4096RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Cmwc4096RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_cmwc4096rng.html"},{"title":"MClass_XoShiRo256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the XoShiRo256RNG type and its related routines.\n  The XoShiRo256RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the XoShiRo256RNG type provides an implementation of the NextLongImpl deferred procedure based on algorithms from the Xor-Shift-Rotate\n  family of generators by Sebastiano Vigna. The XoShiRo256RNG type can represent three PRNG classes: - the XoShiRo256StarStar RNG, which is a fast all-purpose 64-bit generator, - the XoShiRo256Plus  RNG, which is a fast 64-bit generator suitable for\n    real number generation, or - the XoShiRo256PlusPlus RNG, which is a fast all-purpose 64-bit generator. By default, the XoShiRo256StarStar RNG is employed.  However, other XoShiRo256\n  PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3)\n  when initializing the generator.  The XoShiRo256RNG type has state size of\n  256 bits and period of 2 256 -1. In addition to common operations of a PRNG, the XoShiRo256RNG type provides\n  the Jump and LongJump methods where a large (or very large) number of steps\n  of the output sequence can be advanced in a single operation.  Each method creates\n  (and also returns) a copy of the input PRNG and then advances the state of the\n  specified PRNG.  The PRNG and its copy produce non-overlapping output for the\n  length of the jump intendedly for use in parallel computations. It is important to note that the XoShiRo256 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Xoshiro/Xoroshiro Generators and the PRNG shootout. [2] Apache Commons RNG: Class XoShiRo256StarStar [3] Apache Commons RNG: Class XoShiRo256Plus [4] Apache Commons RNG: Class XoShiRo256PlusPlus Uses MClass_LongRNG MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: XoShiRo256StarStar = 1 flag for XoShiRo256StarStar PRNG integer(kind=kInt32), public, parameter :: XoShiRo256Plus = 2 flag for XoShiRo256Plus PRNG integer(kind=kInt32), public, parameter :: XoShiRo256PlusPlus = 3 flag for XoShiRo256PlusPlus PRNG Derived Types type, public, extends( LongRNG )Â :: XoShiRo256RNG The XoShiRo256RNGRNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalizations Procedures final :: XoShiRo256RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => XoShiRo256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => XoShiRo256RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => XoShiRo256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => XoShiRo256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoShiRo256StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoShiRo256StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoShiRo256Plus algorithm --->    CALL RNG%Initialize(XoShiRo256Plus) ! initialize with seed(s); use XoShiRo256PlusPlus algorithm --->    CALL RNG%Initialize(XoShiRo256PlusPlus, Seeds) procedure, public :: Jump => XoShiRo256RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => XoShiRo256RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_xoshiro256rng.html"},{"title":"MClass_XoRoShiRo64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the XoRoShiRo64RNG type and its related routines.\n  The XoRoShiRo64RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the XoRoShiRo64RNG type provides an implementation of the NextIntegerImpl deferred procedure based on algorithms from the Xor-Shift-Rotate\n  family of generators by Sebastiano Vigna. The XoRoShiRo64RNG type can represent two PRNG classes: - the XoRoShiRo64StarStar RNG, which is a fast all-purpose 32-bit generator, or - the XoRoShiRo64Star RNG, which is a fast 32-bit generator suitable for\n    real number generation. By default, the XoRoShiRo64StarStar RNG is employed.  However, the XoRoShiRo64Star RNG can be utilized by specifying an algorithm flag to true when initializing the\n  generator.  The XoRoShiRo64RNG type has state size of 64 bits. It is important to note that the XoRoShiRo64 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Xoshiro/Xoroshiro Generators and the PRNG shootout. [2] Apache Commons RNG: Class XoRoShiRo64StarStar [3] Apache Commons RNG: Class XoRoShiRo64Star Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: XoRoShiRo64RNG The XoRoShiRo64RNG type is an Integer PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalizations Procedures final :: XoRoShiRo64RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => XoRoShiRo64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => XoRoShiRo64RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => XoRoShiRo64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => XoRoShiRo64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use random rotate (default) transformation --->    CALL RNG%Initialize() ! initialize with seed(s); use random rotate (default) transformation --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use random shift transformation --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use random shift transformation --->    CALL RNG%Initialize(.TRUE., Seeds)","tags":"","loc":"module\\mclass_xoroshiro64rng.html"},{"title":"MClass_MswsRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the MswsRNG type and its related routines.\n  The MswsRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the MswsRNG type provides an implementation of the NextLongImpl deferred procedure based on the middle-square method\n  by John von Neumann where a Weyl sequence is used to run the middle\n  square.  It has a state size of 192-bits and the period of at least\n  2 64 . It is important to note that the Msws PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Middle-square method [2] B. Widynski. 2017.\n      Middle Square Weyl Sequence RNG [3] Apache Commons RNG: Class MiddleSquareWeylSequence Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: MswsRNG The Mt32RNG type is a Long PRNG type based on the Middle Square\n Weyl Sequence RNG by B. Widynski. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => MswsRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => MswsRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => MswsRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => MswsRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: InitWOSeedImpl => MswsRNG_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: NextIntegerImpl => MswsRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number.","tags":"","loc":"module\\mclass_mswsrng.html"},{"title":"MClass_KomiRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the KomiRNG type and its related routines.\n  The KomiRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the KomiRNG type provides an implementation of the NextLongImpl deferred procedure based on the KomiRand algorithm by\n  Aleksey Vaneev.  It has a state size of 128-bits and a period of\n  2 64 . It is important to note that the Komi PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] KOMIHASH - Very fast, high-quality\n      hash function, discrete-incremental and streamed hashing-capable (non-cryptographic,\n      in C) + PRNG. Uses MClass_LongRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: KomiRNG The KomiRNG type is a Long PRNG type based on a simple, but reliable,\n self-starting, and fast 64-bit PRNG by Aleksey Vaneev. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => KomiRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => KomiRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => KomiRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => KomiRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_komirng.html"},{"title":"MClass_Jsf64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Jsf64RNG type and its related routines.\n  The Jsf64RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the Jsf64RNG type provides an implementation of the NextLongImpl deferred procedure based on Bob Jenkins's small fast\n  non-cryptographic (64-bit variant) PRNG.  It has a state size of 256-bits. It is important to note that the Jsf64 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] A small non-cryptographic PRNG [2] Apache Commons RNG: Class JenkinsSmallFast64 Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: Jsf64RNG The Jsf32RNG type is a Long PRNG type based on the small\n fast non-cryptographic PRNG by Bob Jenkins. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Jsf64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => Jsf64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => Jsf64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Jsf64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_jsf64rng.html"},{"title":"MClass_PcgMcg32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the PcgMcg32RNG type and its related routines.\n  The PcgMcg32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the PcgMcg32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on algorithms from the Permuted\n  Congruential Generator (PCG) family that use an internal 64-bit Multiplicative\n  Congruential Generator (MCG) and output 32-bits per cycle. The PcgMcg32RNG type can represent two PRNG classes: - a PCG that is composed of a 64-bit MCG combined with the XSH-RR (xorshift;\n    random rotate) output transformation, or - a PCG that is composed of a 64-bit MCG combined with the XSH-RS (xorshift;\n    random shift) output transformation. By default, the random rotate (RR) transformation is employed.  However, the\n  random shift (RS) transformation can be utilized by specifying an algorithm\n  flag to true when initializing the generator.  The PcgMcg32RNG type has\n  state size of 64 bits and a period of 2 62 . It is important to note that the PcgMcg32 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] PCG, A Family of Better Random Number Generators. [2] Apache Commons RNG: Class PcgMcgXshRr32 [3] Apache Commons RNG: Class PcgMcgXshRs32 Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: PcgMcg32RNG The PcgMcg32RNG type is an Integer PRNG type based on algorithms from\n the Permuted Congruential Generator (PCG) family that use an internal 64-bit\n Multiplicative Congruential Generator (MCG) and output 32-bits per cycle. Finalizations Procedures final :: PcgMcg32RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => PcgMcg32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => PcgMcg32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => PcgMcg32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => PcgMcg32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use random rotate (default) transformation --->    CALL RNG%Initialize() ! initialize with seed(s); use random rotate (default) transformation --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use random shift transformation --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use random shift transformation --->    CALL RNG%Initialize(.TRUE., Seeds)","tags":"","loc":"module\\mclass_pcgmcg32rng.html"},{"title":"MClass_L64X1024RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L64X1024RNG type and its related routines.\n  The L64X1024RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L64X1024RNG type provides an implementation of the NextLongImpl deferred procedure based on the L64X1024 algorithm.  The L64X1024 algorithm is a specific member of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L64X1024RNG type employs a 64-bit LCG, a 1024-bit XBG and a mixing function\n  where its memory footprint is 1184 bits and its period is roughly 2 1088 . In addition to common operations of a PRNG, the L64X1024RNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. It is important to note that the L64X1024 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: L64X1024RNG The L64X1024RNG type is a Long PRNG type based on the L64X1024 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => L64X1024RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L64X1024RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L64X1024RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L64X1024RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Split => L64X1024RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently.","tags":"","loc":"module\\mclass_l64x1024rng.html"},{"title":"MClass_WyRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the WyRNG type and its related routines.\n  The WyRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the WyRNG type provides an implementation of the NextLongImpl deferred procedure based on a combination of WyRand\n  and WyHash64 algorithms by Wang Yi.  It has a state size of 128-bits. It is important to note that the Wy PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] WYHASH and WYRAND - The FASTEST\n      QUALITY hash function, random number generators (PRNG) and hash map. Uses MClass_LongRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: WyRNG The WyRNG type is a Long PRNG type based on a combination of\nWyRand and WyHash64 algorithms by Wang Yi. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => WyRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => WyRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => WyRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => WyRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_wyrng.html"},{"title":"MClass_Kiss64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Kiss64RNG type and its related routines.\n  The Kiss64RNG type is an Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Long PRNG type. In particular, the Kiss64RNG type provides an implementation of the NextLongImpl deferred procedure based on the 64-bit KISS (Keep it\n  Simple Stupid) algorithm by George Marsaglia. The 64-bit KISS algorithm consists of a combination of four sub-generators,\n  each with 64 bits of state, of three kinds: - one linear congruential generator modulo 2 64 - one general binary linear generator over the vector space GF(2) 64 - two multiply-with-carry generators modulo 2 32 , with different\n    parameters The four generators are updated independently, and their states are combined\n  to form a sequence of 64-bit output words with period of about 2 250 . It is important to note that the Kiss64 PRNG requires an explicit\n  initialization by first calling the BaseInit method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] KISS (algorithm) [2] David Jones.  Good Practice in (Pseudo) Random Number Generation for\n      Bioinformatics Applications. [3] PRNGine - Pseudo Random Number Engines for Monte Carlo simulations:\n      Class KISS64Random Uses MClass_LongRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt64), public, parameter :: MaskL = INT(Z'00000000FFFFFFFF', KIND=kInt64) a mask used for masking 32 upper bits of a 64-bit integer Derived Types type, public, extends( LongRNG )Â :: Kiss64RNG The Kiss64RNG type is a Long PRNG type based on the KISS (Keep it Simple Stupid) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Kiss64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the BaseInit method to initialize the PRNG instead. procedure, public :: NextLongImpl => Kiss64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => Kiss64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Kiss64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_kiss64rng.html"},{"title":"MClass_IsaccRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the IsaccRNG type and its related routines.\n  The IsaccRNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the IsaccRNG type provides an implementation of the NextIntegerImpl deferred procedure based on the ISAAC (Indirection,\n  Shift, Accumulate, Add, and Count) algorithm.  the IsaccRNG type is\n  a fast cryptographic pseudo-random number generator due to the fact\n  that the ISAAC algorithm  has been designed to be cryptographically\n  secure and is inspired by the stream cipher RC4 . Cycles of generated random sequences are guaranteed to be at least\n  2 40 values long, and they are 2 8295 values long\n  on average.   The results are uniformly distributed, unbiased, and\n  unpredictable unless the seed is known. It is important to note that the ISAAC PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] ISAAC: a fast\n      cryptographic pseudo-random number generator [2] ISAAC (cipher)\n      - Wikipedia [3] Apache Commons RNG: Class ISAACRandom Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: IsaccRNG The IsaccRNG type is an Integer PRNG type based on the ISAAC (Indirection, Shift, Accumulate, Add, and Count) algorithm. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => IsaccRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => IsaccRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => IsaccRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => IsaccRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_isaccrng.html"},{"title":"MClass_RanLuxRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the RanLuxRNG type and its related routines.\n  The RanLuxRNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the RanLuxRNG type provides an implementation of the NextIntegerImpl deferred procedure based on the RANLUX algorithm\n  by Martin Luscher. Similar to the RCARRY algorithm, the RANLUX algorithm employs a\n  subtract-with-borrow (SWB) algorithm with a period on the order of\n  10 171 .  However, it throws away some of the numbers generated\n  in order to eliminate correlations.  Therefore, the RANLUX algorithm\n  trades execution speed for quality; by choosing a larger luxury setting\n  one gets better random numbers slower. The standard luxury levels provided are: - Level 0  (p=24): equivalent to the original RCARRY of Marsaglia\n    and Zaman, very long period, but fails many tests. - Level 1  (p=48): considerable improvement in quality over level 0,\n    now passes the gap test, but still fails spectral test. - Level 2  (p=97): passes all known tests, but theoretically still\n    defective. - Level 3  (p=223): DEFAULT VALUE.  Any theoretically possible\n    correlations have very small chance of being observed. - Level 4  (p=389): highest possible luxury, all 24 bits chaotic. The luxury level can be specified when initializing the generator. It is important to note that the RanLux PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] F. James. 1994.  RANLUX: A Fortran implementation of the high-quality\n      pseudorandom number generator of Luscher.  Computer Physics Communications,\n      79(1), pp. 111-114. [2] M. Luscher. 1994.  A portable high-quality random number generator for\n      lattice field theory simulations.  Computer Physics Communications, 79(1),\n      pp. 100-110. [3] G. Marsaglia and A. Zaman. 1991. A New Class of Random Number Generators.\n       The Annals of Applied Probability, 1(3), pp. 462-480. [4] Luxury: a Fortran 90 module implementation of the RANLUX generator by Alan Miller. Uses MClass_IntegerRNG MBase_SIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: RanLuxRNG The RanLuxRNG type is an Integer PRNG type based on the RANLUX algorithm by Martin Luscher. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => RanLuxRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => RanLuxRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => RanLuxRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => RanLuxRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithLuxLevel Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use default luxury level (= 3) --->    CALL RNG%Initialize() ! initialize with seed(s); use default luxury level (= 3) --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use specified luxury level (= 1) --->    CALL RNG%Initialize(1) ! initialize with seed(s); use specified luxury level (= 4) --->    CALL RNG%Initialize(4, Seeds) Usage : If specified, the luxury level should be between 0 and 4. procedure, public :: Default_NextSingle => RanLuxRNG_NextSingle Default_NextSingle is an overridden procedure. Use the NextSingle method in place of the Default_NextSingle method to generate a 32-bit real number.","tags":"","loc":"module\\mclass_ranluxrng.html"},{"title":"MClass_IntegerRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the IntegerRNG type and its related routines.\n  The IntegerRNG type is an abstract PRNG type that directly extends\n  the BaseRNG type.   It defines additional methods for a so-called Integer PRNG.  It also provides default implementations of some\n  deferred procedures required by a PRNG where other deferred procedures\n  must be implemented by its subtypes. By design, the IntegerRNG type is provided as a base type for an Integer PRNG whose main purpose is to produce a 32-bit integer random\n  number.   Therefore, all so-called Integer PRNGs are particularly\n  required to implement the NextIntegerImpl deferred procedure. Uses MBase_SInt128 iso_c_binding MBase_Common MBase_UInt128 MClass_BaseRNG MBase_MemHandlers Variables Type Visibility Attributes Name Initial integer(kind=kInt64), public, parameter :: MaskL = INT(Z'00000000FFFFFFFF', KIND=kInt64) a mask used for masking 32 upper bits of a 64-bit integer Derived Types type, public, extends( BaseRNG )Â :: IntegerRNG The IntegerRNG type is an abstract PRNG type that directly extends\n the BaseRNG type.  It is provided to aid the implementation of an Integer PRNG whose main purpose is to produce a 32-bit integer random\n number.  Therefore, all so-called Integer PRNGs should extend from\n this base type. Type-Bound Procedures procedure(NextI32), public, deferred :: NextIntegerImpl NextIntegerImpl is a binding name of the NextI32 deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure(RNGName), public, deferred :: GetName GetName is a binding name of the RNGName deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure(SeedSize), public, deferred :: GetSeedSize GetSeedSize is a binding name of the SeedSize deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize the PRNG. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure(InitBase), public, deferred :: BaseInit BaseInit is a binding name of the InitBase deferred procedure. This procedure is intentionally employed as a base initialization that\n all other initialization procedures should call this procedure.  Also,\n it is intended to be used internally by an implementor, not a user. procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) Functions public  function I128_To_R128 (I128Hi, I128Lo) result(R128) To convert a 128-bit integer value to a 128-bit real value. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: I128Hi upper 64 bits of the 128-bit integer integer(kind=kInt64), intent(in) :: I128Lo lower 64 bits of the 128-bit integer Return Value real(kind=kQuad) the 128-bit real","tags":"","loc":"module\\mclass_integerrng.html"},{"title":"MClass_Mt64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Mt64RNG type and its related routines.\n  The Mt64RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the Mt64RNG type provides an implementation of the NextLongImpl deferred procedure based on the 64-bit Mersenne Twister\n  algorithm by Makoto Matsumoto and Takuji Nishimura.  The Mt64 PRNG\n  features an extremely long period (2 19937 - 1) and\n  311-dimensional equidistribution up to 64 bits accuracy. It is important to note that the Mt64 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] T. Nishimura.  2000.  Tables of 64-bit Mersenne twisters.  ACM Transactions on\n      Modeling and Computer Simulation, Vol. 10, No. 4, October 2000, pp 348-357. [2] M. Matsumoto and T. Nishimura.  1998.  Mersenne Twister: A 623-Dimensionally\n      Equidistributed Uniform Pseudo-Random Number Generator.  ACM Transactions on\n      Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30. [3] Mersenne Twister 64bit version. [4] Apache Commons RNG: Class MersenneTwister64 Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: Mt64RNG The Mt64RNG type is a Long PRNG type based on the Mersenne\n Twister algorithm by Makoto Matsumoto and Takuji Nishimura. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Mt64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => Mt64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => Mt64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Mt64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_mt64rng.html"},{"title":"MClass_Sip24RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Sip24RNG type and its related routines.\n  The Sip24RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the Sip24RNG type provides an implementation of the NextLongImpl deferred procedure based on the SipHash24 algorithm.\n  The SipHash24 algorithm is a member of the SipHash family, which\n  is an add-rotate-xor (ARX) based family of pseudorandom functions by\n  by J.P. Aumasson and D.J. Bernstein. It is important to note that the Sip24 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] SipHash [2] SipHash: High-speed\n      secure pseudorandom function for short messages. [3] Pseudo Random Number Generator (PRNG) based on SipHash24. Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: Sip24RNG The Sip24RNG type is a Long PRNG type based on the SipHash24 algorithm\n by J.P. Aumasson and D.J. Bernstein. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Sip24RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => Sip24RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => Sip24RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Sip24RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_sip24rng.html"},{"title":"MClass_Lfsr258RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Lfsr258RNG type and its related routines.\n  The Lfsr258RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the Lfsr258RNG type provides an implementation of the NextLongImpl deferred procedure based on the 64-bit LFSR ( composite\n  linear feedback shift register) algorithm by Pierre L'Ecuyer. The LFSR258 PRNG has five 64-bit states combined by a bitwise xor.\n  Its period length is approximatively 2 258 . It is important to note that the LFSR258 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  Also, it should be noted that the implementation of\n  this PRNG is based on reference #2-3. REFERENCES : [1] L'Ecuyer, P. 1999. Tables of maximally equidistributed combined LFSR\n      generators. Mathematics of Computation, 68(225): 261-269. [2] Lin_Feedback_Shift_Reg: a Fortran 90 module implementation of the LFSR258\n      generator by Alan Miller. [3] Package umontreal.ssj.rng: LFSR258 Class Reference. Uses MClass_LongRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: Lfsr258RNG The Lfsr258RNG type is a Long PRNG type based on 64-bit composite\n linear feedback shift register (LFSR) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Lfsr258RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => Lfsr258RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => Lfsr258RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Lfsr258RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: NextDoubleImpl => Lfsr258RNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: Default_NextIntegerLimits => Lfsr258RNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound.","tags":"","loc":"module\\mclass_lfsr258rng.html"},{"title":"MClass_BaseRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the BaseRNG type and its related routines.\n  The BaseRNG type is an abstract type representing a pseudo random\n  number generator (PRNG).  It defines an application programming\n  interface (API) for uniformly-distributed random number generations.\n  Except for the NextGaussian and NextExponential methods, all other\n  so-called Next methods provided produce a sequence of random numbers\n  that follow a uniform distribution. The BaseRNG type also provides a number of default implementations\n  of random number generations.  For better accuracy and performance,\n  these methods with a default implementation can be overridden.  All\n  other PRNG types should extend from this base type. By design, all pseudo random number generators should be initialized\n  before being used.  This means that the Initialize method must be\n  called before all other methods (with the exception of the GetName and GetSeedSize methods) are used.  Otherwise, the generated output\n  sequence may not be a desirable one. The API and various implementations of this PRNG base type and many\n  of its subtypes are greatly influenced by those in the references\n  provided below. REFERENCES : [1] Apache Commons RNG: Random Numbers Generators [2] Package: Java.Util.Random [3] Random Number Generators\n      by Pierre L'Ecuyer [4] Uniform Random Number Generation\n      by Alan J. Miller Uses MBase_SInt128 ieee_arithmetic MBase_SIntUtil MBase_ErrHandlers MBase_Common MBase_UInt128 Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: GOLDEN_RATIO_32 = INT(Z'9E3779B9', KIND=kInt32) The first 32 bits of the golden ratio (1+sqrt(5))/2, forced to be odd. integer(kind=kInt64), public, parameter :: GOLDEN_RATIO_64 = INT(Z'9E3779B97F4A7C15', KIND=kInt64) The first 64 bits of the golden ratio (1+sqrt(5))/2, forced to be odd. integer(kind=kInt32), public, parameter :: SILVER_RATIO_32 = INT(Z'6A09E667', KIND=kInt32) The first 32 bits of the silver ratio 1+sqrt(2), forced to be odd. integer(kind=kInt64), public, parameter :: SILVER_RATIO_64 = INT(Z'6A09E667F3BCC909', KIND=kInt64) The first 64 bits of the silver ratio 1+sqrt(2), forced to be odd. integer(kind=kInt32), public, parameter :: AlphaOnlyCap = 1 upper-case alphabet integer(kind=kInt32), public, parameter :: AlphaOnlyMix = 2 mixed-case alphabet integer(kind=kInt32), public, parameter :: AlphaNumericCap = 3 upper-case alphabet + decimal number integer(kind=kInt32), public, parameter :: AlphaNumericMix = 4 mixed-case alphabet + decimal number integer(kind=kInt32), public, parameter :: DecimalString = 5 decimal (number) string integer(kind=kInt32), public, parameter :: HexadecimalString = 6 hexadecimal (number) string Interfaces interface public module function Mix_Stafford_13(Input) result(Output) To compute Stafford variant 13 of the 64-bit mixing function of\nthe MurmurHash3 hash function. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Input Return Value integer(kind=kInt64) interface public module function ScrambleWell(Seed, Add) result(Output) To transform the initial state of a generator. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Seed seed element integer(kind=kInt32), intent(in) :: Add offset Return Value integer(kind=kInt64) the transformed seed element public        interface GetRandomSeed64 To get a 64-bit integer value representing a seed value. private module function Get_Random_Seed64() result(Output) To return a random 64-bit integer value that may be useful for\n initializing a source of seed value(s). Arguments None Return Value integer(kind=kInt64) public        interface GetRandomSeed32 To get a 32-bit integer value representing a seed value. private module function Get_Random_Seed32() result(Output) To return a random 32-bit integer value that may be useful for\n initializing a source of seed value(s). Arguments None Return Value integer(kind=kInt32) public        interface Mix_Murmur To compute the mixing function of the MurmurHash3 hash function. private module function Mix_Murmur_32(Input) result(Output) To compute the 32-bit mixing function of the MurmurHash3 hash function. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: Input Return Value integer(kind=kInt32) private module function Mix_Murmur_64(Input) result(Output) To compute the 64-bit mixing function of the MurmurHash3 hash function. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Input Return Value integer(kind=kInt64) public        interface Mix_Lea To compute Doug Lea's mixing function. private module function Mix_Lea_32(Input) result(Output) To compute Doug Lea's 32-bit mixing function. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: Input Return Value integer(kind=kInt32) private module function Mix_Lea_64(Input) result(Output) To compute Doug Lea's 64-bit mixing function. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Input Return Value integer(kind=kInt64) public        interface Fill_State To fill state(s) based on the given seed(s). private module subroutine Fill_State32(Seed, State) To fill 32-bit integer state(s) based on the given seed(s). Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: Seed (0:) integer(kind=kInt32), intent(out) :: State (0:) private module subroutine Fill_State64(Seed, State) To fill 64-bit integer state(s) based on the given seed(s). Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: Seed (0:) integer(kind=kInt64), intent(out) :: State (0:) public        interface Extend_Seed To extend the seed if the length of SeedIn is less than that of SeedOut. private module subroutine Extend_Seed32(SeedIn, SeedOut) To extend the 32-bit integer seeds if the length of SeedIn is less than that of SeedOut. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: SeedIn (0:) integer(kind=kInt32), intent(out) :: SeedOut (0:) private module subroutine Extend_Seed64(SeedIn, SeedOut) To extend the 64-bit integer seeds if the length of SeedIn is less than that of SeedOut. Arguments Type Intent Optional Attributes Name integer(kind=kInt64), intent(in) :: SeedIn (0:) integer(kind=kInt64), intent(out) :: SeedOut (0:) Abstract Interfaces abstract interface public  function NextR64(RNG) result(RandNum) NextR64 is a deferred procedure to return a random 64-bit-real value. Arguments Type Intent Optional Attributes Name class( BaseRNG ), intent(inout) :: RNG random number generator Return Value real(kind=kDouble) random number generated Derived Types type, publicÂ :: BaseRNG The BaseRNG type is an abstract PRNG type that provides an API\n for random number generations.  Some random number generations are\n deferred while others (with default implementation) can be overridden. Type-Bound Procedures procedure(InitRNG), public, deferred :: InitWOSeedImpl InitWOSeedImpl is a binding name of the InitRNG deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure(NextI32), public, deferred :: NextIntegerImpl NextIntegerImpl is a binding name of the NextI32 deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure(NextI64), public, deferred :: NextLongImpl NextLongImpl is a binding name of the NextI64 deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure(NextI128), public, deferred :: NextI128Impl NextI128Impl is a binding name of the NextI128 deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure(NextU128), public, deferred :: NextU128Impl NextU128Impl is a binding name of the NextU128 deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure( NextR64 ), public, deferred :: NextDoubleImpl NextDoubleImpl is a binding name of the NextR64 deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure(NextR128), public, deferred :: NextQuadImpl NextQuadImpl is a binding name of the NextR128 deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure(Reset), public, deferred :: ReInit ReInit is a binding name of the Reset deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure(RNGName), public, deferred :: GetName GetName is a binding name of the RNGName deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure(SeedSize), public, deferred :: GetSeedSize GetSeedSize is a binding name of the SeedSize deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize the PRNG. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: Initialize => InitWOSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential()","tags":"","loc":"module\\mclass_baserng.html"},{"title":"MClass_XoShiRo128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the XoShiRo128RNG type and its related routines.\n  The XoShiRo128RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the XoShiRo128RNG type provides an implementation of the NextIntegerImpl deferred procedure based on algorithms from the Xor-Shift-Rotate\n  family of generators by Sebastiano Vigna. The XoShiRo128RNG type can represent three PRNG classes: - the XoShiRo128StarStar RNG, which is a fast all-purpose 32-bit generator, - the XoShiRo128Plus  RNG, which is a fast 32-bit generator suitable for\n    real number generation, or - the XoShiRo128PlusPlus RNG, which is a fast all-purpose 32-bit generator. By default, the XoShiRo128StarStar RNG is employed.  However, other XoShiRo128\n  PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3)\n  when initializing the generator.  The XoShiRo128RNG type has state size of\n  128 bits. In addition to common operations of a PRNG, the XoShiRo128RNG type provides\n  the Jump and LongJump methods where a large (or very large) number of steps\n  of the output sequence can be advanced in a single operation.  Each method creates\n  (and also returns) a copy of the input PRNG and then advances the state of the\n  specified PRNG.  The PRNG and its copy produce non-overlapping output for the\n  length of the jump intendedly for use in parallel computations. It is important to note that the XoShiRo128 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Xoshiro/Xoroshiro Generators and the PRNG shootout. [2] Apache Commons RNG: Class XoShiRo128StarStar [3] Apache Commons RNG: Class XoShiRo128Plus [4] Apache Commons RNG: Class XoShiRo128PlusPlus Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: XoShiRo128StarStar = 1 flag for XoShiRo128StarStar PRNG integer(kind=kInt32), public, parameter :: XoShiRo128Plus = 2 flag for XoShiRo128Plus PRNG integer(kind=kInt32), public, parameter :: XoShiRo128PlusPlus = 3 flag for XoShiRo128PlusPlus PRNG Derived Types type, public, extends( IntegerRNG )Â :: XoShiRo128RNG The XoShiRo128RNG type is an Integer PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalizations Procedures final :: XoShiRo128RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => XoShiRo128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => XoShiRo128RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => XoShiRo128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => XoShiRo128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoShiRo128Plus algorithm --->    CALL RNG%Initialize(XoShiRo128Plus) ! initialize with seed(s); use XoShiRo128PlusPlus algorithm --->    CALL RNG%Initialize(XoShiRo128PlusPlus, Seeds) procedure, public :: Jump => XoShiRo128RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => XoShiRo128RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_xoshiro128rng.html"},{"title":"MClass_SplitMixRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the SplitMixRNG type and its related routines.\n  The SplitMixRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the SplitMixRNG type provides an implementation of the NextLongImpl deferred procedure based on the SplitMix algorithm for\n  which is an algorithm for a splittable PRNG.  It is a fast RNG, with\n  64 bits of state, that can be used to initialize the state of other PRNGs. It is important to note that the SplitMix PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Guy L. Steele, Jr., Doug Lea, and Christine H. Flood. 2014. Fast splittable\n      pseudorandom number generators. ACM SIGPLAN Notices, Vol. 49, No. 10, pp 453-472. [2] Apache Commons RNG: Class SplitMix64 Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: SplitMixRNG The SplitMixRNG type is a Long PRNG type based on the SplitMix algorithm by Steele, Lea, and Flood. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => SplitMixRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => SplitMixRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => SplitMixRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => SplitMixRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_splitmixrng.html"},{"title":"MClass_XoRoShiRo1024RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the XoRoShiRo1024RNG type and its related routines.\n  The XoRoShiRo1024RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the XoRoShiRo1024RNG type provides an implementation of the NextLongImpl deferred procedure based on algorithms from the Xor-Shift-Rotate\n  family of generators by Sebastiano Vigna. The XoRoShiRo1024RNG type can represent three PRNG classes: - the XoRoShiRo1024StarStar RNG, which is a large-state all-purpose 64-bit generator, - the XoRoShiRo1024Star  RNG, which is a large-state 64-bit generator suitable for\n    real number generation, or - the XoRoShiRo1024PlusPlus RNG, which is a large-state all-purpose 64-bit generator. By default, the XoRoShiRo1024StarStar RNG is employed.  However, other XoRoShiRo1024\n  PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3)\n  when initializing the generator.  The XoRoShiRo1024RNG type has state size of\n  1024 bits and period of 2 1024 -1. In addition to common operations of a PRNG, the XoRoShiRo1024RNG type provides\n  the Jump and LongJump methods where a large (or very large) number of steps\n  of the output sequence can be advanced in a single operation.  Each method creates\n  (and also returns) a copy of the input PRNG and then advances the state of the\n  specified PRNG.  The PRNG and its copy produce non-overlapping output for the\n  length of the jump intendedly for use in parallel computations. It is important to note that the XoRoShiRo1024 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Xoshiro/Xoroshiro Generators and the PRNG shootout. [2] Apache Commons RNG: Class XoRoShiRo1024StarStar [3] Apache Commons RNG: Class XoRoShiRo1024Star [4] Apache Commons RNG: Class XoRoShiRo1024PlusPlus Uses MClass_LongRNG MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: XoRoShiRo1024StarStar = 1 flag for XoRoShiRo1024StarStar PRNG integer(kind=kInt32), public, parameter :: XoRoShiRo1024Star = 2 flag for XoRoShiRo1024Star PRNG integer(kind=kInt32), public, parameter :: XoRoShiRo1024PlusPlus = 3 flag for XoRoShiRo1024PlusPlus PRNG Derived Types type, public, extends( LongRNG )Â :: XoRoShiRo1024RNG The XoRoShiRo1024RNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalizations Procedures final :: XoRoShiRo1024RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => XoRoShiRo1024RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => XoRoShiRo1024RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => XoRoShiRo1024RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => XoRoShiRo1024RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoRoShiRo1024StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoRoShiRo1024StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoRoShiRo1024Star algorithm --->    CALL RNG%Initialize(XoRoShiRo1024Star) ! initialize with seed(s); use XoRoShiRo1024PlusPlus algorithm --->    CALL RNG%Initialize(XoRoShiRo1024PlusPlus, Seeds) procedure, public :: Jump => XoRoShiRo1024RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => XoRoShiRo1024RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_xoroshiro1024rng.html"},{"title":"MClass_SuperKiss32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the SuperKiss32RNG type and its related routines.\n  The SuperKiss32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the SuperKiss32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the 32-bit SuperKISS algorithm\n  by George Marsaglia. The 32-bit SuperKiss algorithm consists of a combination of three sub-generators: - complementary-multiply-with-carry (CMWC) generator - linear congruential generator, and - xorshift generator. The three generators are updated independently, and their states are combined\n  to form a sequence of 32-bit output words. The SuperKiss32RNG type has a memory footprint of 1320608 bits and a period of\n  (5)(2 1320481 )(2 32 -1). It is important to note that the SuperKiss32 PRNG requires an explicit\n  initialization by first calling the BaseInit method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] KISS (algorithm) [2] SuperKISS for 32- and 64-bit RNGs in both C and Fortran [3] Help for a 64-bit RNG Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: SuperKiss32RNG The SuperKiss32RNG type is an Integer PRNG type based on the SuperKISS algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => SuperKiss32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the BaseInit method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => SuperKiss32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => SuperKiss32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => SuperKiss32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_superkiss32rng.html"},{"title":"MClass_L128X128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L128X128RNG type and its related routines.\n  The L128X128RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L128X128RNG type provides an implementation of the NextLongImpl deferred procedure based on the L128X128 algorithm.  The L128X128 algorithm is a specific member of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L128X128RNG type employs a 128-bit LCG, a 128-bit XBG and a mixing function\n  where its memory footprint is 384 bits and its period is roughly 2 256 . In addition to common operations of a PRNG, the L128X128RNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. It is important to note that the L128X128 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random Uses MClass_LongRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: L128X128RNG The L128X128RNG type is a Long PRNG type based on the L128X128 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => L128X128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L128X128RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L128X128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L128X128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Split => L128X128RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently.","tags":"","loc":"module\\mclass_l128x128rng.html"},{"title":"MClass_PcgLcg32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the PcgLcg32RNG type and its related routines.\n  The PcgLcg32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the PcgLcg32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on algorithms from the Permuted\n  Congruential Generator (PCG) family that use an internal 64-bit Linear\n  Congruential Generator (LCG) and output 32-bits per cycle. The PcgLcg32RNG type can represent two PRNG classes: - a PCG that is composed of a 64-bit LCG combined with the XSH-RR (xorshift;\n    random rotate) output transformation, or - a PCG that is composed of a 64-bit LCG combined with the XSH-RS (xorshift;\n    random shift) output transformation. By default, the random rotate (RR) transformation is employed.  However, the\n  random shift (RS) transformation can be utilized by specifying an algorithm\n  flag to true when initializing the generator.  The PcgLcg32RNG type has\n  state size of 128 bits and a period of 2 64 . It is important to note that the PcgLcg32 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] PCG, A Family of Better Random Number Generators. [2] Apache Commons RNG: Class PcgXshRr32 [3] Apache Commons RNG: Class PcgXshRs32 Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: PcgLcg32RNG The PcgLcg32RNG type is an Integer PRNG type based on algorithms from\n the Permuted Congruential Generator (PCG) family that use an internal 64-bit\n Linear Congruential Generator (LCG) and output 32-bits per cycle. Finalizations Procedures final :: PcgLcg32RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => PcgLcg32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => PcgLcg32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => PcgLcg32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => PcgLcg32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use random rotate (default) transformation --->    CALL RNG%Initialize() ! initialize with seed(s); use random rotate (default) transformation --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use random shift transformation --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use random shift transformation --->    CALL RNG%Initialize(.TRUE., Seeds)","tags":"","loc":"module\\mclass_pcglcg32rng.html"},{"title":"MClass_XoShiRo512RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the XoShiRo512RNG type and its related routines.\n  The XoShiRo512RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the XoShiRo512RNG type provides an implementation of the NextLongImpl deferred procedure based on algorithms from the Xor-Shift-Rotate\n  family of generators by Sebastiano Vigna. The XoShiRo512RNG type can represent three PRNG classes: - the XoShiRo512StarStar RNG, which is a fast all-purpose 64-bit generator, - the XoShiRo512Plus  RNG, which is a fast 64-bit generator suitable for\n    real number generation, or - the XoShiRo512PlusPlus RNG, which is a fast all-purpose 64-bit generator. By default, the XoShiRo512StarStar RNG is employed.  However, other XoShiRo512\n  PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3)\n  when initializing the generator.  The XoShiRo512RNG type has state size of\n  512 bits and period of 2 512 -1. In addition to common operations of a PRNG, the XoShiRo512RNG type provides\n  the Jump and LongJump methods where a large (or very large) number of steps\n  of the output sequence can be advanced in a single operation.  Each method creates\n  (and also returns) a copy of the input PRNG and then advances the state of the\n  specified PRNG.  The PRNG and its copy produce non-overlapping output for the\n  length of the jump intendedly for use in parallel computations. It is important to note that the XoShiRo512 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Xoshiro/Xoroshiro Generators and the PRNG shootout. [2] Apache Commons RNG: Class XoShiRo512StarStar [3] Apache Commons RNG: Class XoShiRo512Plus [4] Apache Commons RNG: Class XoShiRo512PlusPlus Uses MClass_LongRNG MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: XoShiRo512StarStar = 1 flag for XoShiRo512StarStar PRNG integer(kind=kInt32), public, parameter :: XoShiRo512Plus = 2 flag for XoShiRo512Plus PRNG integer(kind=kInt32), public, parameter :: XoShiRo512PlusPlus = 3 flag for XoShiRo512PlusPlus PRNG Derived Types type, public, extends( LongRNG )Â :: XoShiRo512RNG The XoShiRo512RNGRNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalizations Procedures final :: XoShiRo512RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => XoShiRo512RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => XoShiRo512RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => XoShiRo512RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => XoShiRo512RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoShiRo512StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoShiRo512StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoShiRo512Plus algorithm --->    CALL RNG%Initialize(XoShiRo512Plus) ! initialize with seed(s); use XoShiRo512PlusPlus algorithm --->    CALL RNG%Initialize(XoShiRo512PlusPlus, Seeds) procedure, public :: Jump => XoShiRo512RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => XoShiRo512RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_xoshiro512rng.html"},{"title":"MClass_Well32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Well32RNG type and its related routines.\n  The Well32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Well32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the Well Equidistributed\n  Long-period Linear (WELL) algorithms by Francois Panneton, Pierre L'Ecuyer,\n  and Makoto Matsumoto. The Well32RNG type can represent six PRNG classes: - a WELL512a PRNG, - a WELL1024a PRNG, - a WELL19937a PRNG, - a WELL19937c PRNG, - a WELL49937a PRNG, or - a WELL49937b PRNG where the numbers in the PRNG names give their state size in bits and the\n  letter suffixes denote variants of the same size. By default, The WELL49937b PRNG is employed.  However, other Well32 PRNG\n  variants can be utilized by specifying an algorithm flag (between 1 to 6)\n  when initializing the generator. It is important to note that the Well32 PRNGs require an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  However, as exceptions, one of the GetSeedSize methods can be called  before the Initialize method to inquire the\n  size of seeds required by a specific PRNG. REFERENCES : [1] F. Panneton, P. L'Ecuyer, and M. Matsumoto.  2006.  Improved Long-Period\n      Generators Based on Linear Recurrences Modulo 2.  ACM Transactions on\n      Mathematical Software, 32(1): 1-16. [2] Well equidistributed long-period linear PRNG [3] Apache Commons RNG: Class AbstractWell [4] Apache Commons RNG: Class Well512a [5] Apache Commons RNG: Class Well1024a [6] Apache Commons RNG: Class Well19937a [7] Apache Commons RNG: Class Well19937c [8] Apache Commons RNG: Class Well44497a [9] Apache Commons RNG: Class Well44497b Uses MBase_MemHandlers MClass_IntegerRNG MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: WELL512a = 1 flag for Well512a PRNG integer(kind=kInt32), public, parameter :: WELL1024a = 2 flag for Well1024a PRNG integer(kind=kInt32), public, parameter :: WELL19937a = 3 flag for Well19937a PRNG integer(kind=kInt32), public, parameter :: WELL19937c = 4 flag for Well19937c PRNG integer(kind=kInt32), public, parameter :: WELL49937a = 5 flag for Well49937a PRNG integer(kind=kInt32), public, parameter :: WELL49937b = 6 flag for Well49937b PRNG Derived Types type, public, extends( IntegerRNG )Â :: Well32RNG The Well32RNG type is an Integer PRNG type based on the Well\n Equidistributed Long-period Linear (WELL) generators by Francois\n Panneton, Pierre L'Ecuyer, and Makoto Matsumoto. Finalizations Procedures final :: Well32RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => WELL32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Well32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Well32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Well32RNG_GetSeedSize_I GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator for the default algorithm (WELL49937b). Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: GetSeedSize2 => Well32RNG_GetSeedSize_II Type-Bound Function : GetSeedSize2 Purpose :  To get size of specified seed(s) needed to initialize\n               the generator for a specified algorithm. Usage : --->    SeedSize = PRNG%GetSeedSize2(WELL1024a) generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use WELL49937b (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use WELL49937b (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use WELL512a algorithm --->    CALL RNG%Initialize(WELL512a) ! initialize with seed(s); use WELL19937c algorithm --->    CALL RNG%Initialize(WELL19937c, Seeds) Functions public  function CalculateBlockCount (K) result(Count) Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: K Return Value integer(kind=kInt32)","tags":"","loc":"module\\mclass_well32rng.html"},{"title":"MClass_L128XMRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L128XMRNG type and its related routines.\n  The L128XMRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L128XMRNG type provides an implementation of the NextLongImpl deferred procedure based on the L128XM algorithms.\n  The L128XM algorithms are specific members of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L128XMRNG type can represent three PRNG classes: - the L128X128Mix RNG, - the L128X256Mix RNG, or - the L128X1024Mix RNG. The L128X128 RNG employs a 128-bit LCG, a 128-bit XBG and a mixing function\n  where its memory footprint is 384 bits and its period is roughly 2 256 . The L128X256 RNG employ a 128-bit LCG, a 256-bit XBG and a mixing function\n  where its memory footprint is 512 bits and its period is roughly 2 384 . The L128X1024 RNGs employ a 128-bit LCG, a 1024-bit XBG and a mixing function\n  where its memory footprint is 1312 bits and its period is roughly 2 1152 . By default, The L128X128Mix PRNG is employed.  However, other L128XM PRNG\n  variants can be utilized by specifying an algorithm flag (between 1 to 3)\n  when initializing the generator. In addition to common operations of a PRNG, the L128XMRNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. The L128XMRNG type also provides the Jump and LongJump methods where\n  a large (or very large) number of steps of the output sequence can be advanced\n  in a single operation.  Each method creates (and also returns) a copy of the\n  input PRNG and then advances the state of the specified PRNG.  The PRNG and its\n  copy produce non-overlapping output for the length of the jump intendedly for\n  use in parallel computations. It is important to note that the L128XM PRNG requires an explicit initialization\n  by first calling the Initialize method before using any other methods.  Otherwise,\n  the generator may produce undesirable random sequences.  Also, it should be noted\n  that the implementation of this PRNG type is based on references #3-5 whereas the L128X128RNG , L128X256RNG , and L128X1024RNG types, which are based on the same\n  algorithms, are based their implementation on reference #2. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random [3] Apache Commons RNG: Class L128X128Mix [4] Apache Commons RNG: Class L128X256Mix [5] Apache Commons RNG: L128X1024Mix Uses MClass_LongRNG MBase_UIntUtil MBase_Common MClass_BaseRNG MBase_MemHandlers Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: L128X128Mix = 1 flag for L128X128Mix PRNG integer(kind=kInt32), public, parameter :: L128X256Mix = 2 flag for L128X256Mix PRNG integer(kind=kInt32), public, parameter :: L128X1024Mix = 3 flag for L128X1024Mix PRNG Derived Types type, public, extends( LongRNG )Â :: L128XMRNG The L128XMRNG type is a Long PRNG type based on the L128XM algorithms, which are specific members of the LXM family of\n algorithms for pseudo-random number generators. Finalizations Procedures final :: L128XMRNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => L128XMRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L128XMRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L128XMRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L128XMRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use L128X128Mix (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use L128X128Mix (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use L128X256Mix algorithm --->    CALL RNG%Initialize(L128X256Mix) ! initialize with seed(s); use L128X1024Mix algorithm --->    CALL RNG%Initialize(L128X1024Mix, Seeds) procedure, public :: Split => L128XMRNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. procedure, public :: Jump => L128XMRNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => L128XMRNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_l128xmrng.html"},{"title":"MClass_Taus88RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Taus88RNG type and its related routines.\n  The Taus88RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Taus88RNG type provides an implementation of the NextIntegerImpl deferred procedure based on Tausworthe random number\n  generators by Pierre L'Ecuyer. The TAUS88 PRNG has three 32-bit states combined by a bitwise xor.\n  Its period length is approximatively 2 88 . It is important to note that the TAUS88 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  Also, it should be noted that the implementation of\n  this PRNG is based on reference #2. REFERENCES : [1] L'Ecuyer, P. 1996. Maximally equidistributed combined Tausworthe\n      generators. Mathematics of Computation, 65(213): 203-213. [2] Ecuyer_random: a Fortran 90 module implementation of the TAUS88\n      generator by Alan Miller. Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Taus88RNG The Taus88RNG type is an Integer PRNG type based on a Tausworthe\n random number generator by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Taus88RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Taus88RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Taus88RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Taus88RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_taus88rng.html"},{"title":"MClass_Lfsr113RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Lfsr113RNG type and its related routines.\n  The Lfsr113RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Lfsr113RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the 32-bit LFSR113 (composite linear feedback shift register) algorithm by Pierre L'Ecuyer. The LFSR113 PRNG has four 32-bit states combined by a bitwise xor.\n  Its period length is approximatively 2 113 . It is important to note that the LFSR113 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  Also, it should be noted that the implementation of\n  this PRNG is based on references #2-3. REFERENCES : [1] L'Ecuyer, P. 1999. Tables of maximally equidistributed combined LFSR\n      generators. Mathematics of Computation, 68(225): 261-269. [2] Lin_Feedback_Shift_Reg: a Fortran 90 module implementation of the LFSR113\n      generator by Alan Miller. [3] Package umontreal.ssj.rng: LFSR113 Class Reference. Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Lfsr113RNG The Lfsr113RNG type is an Integer PRNG type based on 32-bit composite\n linear feedback shift register (LFSR) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Lfsr113RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Lfsr113RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Lfsr113RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Lfsr113RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: NextDoubleImpl => Lfsr113RNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: Default_NextIntegerLimits => Lfsr113RNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound.","tags":"","loc":"module\\mclass_lfsr113rng.html"},{"title":"MClass_L64X256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L64X256RNG type and its related routines.\n  The L64X256RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L64X256RNG type provides an implementation of the NextLongImpl deferred procedure based on the L64X256 algorithm.  The L64X256 algorithm is a specific member of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L64X256RNG type employs a 64-bit LCG, a 256-bit XBG and a mixing function\n  where its memory footprint is 384 bits and its period is roughly 2 320 . In addition to common operations of a PRNG, the L64X256RNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. It is important to note that the L64X256 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: L64X256RNG The L64X256RNG type is a Long PRNG type based on the L64X256 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => L64X256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L64X256RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L64X256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L64X256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Split => L64X256RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently.","tags":"","loc":"module\\mclass_l64x256rng.html"},{"title":"MClass_Mrg63k3aRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Mrg63k3aRNG type and its related routines.\n  The Mrg63k3aRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by n Long PRNG type. In particular, the Mrg63k3aRNG type provides an implementation of the NextLongImpl deferred procedure based on the 63-bit MRG (combined\n  multiple recursive generator) algorithm by Pierre L'Ecuyer. The Mrg63k3a PRNG has six 63-bit states stored in 64-bit integers.\n  Its period length is approximatively 2 377 . It is important to note that the Mrg63k3a PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  Also, it should be noted that the implementation of\n  this PRNG is based on references #2. REFERENCES : [1] L'Ecuyer, P. 1999. Good Parameters and Implementations for Combined Multiple\n      Recursive Random Number Generators. Operations Research 47(1):159-164. [2] 63-bits Random number generator U(0,1): MRG63k3a - a C source code. Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: Mrg63k3aRNG The Mrg63k3aRNG type is a Long PRNG type based on 63-bit\n combined multiple recursive generator (MRG) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Mrg63k3aRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => Mrg63k3aRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => Mrg63k3aRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Mrg63k3aRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: NextDoubleImpl => Mrg63k3aRNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: Default_NextIntegerLimits => Mrg63k3aRNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound.","tags":"","loc":"module\\mclass_mrg63k3arng.html"},{"title":"MClass_SuperKiss64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the SuperKiss64RNG type and its related routines.\n  The SuperKiss64RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the SuperKiss64RNG type provides an implementation of the NextLongImpl deferred procedure based on the 64-bit SuperKISS algorithm\n  by George Marsaglia. The 64-bit SuperKiss algorithm consists of a combination of three sub-generators: - complementary-multiply-with-carry (CMWC) generator - linear congruential generator, and - xorshift generator. The three generators are updated independently, and their states are combined\n  to form a sequence of 64-bit output words. The SuperKiss64RNG type has a memory footprint of 1320672 bits and a period of\n  (5)(2 1320480 )(2 64 -1). It is important to note that the SuperKiss64 PRNG requires an explicit\n  initialization by first calling the BaseInit method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] KISS (algorithm) [2] SuperKISS for 32- and 64-bit RNGs in both C and Fortran [3] Help for a 64-bit RNG Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: SuperKiss64RNG The SuperKiss64RNG type is a Long PRNG type based on the SuperKISS algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => SuperKiss64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the BaseInit method to initialize the PRNG instead. procedure, public :: NextLongImpl => SuperKiss64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => SuperKiss64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => SuperKiss64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_superkiss64rng.html"},{"title":"MClass_PcgRxsMXs64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the PcgRxsMXs64RNG type and its related routines.\n  The PcgRxsMXs64RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the PcgRxsMXs64RNG type provides an implementation of the NextIntegerImpl deferred procedure based on an algorithm from the Permuted\n  Congruential Generator (PCG) family that that use an internal 64-bit Linear\n  Congruential Generator (LCG) combined with the RXS-M-XS (random xorshift;\n  multiply; xorshift) output transformation to create 64-bit output. The PcgRxsMXs64RNG type has state size of 128 bits and a period of\n  2 64 . It is important to note that the PcgRxsMXs64 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] PCG, A Family of Better Random Number Generators. [2] Apache Commons RNG: Class PcgRxsMXs64 Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: PcgRxsMXs64RNG The PcgLcg32RNG type is a Long PRNG type based on an algorithm from\n the Permuted Congruential Generator (PCG) family that use an internal 64-bit\n Linear Congruential Generator (LCG) and output 64-bits per cycle. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => PcgRxsMXs64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => PcgRxsMXs64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => PcgRxsMXs64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => PcgRxsMXs64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_pcgrxsmxs64rng.html"},{"title":"MClass_RanLuxPpRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the RanLuxPpRNG type and its related routines.\n  The RanLuxPpRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the RanLuxPpRNG type provides an implementation of the NextLongImpl deferred procedure based on the RANLUX++ algorithm by\n  Alexei Sibidanov. The RANLUX++ algorithm is equivalent to the RANLUX algorithm but\n  employs an equivalent Linear Congruential generator (LCG) in place of\n  the Subtract-With-Borrow (SWB) generator.  Unlike the RANLUX algorithm,\n  the RANLUX++ algorithm destroys correlations of generated numbers by fast\n  skipping of numbers instead of throwing away some of generated number.\n  Therefore, it is faster and can perform the decimation at a higher level\n  than the highest standard level of the RANLUX algorithm. It is important to note that the RanLux++ PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] A. Sibidanov.  2017.  A revision of the subtract-with-borrow random\n      number generators.  arXiv:1705.03123 [physics.comp-ph]. [2] F. James and L. Moneta.  2019.  Review of High-Quality Random Number\n      Generators.  arXiv:1903.01247 [physics.comp-ph]. [3] RANLUX++: The original implementation of Ranlux++ RNG. [4] RANLUX++: The portable version of Ranlux++ RNG. Uses MClass_LongRNG MBase_UIntUtil iso_c_binding MBase_SIntUtil MBase_Common MClass_BaseRNG MClass_IntegerRNG Derived Types type, public, extends( LongRNG )Â :: RanLuxPpRNG The RanLuxPpRNG type is a Long PRNG type based on the RANLUX++ algorithm\n by A. Sibidanov. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => RanLuxPpRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => RanLuxPpRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => RanLuxPpRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => RanLuxPpRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithSkipping Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use default skipping parameter (= 2048) --->    CALL RNG%Initialize() ! initialize with seed(s); default skipping parameter (= 2048) --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use specified skipping parameter (= 389) --->    CALL RNG%Initialize(389) ! initialize with seed(s); use specified luxury level (= 1024) --->    CALL RNG%Initialize(1024, Seeds) Usage : If specified, the skipping parameter should be between 24 and 4096. procedure, public :: Default_NextDouble => RanLuxPpRNG_NextDouble Default_NextDouble is an overridden procedure. Use the NextDouble method in place of the Default_NextDouble method to generate a 64-bit real number.","tags":"","loc":"module\\mclass_ranluxpprng.html"},{"title":"MClass_L32X64MRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L32X64MRNG type and its related routines.\n  The L32X64MRNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the L32X64MRNG type provides an implementation of the NextIntegerImpl deferred procedure based on the L32X64 algorithm.\n  The L32X64 algorithm is a specific member of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L32X64MRNG type employs a 32-bit LCG, a 64-bit XBG and a mixing function\n  where its memory footprint is 128 bits and its period is roughly 2 96 . In addition to common operations of a PRNG, the L32X64MRNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. The L32X64MRNG type also provides the Jump and LongJump methods where\n  a large (or very large) number of steps of the output sequence can be advanced\n  in a single operation.  Each method creates (and also returns) a copy of the\n  input PRNG and then advances the state of the specified PRNG.  The PRNG and its\n  copy produce non-overlapping output for the length of the jump intendedly for\n  use in parallel computations. It is important to note that the L32X64 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  Also, it should be noted that the implementation of\n  this PRNG type is based on reference #3 where the L32X64RNG type,\n  which is based on the same algorithm, is based its implementation on\n  reference #2. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random [3] Apache Commons RNG: Class L32X64Mix Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: L32X64MRNG The L32X64MRNG type is an Integer PRNG type based on the L32X64 algorithm, which is a specific member of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => L32X64MRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => L32X64MRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L32X64MRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L32X64MRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Split => L32X64MRNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. procedure, public :: Jump => L32X64MRNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => L32X64MRNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_l32x64mrng.html"},{"title":"MClass_L32X64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L32X64RNG type and its related routines.\n  The L32X64RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the L32X64RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the L32X64 algorithm.\n  The L32X64 algorithm is a specific member of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L32X64RNG type employs a 32-bit LCG, a 64-bit XBG and a mixing function\n  where its memory footprint is 128 bits and its period is roughly 2 96 . In addition to common operations of a PRNG, the L32X64RNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. It is important to note that the L32X64 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  Also, it should be noted that the implementation of\n  this PRNG is based on reference #2 where the LXM3264RNG type, which is\n  based on the same algorithm, is based its implementation on reference #3. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random [3] Apache Commons RNG: Class L32X64Mix Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: L32X64RNG The L32X64RNG type is an Integer PRNG type based on the L32X64 algorithm, which is a specific member of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => L32X64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => L32X64RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L32X64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L32X64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Split => L32X64RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently.","tags":"","loc":"module\\mclass_l32x64rng.html"},{"title":"MClass_L128X1024RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L128X1024RNG type and its related routines.\n  The L128X1024RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L128X1024RNG type provides an implementation of the NextLongImpl deferred procedure based on the L128X1024 algorithm.  The L128X1024 algorithm is a specific member of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L128X1024RNG type employs a 128-bit LCG, a 1024-bit XBG and a mixing function\n  where its memory footprint is 1312 bits and its period is roughly 2 1152 . In addition to common operations of a PRNG, the L128X1024RNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. It is important to note that the L128X1024 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random Uses MClass_LongRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: L128X1024RNG The L128X1024RNG type is a Long PRNG type based on the L128X1024 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => L128X1024RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L128X1024RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L128X1024RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L128X1024RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Split => L128X1024RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently.","tags":"","loc":"module\\mclass_l128x1024rng.html"},{"title":"MClass_Sfc64RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Sfc64RNG type and its related routines.\n  The Sfc64RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the Sfc64RNG type provides an implementation of the NextLongImpl deferred procedure based on the Small, Fast, Counting\n  (SFC) 64-bit generator by Chris Doty-Humphrey.  It has a state size of\n  256-bits. The period is a minimum of 2 64 and an average of\n  approximately 2 255 . It is important to note that the Sfc64 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] PractRand Test Suite [2] Apache Commons RNG: Class DotyHumphreySmallFastCounting64 Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: Sfc64RNG The Sfc64RNG type is a Long PRNG type based on the Small,\n Fast, Counting (SFC) 64-bit generator by Chris Doty-Humphrey. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Sfc64RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => Sfc64RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => Sfc64RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Sfc64RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_sfc64rng.html"},{"title":"MClass_Mrg32k3aRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Mrg32k3aRNG type and its related routines.\n  The Mrg32k3aRNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Mrg32k3aRNG type provides an implementation of the NextIntegerImpl deferred procedure based on the 32-bit MRG (combined\n  multiple recursive generator) algorithm by Pierre L'Ecuyer. The Mrg32k3a PRNG has six 32-bit states stored in 64-bit integers.\n  Its period length is approximatively 2 191 . It is important to note that the Mrg32k3a PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences.  Also, it should be noted that the implementation of\n  this PRNG is based on references #2-3. REFERENCES : [1] L'Ecuyer, P. 1999. Good Parameters and Implementations for Combined Multiple\n      Recursive Random Number Generators. Operations Research 47(1):159-164. [2] Package umontreal.ssj.rng: MRG32k3aL Class Reference. [3] 32-bits Random number generator U(0,1): MRG32k3a - a C source code. Uses MClass_IntegerRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Mrg32k3aRNG The Mrg32k3aRNG type is an Integer PRNG type based on 32-bit\n combined multiple recursive generator (MRG) algorithm by Pierre L'Ecuyer. Type-Bound Procedures procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Mrg32k3aRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Mrg32k3aRNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Mrg32k3aRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Mrg32k3aRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: NextDoubleImpl => Mrg32k3aRNG_NextDouble NextDoubleImpl is an overridden procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: Default_NextIntegerLimits => Mrg32k3aRNG_NextIntegerLimits Default_NextIntegerLimits is an overridden procedure. Use the NextInteger method in place of the Default_NextIntegerLimits method to generate a 32-bit integer number between the given bound.","tags":"","loc":"module\\mclass_mrg32k3arng.html"},{"title":"MClass_L128X256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L128X256RNG type and its related routines.\n  The L128X256RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L128X256RNG type provides an implementation of the NextLongImpl deferred procedure based on the L128X256 algorithm.  The L128X256 algorithm is a specific member of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L128X256RNG type employs a 128-bit LCG, a 256-bit XBG and a mixing function\n  where its memory footprint is 512 bits and its period is roughly 2 384 . In addition to common operations of a PRNG, the L128X256RNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. It is important to note that the L128X256 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random Uses MClass_LongRNG MBase_UIntUtil MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: L128X256RNG The L128X256RNG type is a Long PRNG type based on the L128X256 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => L128X256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L128X256RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L128X256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L128X256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Split => L128X256RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently.","tags":"","loc":"module\\mclass_l128x256rng.html"},{"title":"MClass_L64X128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L64X128RNG type and its related routines.\n  The L64X128RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L64X128RNG type provides an implementation of the NextLongImpl deferred procedure based on the L64X128 algorithms.\n  The L64X128 algorithms are specific members of the LXM family of\n  algorithms for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L64X128RNG type can represent two PRNG classes: - the L64X128Mix RNG, or - the L64X128StarStar RNG. Both PRNG classes employ a 64-bit LCG, a 128-bit XBG and a mixing function\n  where its memory footprint is 256 bits and its period is roughly 2 192 . By default, the L64X128Mix RNG is employed.  However, the L64X128StarStar PRNG can be utilized by specifying an algorithm flag to true when initializing\n  the generator. In addition to common operations of a PRNG, the L64X128RNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. It is important to note that the L64X128 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random Uses MClass_LongRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( LongRNG )Â :: L64X128RNG The L64X128RNG type is a Long PRNG type based on the L64X128 algorithms, which are specific members of the LXM family of algorithms\n for pseudo-random number generators. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => L64X128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L64X128RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L64X128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L64X128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use L64X128 (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use L64X128 (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use L64X128StarStar algorithm --->    CALL RNG%Initialize(.TRUE.) ! initialize with seed(s); use L64X128StarStar algorithm --->    CALL RNG%Initialize(.TRUE., Seeds) procedure, public :: Split => L64X128RNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently.","tags":"","loc":"module\\mclass_l64x128rng.html"},{"title":"MClass_XoRoShiRo128RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the XoRoShiRo128RNG type and its related routines.\n  The XoRoShiRo128RNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the XoRoShiRo128RNG type provides an implementation of the NextLongImpl deferred procedure based on algorithms from the Xor-Shift-Rotate\n  family of generators by Sebastiano Vigna. The XoRoShiRo128RNG type can represent three PRNG classes: - the XoRoShiRo128StarStar RNG, which is a fast all-purpose 64-bit generator, - the XoRoShiRo128Plus  RNG, which is a fast 64-bit generator suitable for\n    real number generation, or - the XoRoShiRo128PlusPlus RNG, which is a fast all-purpose 64-bit generator. By default, the XoRoShiRo128StarStar RNG is employed.  However, other XoRoShiRo128\n  PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3)\n  when initializing the generator.  The XoRoShiRo128RNG type has state size of\n  128 bits and period of 2 128 -1. In addition to common operations of a PRNG, the XoRoShiRo128RNG type provides\n  the Jump and LongJump methods where a large (or very large) number of steps\n  of the output sequence can be advanced in a single operation.  Each method creates\n  (and also returns) a copy of the input PRNG and then advances the state of the\n  specified PRNG.  The PRNG and its copy produce non-overlapping output for the\n  length of the jump intendedly for use in parallel computations. It is important to note that the XoRoShiRo128 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Xoshiro/Xoroshiro Generators and the PRNG shootout. [2] Apache Commons RNG: Class XoRoShiRo128StarStar [3] Apache Commons RNG: Class XoRoShiRo128Plus [4] Apache Commons RNG: Class XoRoShiRo128PlusPlus Uses MClass_LongRNG MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: XoRoShiRo128StarStar = 1 flag for XoRoShiRo128StarStar PRNG integer(kind=kInt32), public, parameter :: XoRoShiRo128Plus = 2 flag for XoRoShiRo128Plus PRNG integer(kind=kInt32), public, parameter :: XoRoShiRo128PlusPlus = 3 flag for XoRoShiRo128PlusPlus PRNG Derived Types type, public, extends( LongRNG )Â :: XoRoShiRo128RNG The XoRoShiRo128RNG type is a Long PRNG type based on algorithms from\n the Xor-Shift-Rotate family of generators by Sebastiano Vigna. Finalizations Procedures final :: XoRoShiRo128RNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => XoRoShiRo128RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => XoRoShiRo128RNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => XoRoShiRo128RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => XoRoShiRo128RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use XoRoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use XoRoShiRo128StarStar (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use XoRoShiRo128Plus algorithm --->    CALL RNG%Initialize(XoRoShiRo128Plus) ! initialize with seed(s); use XoRoShiRo128PlusPlus algorithm --->    CALL RNG%Initialize(XoRoShiRo128PlusPlus, Seeds) procedure, public :: Jump => XoRoShiRo128RNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => XoRoShiRo128RNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_xoroshiro128rng.html"},{"title":"MClass_Jsf32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Jsf32RNG type and its related routines.\n  The Jsf32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Jsf32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on Bob Jenkins's small fast\n  non-cryptographic (32-bit variant) PRNG.  It has a state size of 128-bits.\n  The shortest period is expected to be about 2 94 and it is expected\n  that about one seed will run into another seed within 2 64 values. It is important to note that the Jsf32 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] A small non-cryptographic PRNG [2] Apache Commons RNG: Class JenkinsSmallFast32 Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Jsf32RNG The Jsf32RNG type is an Integer PRNG type based on the small\n fast non-cryptographic PRNG by Bob Jenkins. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Jsf32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Jsf32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Jsf32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Jsf32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_jsf32rng.html"},{"title":"MClass_Mwc256RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Mwc256RNG type and its related routines.\n  The Mwc256RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Mwc256RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the Multiply-With-Carry (MWC) algorithm by George Marsaglia.  Its memory footprint is 8224 bits\n  and its period is roughly 2 8222 .\n  It is important to note that the MWC PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Multiply-with-carry pseudorandom number generator [2] What stops the Multiply-With-Carry RNG from being a Cryptographically Secure PRNG? [3] Apache Commons RNG: Class MultiplyWithCarry256 Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Mwc256RNG The Mwc256RNG type is an Integer PRNG type based on the MWC (Multiply-With-Carry) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Mwc256RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Mwc256RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Mwc256RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Mwc256RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_mwc256rng.html"},{"title":"MClass_ChaChaRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the ChaChaRNG type and its related routines.\n  The ChaChaRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the ChaChaRNG type provides an implementation of the NextLongImpl deferred procedure based on the ChaCha algorithm.\n  The ChaCha algorithm is a member of the ChaCha family of stream ciphers\n  (a variant of the Salsa20 family of stream ciphers) designed by D.J.\n  Bernstein.  As a result, the ChaCha PRNG is a cryptographic-level PRNG\n  as the stream cypher on which it is based. It is important to note that the ChaCha PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] The ChaCha family of stream ciphers [2] Pseudo Random Number Generator (PRNG) based on ChaCha stream cipher. Uses MClass_LongRNG MBase_UIntUtil MBase_Common MClass_BaseRNG MClass_IntegerRNG Derived Types type, public, extends( LongRNG )Â :: ChaChaRNG The ChaChaRNG type is a Long PRNG type based on the ChaCha algorithm\n by D.J. Bernstein. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => ChaChaRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => ChaChaRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: GetName => ChaChaRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => ChaChaRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_chacharng.html"},{"title":"MClass_Mt32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Mt32RNG type and its related routines.\n  The Mt32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Mt32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the 32-bit Mersenne Twister\n  algorithm by Makoto Matsumoto and Takuji Nishimura.  The Mt32 PRNG\n  features an extremely long period (2 19937 - 1) and\n  623-dimensional equidistribution up to 32 bits accuracy. It is important to note that the Mt32 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] M. Matsumoto and T. Nishimura.  1998.  Mersenne Twister: A 623-Dimensionally\n      Equidistributed Uniform Pseudo-Random Number Generator.  ACM Transactions on\n      Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30. [2] Mersenne Twister with improved initialization. [3] Apache Commons RNG: Class MersenneTwister Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Mt32RNG The Mt32RNG type is an Integer PRNG type based on the Mersenne\n Twister algorithm by Makoto Matsumoto and Takuji Nishimura. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Mt32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Mt32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Mt32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Mt32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_mt32rng.html"},{"title":"MBase_PrgnBuilder â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module provides access to random number generator classes and two groups of\n  general routines that perform the following tasks: - Construct a random-number generator class based on the specified algorithm. - Return a number of seeds required to construct the specified generator. Uses MClass_L32X64RNG MClass_L128X256RNG MClass_IsaccRNG MClass_XoRoShiRo128RNG MClass_Mrg32k3aRNG MClass_L64X1024RNG MClass_XoShiRo128RNG MClass_L64XMRNG MClass_Cmwc4096RNG MClass_KomiRNG MClass_Jsf64RNG MClass_XoRoShiRo1024RNG MClass_XoShiRo256RNG MClass_L128XMRNG MBase_Common MClass_SplitMixRNG MClass_BaseRNG MClass_PcgRxsMXs64RNG MClass_L32X64MRNG MClass_L64X256RNG MClass_Sip24RNG MClass_Sfc64RNG MClass_SuperKiss64RNG MClass_PcgLcg32RNG MClass_L128X1024RNG MClass_LongRNG MClass_WyRNG MClass_Kiss32RNG MClass_Mt32RNG MClass_SuperKiss32RNG MClass_L128X128RNG MClass_Mwc256RNG MClass_Lfsr113RNG MClass_IntegerRNG MClass_XoShiRo512RNG MClass_Mrg63k3aRNG MClass_Jsf32RNG MClass_Lfsr258RNG MClass_Taus88RNG MClass_Well32RNG MClass_ChaChaRNG MClass_PcgMcg32RNG MClass_Mt64RNG MClass_Kiss64RNG MClass_XoRoShiRo64RNG MClass_RanLuxPpRNG MClass_Sfc32RNG MClass_RanLuxRNG MClass_L64X128RNG MClass_MswsRNG Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: I32_CMWC = 1 CMWC (Complimentary-Multiply-With-Carry) integer(kind=kInt32), public, parameter :: I32_ISACC = 2 ISAAC (Indirection, Shift, Accumulate, Add, and Count) integer(kind=kInt32), public, parameter :: I32_JSF = 3 Jenkins's small fast non-cryptographic (32-bit variant) integer(kind=kInt32), public, parameter :: I32_KISS = 4 Marsaglia's 32-bit KISS (Keep it Simple Stupid) integer(kind=kInt32), public, parameter :: I32_L32_X64_M1 = 5 L32-X64-Mix based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I32_L32_X64_M2 = 6 L32-X64-Mix based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I32_LFSR113 = 7 L'Ecuyer's 1999 32-bit Composite LFSR integer(kind=kInt32), public, parameter :: I32_MRG32K3A = 8 L'Ecuyer's 32-bit combined Multiple Recursive Generator (cMRG) integer(kind=kInt32), public, parameter :: I32_MT = 9 32-bit Mersenne Twister (MT) integer(kind=kInt32), public, parameter :: I32_MWC = 10 Marsaglia's Multiply-With-Carry (MWC) integer(kind=kInt32), public, parameter :: I32_PCG_LCG_XRS = 11 32-bit PCG's LCG-XorShift-RandomShift integer(kind=kInt32), public, parameter :: I32_PCG_LCG_XRR = 12 32-bit PCG's LCG-XorShift-RandomRotate integer(kind=kInt32), public, parameter :: I32_PCG_MCG_XRS = 13 32-bit PCG's MCG-XorShift-RandomShift integer(kind=kInt32), public, parameter :: I32_PCG_MCG_XRR = 14 32-bit PCG's MCG-XorShift-RandomRotate integer(kind=kInt32), public, parameter :: I32_RANLUX = 15 32-bit RANLUX integer(kind=kInt32), public, parameter :: I32_SFC = 16 Doty-Humphrey's 32-bit Small, Fast, Counting (SFC) integer(kind=kInt32), public, parameter :: I32_SUPERKISS = 17 Marsaglia's 32-bit SuperKISS integer(kind=kInt32), public, parameter :: I32_TUAS88 = 18 L'Ecuyer's 1996 Three-Component Tausworthe integer(kind=kInt32), public, parameter :: I32_WELL512A = 19 Well Equidistributed Long-period Linear (WELL) 512a integer(kind=kInt32), public, parameter :: I32_WELL1024A = 20 Well Equidistributed Long-period Linear (WELL) 1024a integer(kind=kInt32), public, parameter :: I32_WELL19937A = 21 Well Equidistributed Long-period Linear (WELL) 19937a integer(kind=kInt32), public, parameter :: I32_WELL19937C = 22 Well Equidistributed Long-period Linear (WELL) 19937c integer(kind=kInt32), public, parameter :: I32_WELL49937A = 23 Well Equidistributed Long-period Linear (WELL) 49937a integer(kind=kInt32), public, parameter :: I32_WELL49937B = 24 Well Equidistributed Long-period Linear (WELL) 49937b integer(kind=kInt32), public, parameter :: I32_XOROSHIRO64S = 25 XOR_Rotate_Shift_Rotate (XoRoShiRo) 64Star integer(kind=kInt32), public, parameter :: I32_XOROSHIRO64SS = 26 XOR_Rotate_Shift_Rotate (XoRoShiRo) 64StarStar integer(kind=kInt32), public, parameter :: I32_XOSHIRO128SS = 27 XOR_Shift_Rotate (XoShiRo) 128StarStar integer(kind=kInt32), public, parameter :: I32_XOSHIRO128P = 28 XOR_Shift_Rotate (XoShiRo) 128Plus integer(kind=kInt32), public, parameter :: I32_XOSHIRO128PP = 29 XOR_Shift_Rotate (XoShiRo) 128PlusPlus integer(kind=kInt32), public, parameter :: I64_CHACHA = 1 Chacha cipher integer(kind=kInt32), public, parameter :: I64_JSF = 2 Jenkins's small fast non-cryptographic (64-bit variant) integer(kind=kInt32), public, parameter :: I64_KISS = 3 Marsaglia's 64-bit KISS (Keep it Simple Stupid) integer(kind=kInt32), public, parameter :: I64_KOMI = 4 Vaneev's KomiRand integer(kind=kInt32), public, parameter :: I64_L64_X128_M1 = 5 L64-X128-Mix based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I64_L64_X128_SS1 = 6 L64-X128-StarStar based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I64_L64_X256_M1 = 7 L64-X256-Mix based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I64_L64_X1024_M1 = 8 L64-X1024-Mix based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I64_L128_X128_M1 = 9 L128-X128-Mix based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I64_L128_X256_M1 = 10 L128-X256-Mix based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I64_L128_X1024_M1 = 11 L128-X1024-Mix based on Java's JDK.Random integer(kind=kInt32), public, parameter :: I64_L64_X128_M2 = 12 L64-X128-Mix based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I64_L64_X128_SS2 = 13 L64-X128-StarStar based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I64_L64_X256_M2 = 14 L64-X256-Mix based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I64_L64_X1024_M2 = 15 L64-X1024-Mix based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I64_L128_X128_M2 = 16 L128-X128-Mix based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I64_L128_X256_M2 = 17 L128-X256-Mix based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I64_L128_X1024_M2 = 18 L128-X1024-Mix based on Apache Commons RNG integer(kind=kInt32), public, parameter :: I64_LFSR258 = 19 L'Ecuyer's 1999 64-bit Composite LFSR integer(kind=kInt32), public, parameter :: I64_MRG63K3A = 20 L'Ecuyer's 63-bit combined Multiple Recursive Generator (cMRG) integer(kind=kInt32), public, parameter :: I64_MSWS = 21 Middle-Square Weyl Sequence (MSWS) integer(kind=kInt32), public, parameter :: I64_MT = 22 64-bit Mersenne Twister (MT) integer(kind=kInt32), public, parameter :: I64_PCG_RXS_M_XS = 23 64-bit PCG's LCG-RandomXorshift-Multiply-Xorshift integer(kind=kInt32), public, parameter :: I64_RANLUXPP = 24 64-bit RANLUX++ integer(kind=kInt32), public, parameter :: I64_SFC = 25 Doty-Humphrey's 64-bit Small, Fast, Counting (SFC) integer(kind=kInt32), public, parameter :: I64_SIP24 = 26 SipHash24 integer(kind=kInt32), public, parameter :: I64_SPLITMIX = 27 SplitMix integer(kind=kInt32), public, parameter :: I64_SUPERKISS = 28 Marsaglia's 64-bit SuperKISS integer(kind=kInt32), public, parameter :: I64_WY = 29 Wang Yi's WyRand integer(kind=kInt32), public, parameter :: I64_XOROSHIRO128SS = 30 XOR_Rotate_Shift_Rotate (XoRoShiRo) 128StarStar integer(kind=kInt32), public, parameter :: I64_XOROSHIRO128P = 31 XOR_Rotate_Shift_Rotate (XoRoShiRo) 128Plus integer(kind=kInt32), public, parameter :: I64_XOROSHIRO128PP = 32 XOR_Rotate_Shift_Rotate (XoRoShiRo) 128PlusPlus integer(kind=kInt32), public, parameter :: I64_XOROSHIRO1024S = 33 XOR_Rotate_Shift_Rotate (XoRoShiRo) 1024Star integer(kind=kInt32), public, parameter :: I64_XOROSHIRO1024SS = 34 XOR_Rotate_Shift_Rotate (XoRoShiRo) 1024StarStar integer(kind=kInt32), public, parameter :: I64_XOROSHIRO1024PP = 35 XOR_Rotate_Shift_Rotate (XoRoShiRo) 1024PlusPlus integer(kind=kInt32), public, parameter :: I64_XOSHIRO256SS = 36 XOR_Shift_Rotate (XoShiRo) 256StarStar integer(kind=kInt32), public, parameter :: I64_XOSHIRO256P = 37 XOR_Shift_Rotate (XoShiRo) 256Plus integer(kind=kInt32), public, parameter :: I64_XOSHIRO256PP = 38 XOR_Shift_Rotate (XoShiRo) 256PlusPlus integer(kind=kInt32), public, parameter :: I64_XOSHIRO512SS = 39 XOR_Shift_Rotate (XoShiRo) 512StarStar integer(kind=kInt32), public, parameter :: I64_XOSHIRO512P = 40 XOR_Shift_Rotate (XoShiRo) 512Plus integer(kind=kInt32), public, parameter :: I64_XOSHIRO512PP = 41 XOR_Shift_Rotate (XoShiRo) 512PlusPlus Functions public  function CreateIntegerRng (RngAlgo, Seed) result(NewRng) To create an instance of the specified Integer random number generator\n as well as to initialize the generator. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-29) integer(kind=kInt32), intent(in), optional :: Seed (:) seed(s) Return Value class( BaseRNG ), ALLOCATABLE 'BaseRNG' object public  function CreateLongRng (RngAlgo, Seed) result(NewRng) To create an instance of the specified Long random number generator\n as well as to initialize the generator. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-41) integer(kind=kInt64), intent(in), optional :: Seed (:) seed(s) Return Value class( BaseRNG ), ALLOCATABLE 'BaseRNG' object public  function GetSeedSizeIntegerRng (RngAlgo) result(Number) To return the number of seeds required by the specified algorithm. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-29) Return Value integer(kind=kInt32) number of seeds required by the specified algorithm public  function GetSeedSizeLongRng (RngAlgo) result(Number) To return the number of seeds required by the specified algorithm. Arguments Type Intent Optional Attributes Name integer(kind=kInt32), intent(in) :: RngAlgo flag indicating algorithm (1-41) Return Value integer(kind=kInt32) number of seeds required by the specified algorithm","tags":"","loc":"module\\mbase_prgnbuilder.html"},{"title":"MClass_LongRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the LongRNG type and its related routines.\n  The LongRNG type is an abstract PRNG type that directly extends\n  the BaseRNG type.   It defines additional methods for a so-called Long PRNG.  It also provides default implementations of some deferred\n  procedures required by a PRNG where other deferred procedures must be\n  implemented by its subtypes. By design, the LongRNG type is provided as a base type for a Long PRNG whose main purpose is to produce a 64-bit integer random number.\n  Therefore, all so-called Long PRNGs are particularly required to\n  implement the NextLongImpl deferred procedure. Uses MBase_SInt128 iso_c_binding MBase_Common MBase_UInt128 MClass_BaseRNG MBase_MemHandlers MClass_IntegerRNG Derived Types type, public, extends( BaseRNG )Â :: LongRNG The LongRNG type is an abstract PRNG type that directly extends\n the BaseRNG type.  It is provided to aid the implementation of an Long PRNG whose main purpose is to produce a 64-bit integer random\n number.  Therefore, all so-called Long PRNGs should extend from\n this base type. Type-Bound Procedures procedure(NextI64), public, deferred :: NextLongImpl NextLongImpl is a binding name of the NextI64 deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure(RNGName), public, deferred :: GetName GetName is a binding name of the RNGName deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure(SeedSize), public, deferred :: GetSeedSize GetSeedSize is a binding name of the SeedSize deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize the PRNG. Usage : --->    SeedSize = PRNG%GetSeedSize() procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure(InitBase), public, deferred :: BaseInit BaseInit is a binding name of the InitBase deferred procedure. This procedure is intentionally employed as a base initialization that\n all other initialization procedures should call this procedure.  Also,\n it is intended to be used internally by an implementor, not a user. procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds)","tags":"","loc":"module\\mclass_longrng.html"},{"title":"MClass_L64XMRNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the L64XMRNG type and its related routines.\n  The L64XMRNG type is a Long PRNG type that directly extends\n  the LongRNG type.  Therefore, it provides all remaining deferred\n  procedures required by a Long PRNG type. In particular, the L64XMRNG type provides an implementation of the NextLongImpl deferred procedure based on the L64XM algorithms.\n  The L64XM algorithms are specific members of the LXM family of algorithms\n  for pseudo-random number generators where -  L stands for Linear congruential generator (LCG); -  X stands for Xor-based generator (XBG); and -  M stands for Mix. The L64XMRNG type can represent four PRNG classes: - the L64X128Mix RNG, - the L64X128StarStar RNG, - the L64X256Mix RNG, or - the L64X1024Mix RNG. The L64X128 RNGs employ a 64-bit LCG, a 128-bit XBG and a mixing function\n  where its memory footprint is 256 bits and its period is roughly 2 192 . The L64X256 RNG employ a 64-bit LCG, a 256-bit XBG and a mixing function\n  where its memory footprint is 384 bits and its period is roughly 2 320 . The L64X1024 RNGs employ a 64-bit LCG, a 1024-bit XBG and a mixing function\n  where its memory footprint is 1184 bits and its period is roughly 2 1088 . By default, The L64X128Mix PRNG is employed.  However, other L64XM PRNG\n  variants can be utilized by specifying an algorithm flag (between 1 to 4)\n  when initializing the generator. In addition to common operations of a PRNG, the L64XMRNG type provides\n  the Split method to split a generator into two instances (the original and\n  a new instance) where the two generators can be used concurrently.  Presumably,\n  the new generator is statistically independent and uniform. The L64XMRNG type also provides the Jump and LongJump methods where\n  a large (or very large) number of steps of the output sequence can be advanced\n  in a single operation.  Each method creates (and also returns) a copy of the\n  input PRNG and then advances the state of the specified PRNG.  The PRNG and its\n  copy produce non-overlapping output for the length of the jump intendedly for\n  use in parallel computations. It is important to note that the L64XM PRNG requires an explicit initialization\n  by first calling the Initialize method before using any other methods.  Otherwise,\n  the generator may produce undesirable random sequences.  Also, it should be noted\n  that the implementation of this PRNG type is based on references #3-6 whereas the L64X128RNG , L64X256RNG , and L64X1024RNG types, which are based on the same\n  algorithms, are based their implementation on reference #2. REFERENCES : [1] Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators\n     (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5,\n      Article 148, pp 1-31. [2] Package: Java.Util.Random [3] Apache Commons RNG: Class L64X128Mix [4] Apache Commons RNG: Class L64X128StarStar [5] Apache Commons RNG: Class L64X256Mix [6] Apache Commons RNG: L64X1024Mix Uses MBase_MemHandlers MClass_LongRNG MClass_BaseRNG MBase_Common Variables Type Visibility Attributes Name Initial integer(kind=kInt32), public, parameter :: L64X128Mix = 1 flag for L64X128Mix PRNG integer(kind=kInt32), public, parameter :: L64X128StarStar = 2 flag for L64X128StarStar PRNG integer(kind=kInt32), public, parameter :: L64X256Mix = 3 flag for L64X256Mix PRNG integer(kind=kInt32), public, parameter :: L64X1024Mix = 4 flag for L64X1024Mix PRNG Derived Types type, public, extends( LongRNG )Â :: L64XMRNG The L64XMRNG type is a Long PRNG type based on the L64XM algorithms, which are specific members of the LXM family of\n algorithms for pseudo-random number generators. Finalizations Procedures final :: L64XMRNG_Finalization To perform finalization of the PRNG. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextIntegerImpl => Default_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. procedure, public :: BaseInit => L64XMRNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextLongImpl => L64XMRNG_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => L64XMRNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => L64XMRNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize() generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl , InitWithFlag Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : ! initialize without seed; use L64X128Mix (default) algorithm --->    CALL RNG%Initialize() ! initialize with seed(s); use L64X128Mix (default) algorithm --->    CALL RNG%Initialize(Seeds) ! initialize without seed; use L64X128StarStar algorithm --->    CALL RNG%Initialize(L64X128StarStar) ! initialize with seed(s); use L64X1024Mix algorithm --->    CALL RNG%Initialize(L64X1024Mix, Seeds) procedure, public :: Split => L64XMRNG_Split Type-Bound Function : Split Purpose :  To return a new PRNG, split off from the current one. Usage : --->    NewRNG = PRNG%Split() Note : The Split method is intended to be used in a parallel environment\n           where the current generator and the new one can be used concurrently. procedure, public :: Jump => L64XMRNG_Jump Type-Bound Function : Jump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%Jump() Note : The Jump method is equivalent to calling the NextInteger method repeatedly a large number of times. procedure, public :: LongJump => L64XMRNG_LongJump Type-Bound Function : LongJump Purpose :  To create a copy of the specified PRNG and then retreat\n               the state of the current PRNG.  The copy is returned as\n               a new PRNG. Usage : --->    NewRNG = PRNG%LongJump() Note : The LongJump method is equivalent to calling the NextInteger method repeatedly a very large number of times.","tags":"","loc":"module\\mclass_l64xmrng.html"},{"title":"MClass_Sfc32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Sfc32RNG type and its related routines.\n  The Sfc32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Sfc32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the Small, Fast, Counting\n  (SFC) 32-bit generator by Chris Doty-Humphrey.  It has a state size of\n  128-bits. The period is a minimum of 2 32 and an average of\n  approximately 2 127 . It is important to note that the Sfc32 PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] PractRand Test Suite [2] Apache Commons RNG: Class DotyHumphreySmallFastCounting32 Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Sfc32RNG The Sfc32RNG type is an Integer PRNG type based on the Small,\n Fast, Counting (SFC) 32-bit generator by Chris Doty-Humphrey. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Sfc32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Sfc32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Sfc32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Sfc32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_sfc32rng.html"},{"title":"MClass_Kiss32RNG â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"PURPOSE OF THIS MODULE : This module contains the Kiss32RNG type and its related routines.\n  The Kiss32RNG type is an Integer PRNG type that directly extends\n  the IntegerRNG type.  Therefore, it provides all remaining deferred\n  procedures required by an Integer PRNG type. In particular, the Kiss32RNG type provides an implementation of the NextIntegerImpl deferred procedure based on the 32-bit KISS (Keep\n  it Simple Stupid) algorithm by George Marsaglia. The 32-bit KISS algorithm consists of a combination of four sub-generators,\n  each with 32 bits of state, of three kinds: - one linear congruential generator modulo 2 32 - one general binary linear generator over the vector space GF(2) 32 - two multiply-with-carry generators modulo 2 16 , with different\n    parameters The four generators are updated independently, and their states are combined\n  to form a sequence of 32-bit output words with period of about 2 123 . It is important to note that the KISS PRNG requires an explicit\n  initialization by first calling the Initialize method before using\n  any other methods.  Otherwise, the generator may produce undesirable\n  random sequences. REFERENCES : [1] Random Number for C: End, at last? [2] George Marsaglia's Random Number Generators [3] Apache Commons RNG: Class KISSRandom Uses MClass_IntegerRNG MClass_BaseRNG MBase_Common Derived Types type, public, extends( IntegerRNG )Â :: Kiss32RNG The Kiss32RNG type is an Integer PRNG type based on the KISS (Keep it Simple Stupid) algorithm by George Marsaglia. Type-Bound Procedures procedure, public :: Default_NextIntegerLimits Use the NextInteger Method instead of this method. procedure, public :: Default_NextLongLimits Use the NextLong Method instead of this method. procedure, public :: Default_NextI128Limits Use the NextI128 Method instead of this method. procedure, public :: Default_NextU128Limits Use the NextU128 Method instead of this method. procedure, public :: Default_NextSingle Use the NextSingle Method instead of this method. procedure, public :: Default_NextSingleLimits Use the NextSingle Method instead of this method. procedure, public :: Default_NextDoubleLimits Use the NextDouble Method instead of this method. procedure, public :: Default_NextQuadLimits Use the NextQuad Method instead of this method. generic, public :: NextInteger => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextInteger Purpose :  To return a 32-bit integer random number. Usage : ! any random value --->    I32Val = RNG%NextInteger() ! random value between 0 and Limit1 --->    I32Val = RNG%NextInteger(Limit1) ! random value between Limit1 and Limit2 --->    I32Val = RNG%NextInteger(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextLong => NextLongImpl , Default_NextLongLimits Type-Bound Function : NextLong Purpose :  To return a 64-bit integer random number. Usage : ! any random value --->    I64Val = RNG%NextLong() ! random value between 0 and Limit1 --->    I64Val = RNG%NextLong(Limit1) ! random value between Limit1 and Limit2 --->    I64Val = RNG%NextLong(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextIndex => NextIntegerImpl , Default_NextIntegerLimits Type-Bound Function : NextIndex Purpose :  To return an integer random number representing an index. Usage : ! any random value --->    Index = RNG%NextIndex() ! random value between 0 and Limit1 --->    Index = RNG%NextIndex(Limit1) ! random value between Limit1 and Limit2 --->    Index = RNG%NextIndex(Limit1, Limit2) Note : The number can be either 32-bit or 64-bit integer depending on the configuration\n           set when the code is compiled. generic, public :: NextI128 => NextI128Impl , Default_NextI128Limits Type-Bound Function : NextI128 Purpose :  To return a signed 128-bit integer random number. Usage : ! any random value --->    I128Val = RNG%NextI128() ! random value between 0 and Limit1 --->    I128Val = RNG%NextI128(Limit1) ! random value between Limit1 and Limit2 --->    I128Val = RNG%NextI128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextU128 => NextU128Impl , Default_NextU128Limits Type-Bound Function : NextU128 Purpose :  To return an unsigned 128-bit integer random number. Usage : ! any random value --->    U128Val = RNG%NextU128() ! random value between 0 and Limit1 --->    U128Val = RNG%NextU128(Limit1) ! random value between Limit1 and Limit2 --->    U128Val = RNG%NextU128(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextSingle => Default_NextSingle , Default_NextSingleLimits Type-Bound Function : NextSingle Purpose :  To return a 32-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R32Val = RNG%NextSingle() ! random value between 0.0 and Limit1 --->    R32Val = RNG%NextSingle(Limit1) ! random value between Limit1 and Limit2 --->    R32Val = RNG%NextSingle(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextDouble => NextDoubleImpl , Default_NextDoubleLimits Type-Bound Function : NextDouble Purpose :  To return a 64-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R64Val = RNG%NextDouble() ! random value between 0.0 and Limit1 --->    R64Val = RNG%NextDouble(Limit1) ! random value between Limit1 and Limit2 --->    R64Val = RNG%NextDouble(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. generic, public :: NextQuad => NextQuadImpl , Default_NextQuadLimits Type-Bound Function : NextQuad Purpose :  To return a 128-bit real random number. Usage : ! random value between 0.0 (inclusive) and 1.0 (exclusive) --->    R128Val = RNG%NextQuad() ! random value between 0.0 and Limit1 --->    R128Val = RNG%NextQuad(Limit1) ! random value between Limit1 and Limit2 --->    R128Val = RNG%NextQuad(Limit1, Limit2) Note : Values of specified limits can either be positive or negative. procedure, public :: NextString => Default_NextString Type-Bound Function : NextString Purpose :  To return a random character string. Usage : ! random string with default settings --->    Str = RNG%NextString() ! random string with a specified character set --->    Str = RNG%NextString(AlphaOnlyCap) ! random string with a specified length --->    Str = RNG%NextString(StrLen=OutLen) ! random string with a specified maximum length --->    Str = RNG%NextString(MaxLen=MaxLen) procedure, public :: NextLogical => Default_NextLogical Type-Bound Function : NextLogical Purpose :  To return a logical random value. Usage : --->    LogVal = RNG%NextLogical() procedure, public :: NextLogicalArray => Default_NextLogicalArray Type-Bound Subroutine : NextLogicalArray Purpose :  To fill the specified array with logical random values. Usage : --->    CALL RNG%NextLogicalArray(RndArr) procedure, public :: NextByte => Default_NextByte Type-Bound Function : NextByte Purpose :  To return a 8-bit integer random number. Usage : --->    I8Val = RNG%NextByte() procedure, public :: NextByteArray => Default_NextByteArray Type-Bound Subroutine : NextByteArray Purpose :  To fill the specified array with 8-bit integer random numbers. Usage : --->    CALL RNG%NextByteArray(RndArr) procedure, public :: NextShort => Default_NextShort Type-Bound Function : NextShort Purpose :  To return a 16-bit integer random number. Usage : --->    I16Val = RNG%NextShort() procedure, public :: NextShortArray => Default_NextShortArray Type-Bound Subroutine : NextShortArray Purpose :  To fill the specified array with 16-bit integer random numbers. Usage : --->    CALL RNG%NextShortArray(RndArr) procedure, public :: NextIntegerArray => Default_NextIntegerArray Type-Bound Subroutine : NextIntegerArray Purpose :  To fill the specified array with 32-bit integer random numbers. Usage : --->    CALL RNG%NextIntegerArray(RndArr) procedure, public :: NextLongArray => Default_NextLongArray Type-Bound Subroutine : NextLongArray Purpose :  To fill the specified array with 64-bit integer random numbers. Usage : --->    CALL RNG%NextLongArray(RndArr) procedure, public :: NextI128Array => Default_NextI128Array Type-Bound Subroutine : NextI128Array Purpose :  To fill the specified array with signed 128-bit integer random numbers. Usage : --->    CALL RNG%NextI128Array(RndArr) procedure, public :: NextSingleArray => Default_NextSingleArray Type-Bound Subroutine : NextU128Array Purpose :  To fill the specified array with unsigned 128-bit integer random numbers. Usage : --->    CALL RNG%NextU128Array(RndArr)\n       PROCEDURE   :: NextU128Array    => Default_NextU128Array Type-Bound Subroutine : NextSingleArray Purpose :  To fill the specified array with 32-bit real random numbers. Usage : --->    CALL RNG%NextSingleArray(RndArr) procedure, public :: NextDoubleArray => Default_NextDoubleArray Type-Bound Subroutine : NextDoubleArray Purpose :  To fill the specified array with 64-bit real random numbers. Usage : --->    CALL RNG%NextDoubleArray(RndArr) procedure, public :: NextQuadArray => Default_NextQuadArray Type-Bound Subroutine : NextQuadArray Purpose :  To fill the specified array with 128-bit real random numbers. Usage : --->    CALL RNG%NextQuadArray(RndArr) procedure, public :: NextGaussian => Default_NextGaussian Type-Bound Function : NextGaussian Purpose :  To return a 64-bit real value pseudo-randomly chosen from\n               a Gaussian (normal) distribution whose mean is 0.0 and whose\n               standard deviation is 1.0. Usage : --->    R64Val = RNG%NextGaussian() procedure, public :: NextExponential => Default_NextExponential Type-Bound Function : NextExponential Purpose :  To return a nonnegative 64-bit real value pseudo-randomly chosen\n               from a exponential distribution whose mean is 1.0. Usage : --->    R64Val = RNG%NextExponential() procedure, public :: InitWOSeedImpl => Default_InitNoSeed InitWOSeedImpl is a deferred procedure. Use the Initialize method in place of the InitWOSeedImpl method to\n initialize the PRNG without specifying any seed(s). procedure, public :: ReInit => Default_ReInitialize ReInit is a deferred procedure. Type-Bound Subroutine : ReInit Purpose :  To reset the PRNG to its initial state. Usage : --->    CALL PRNG%ReInit() procedure, public :: NextLongImpl => Default_NextLong NextLongImpl is a deferred procedure. Use the NextLong method in place of the NextLongImpl method\n to generate a 64-bit integer number. procedure, public :: NextI128Impl => Default_NextI128 NextI128Impl is a deferred procedure. Use the NextI128 method in place of the NextI128Impl method\n to generate a signed 128-bit integer number. procedure, public :: NextU128Impl => Default_NextU128 NextU128Impl is a deferred procedure. Use the NextU128 method in place of the NextU128Impl method\n to generate an unsigned 128-bit integer number. procedure, public :: NextDoubleImpl => Default_NextDouble NextDoubleImpl is a deferred procedure. Use the NextDouble method in place of the NextDoubleImpl method\n to generate a 64-bit real number. procedure, public :: NextQuadImpl => Default_NextQuad NextQuadImpl is a deferred procedure. Use the NextQuad method in place of the NextQuadImpl method\n to generate a 128-bit real number. procedure, public :: InitWSeedImpl => Default_InitWithSeeds InitWSeedImpl is a procedure to initialize the generator with\n specified seed(s).  Instances of the PRNG initialized with the same\n seed(s) in the same program should  produce identical sequences of\n values. Use the Initialize method in place of the InitWSeedImpl method to\n initialize the PRNG with specified seed(s). procedure, public :: CopySeed => Copy_InitSeed Type-Bound Subroutine : CopySeed Purpose :  To copy the initial seeds of the source PRNG to\n               that of the destination PRNG. Usage : --->    CALL SrcRNG%CopySeed(DstRNG) Usage : This method is intended for internal use only. generic, public :: Initialize => InitWOSeedImpl , InitWSeedImpl Type-Bound Function : Initialize Purpose :  To initialize the pseudo-random number generator. Usage : --->    CALL RNG%Initialize() --->    CALL RNG%Initialize(Seeds) procedure, public :: BaseInit => Kiss32RNG_BaseInit BaseInit is a deferred procedure intended to be used internally. Use the Initialize method to initialize the PRNG instead. procedure, public :: NextIntegerImpl => Kiss32RNG_NextInteger NextIntegerImpl is a deferred procedure. Use the NextInteger method in place of the NextIntegerImpl method\n to generate a 32-bit integer number. procedure, public :: GetName => Kiss32RNG_GetName GetName is a deferred procedure. Type-Bound Function : GetName Purpose :  To get the name of the PRNG. Usage : --->    Name = PRNG%GetName() procedure, public :: GetSeedSize => Kiss32RNG_GetSeedSize GetSeedSize is a deferred procedure. Type-Bound Function : GetSeedSize Purpose :  To get size of specified seed(s) needed to initialize\n               the generator. Usage : --->    SeedSize = PRNG%GetSeedSize()","tags":"","loc":"module\\mclass_kiss32rng.html"},{"title":"MClass_Cmwc4096RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Cmwc4096RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Cmwc4096RNG* type and its related routines. !   The *Cmwc4096RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Cmwc4096RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the *Complimentary-Multiply-With-Carry* !   (CMWC) algorithm by George Marsaglia.  Its memory footprint is 131104 bits !   and its period is roughly 2<sup>131104</sup>. !   It is important to note that the *CMWC* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://en.wikipedia.org/wiki/Multiply-with-carry_pseudorandom_number_generator\"> !       Multiply-with-carry pseudorandom number generator</a> <br> !   [2] <a href=\"https://crypto.stackexchange.com/questions/10359/what-stops-the-multiply-with-carry-rng-from-being-a-cryptographically-secure-prn\"> !       What stops the Multiply-With-Carry RNG from being a Cryptographically Secure PRNG?</a> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : OPERATOR (. ULT .), ToUnsignedLong USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Cmwc4096RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Length of the state array tIndex , PARAMETER :: Q_SIZE = 4096_kIndex ! Multiply tSInt64 , PARAMETER :: C_MAX = 809430660_kInt64 ! Multiply tSInt64 , PARAMETER :: A = 18782_kInt64 ! Complimentary tSInt32 , PARAMETER :: R = ToInt32 ( Z 'FFFFFFFE' ) !** DERIVED TYPE DEFINITIONS !> The *Cmwc4096RNG* type is an *Integer* PRNG type based on the *CMWC* !  (Complimentary-Multiply-With-Carry) algorithm by George Marsaglia. TYPE , EXTENDS ( IntegerRNG ) :: Cmwc4096RNG PRIVATE ! the working states tSInt32 :: State ( 0 : Q_SIZE - 1 ) ! current index in \"state\" array tSInt32 :: Index ! carry tSInt32 :: Carry CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Cmwc4096RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Cmwc4096RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Cmwc4096RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Cmwc4096RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Cmwc4096RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Cmwc4096RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Cmwc4096RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Cmwc4096RNG ), INTENT ( INOUT ) :: RNG !! 'Cmwc4096RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 0 : Q_SIZE ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! initial state RNG % State ( 0 : Q_SIZE - 1 ) = Seed0 ( 0 : Q_SIZE - 1 ) ! last element of the \"seed\" is the initial \"carry\" ! Marsaglia's recommendation: 0 <= carry < C_MAX RNG % Carry = ToInt32 ( MOD ( ABS ( ToUnsignedLong ( Seed0 ( Q_SIZE ))), C_MAX )) ! initial index RNG % Index = Q_SIZE RETURN END SUBROUTINE Cmwc4096RNG_BaseInit !****************************************************************************** FUNCTION Cmwc4096RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Cmwc4096RNG ), INTENT ( INOUT ) :: RNG !! 'Cmwc4096RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt32 , PARAMETER :: MaskB = ToInt32 ( Z '00000FFF' ) tSInt64 , PARAMETER :: MaskL = ToInt64 ( Z '00000000FFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: T tSInt32 :: X ! FLOW ! produce an index in the range 0-4095 RNG % Index = IAND ( RNG % Index , MaskB ) ! compute intermediate variables and update carry ! where Carry = T / MaskL and X = MOD(T, MaskL) T = A * IAND ( ToUnsignedLong ( RNG % State ( RNG % Index )), MaskL ) + RNG % Carry RNG % Carry = ToInt32 ( SHIFTR ( T , 32 )) X = ToInt32 ( T + RNG % Carry ) IF ( X . ULT . RNG % Carry ) THEN X = X + 1 RNG % Carry = RNG % Carry + 1 END IF ! compute next random number RandNum = R - X ! update state  and index RNG % State ( RNG % Index ) = RandNum RNG % Index = RNG % Index + 1 RETURN END FUNCTION Cmwc4096RNG_NextInteger !****************************************************************************** FUNCTION Cmwc4096RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Cmwc4096RNG ), INTENT ( IN ) :: RNG !! 'Cmwc4096RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Cmwc4096RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Cmwc4096RNG_GetName !****************************************************************************** FUNCTION Cmwc4096RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Cmwc4096RNG ), INTENT ( IN ) :: RNG !! 'Cmwc4096RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = Q_SIZE + 1_kIndex ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Cmwc4096RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Cmwc4096RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_cmwc4096rng.f90.html"},{"title":"MClass_XoShiRo256RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_XoShiRo256RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *XoShiRo256RNG* type and its related routines. !   The *XoShiRo256RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *XoShiRo256RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on algorithms from the Xor-Shift-Rotate !   family of generators by Sebastiano Vigna. <br> !   The *XoShiRo256RNG* type can represent three PRNG classes: <br> !   - the XoShiRo256StarStar RNG, which is a fast all-purpose 64-bit generator, <br> !   - the XoShiRo256Plus  RNG, which is a fast 64-bit generator suitable for !     real number generation, or <br> !   - the XoShiRo256PlusPlus RNG, which is a fast all-purpose 64-bit generator. <br> !   By default, the XoShiRo256StarStar RNG is employed.  However, other XoShiRo256 !   PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3) !   when initializing the generator.  The *XoShiRo256RNG* type has state size of !   256 bits and period of 2<sup>256</sup>-1. <br> !   In addition to common operations of a PRNG, the *XoShiRo256RNG* type provides !   the *Jump* and *LongJump* methods where a large (or very large) number of steps !   of the output sequence can be advanced in a single operation.  Each method creates !   (and also returns) a copy of the input PRNG and then advances the state of the !   specified PRNG.  The PRNG and its copy produce non-overlapping output for the !   length of the jump intendedly for use in parallel computations. <br> !   It is important to note that the *XoShiRo256* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://prng.di.unimi.it/\"> !       Xoshiro/Xoroshiro Generators and the PRNG shootout.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoShiRo256StarStar.html\"> !       Apache Commons RNG: Class XoShiRo256StarStar</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoShiRo256Plus.html\"> !       Apache Commons RNG: Class XoShiRo256Plus</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoShiRo256PlusPlus.html\"> !       Apache Commons RNG: Class XoShiRo256PlusPlus</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: XoShiRo256RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Size of the state vector tSInt32 , PARAMETER :: SEED_SIZE = 4 ! The coefficients for the jump function tSInt64 , PARAMETER :: JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '180EC6D33CFD0ABA' ), ToInt64 ( Z 'D5A61266F0C9392C' ), & ToInt64 ( Z 'A9582618E03FC9AA' ), ToInt64 ( Z '39ABDC4529B1661C' )] ! The coefficients for the long jump function tSInt64 , PARAMETER :: LONG_JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '76E15D3EFEFDCBBF' ), ToInt64 ( Z 'C5004E441C522FB3' ), & ToInt64 ( Z '77710069854EE241' ), ToInt64 ( Z '39109BB02ACBE635' )] ! Parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: XoShiRo256StarStar = 1 !! flag for XoShiRo256StarStar PRNG tSInt32 , PARAMETER , PUBLIC :: XoShiRo256Plus = 2 !! flag for XoShiRo256Plus PRNG tSInt32 , PARAMETER , PUBLIC :: XoShiRo256PlusPlus = 3 !! flag for XoShiRo256PlusPlus PRNG !** DERIVED TYPE DEFINITIONS !> The *XoShiRo256RNGRNG* type is a *Long* PRNG type based on algorithms from !  the Xor-Shift-Rotate family of generators by Sebastiano Vigna. TYPE , EXTENDS ( LongRNG ) :: XoShiRo256RNG PRIVATE ! states tSInt64 :: State0 , State1 , State2 , State3 ! algorithm flag tSInt32 :: XoShiRoAlgo = XoShiRo256StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoShiRo256RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoShiRo256RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoShiRo256RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoShiRo256RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoShiRo256RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoShiRo256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoShiRo256RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoShiRo256StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoShiRo256StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoShiRo256Plus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo256Plus) <br> !   ! initialize with seed(s); use XoShiRo256PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo256PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoShiRo256RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoShiRo256RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoShiRo256RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoShiRo256RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG ) RESULT ( Output ) IMPORT CLASS ( XoShiRo256RNG ), INTENT ( IN ) :: RNG tSInt64 :: Output END FUNCTION Next END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE XoShiRo256RNG_InitWithFlag ( RNG , XoShiRoAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'XoShiRo256RNG' object CLASS ( XoShiRo256RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - 1, use XoShiRo256StarStar algorithm. <br> ! - 2, use XoShiRo256Plus algorithm. <br> ! - 3, use XoShiRo256PlusPlus algorithm. tSInt32 , INTENT ( IN ) :: XoShiRoAlgo !% optional 32-bit integer seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( XoShiRoAlgo , 1 , 3 )) THEN RNG % XoShiRoAlgo = XoShiRoAlgo ELSE RNG % XoShiRoAlgo = XoShiRo256StarStar END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE XoShiRo256RNG_InitWithFlag !****************************************************************************** SUBROUTINE XoShiRo256RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: ! To initialize the 'XoShiRo256RNG' object with optional initial seeds. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo256RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Seed0 ( 0 : SEED_SIZE - 1 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! copy seeds to states RNG % State0 = Seed0 ( 0 ) RNG % State1 = Seed0 ( 1 ) RNG % State2 = Seed0 ( 2 ) RNG % State3 = Seed0 ( 3 ) ! set pointer to next output function SELECT CASE ( RNG % XoShiRoAlgo ) CASE ( XoShiRo256StarStar ) RNG % NextOutput => XoShiRo256StarStar_Next CASE ( XoShiRo256Plus ) RNG % NextOutput => XoShiRo256Plus_Next CASE ( XoShiRo256PlusPlus ) RNG % NextOutput => XoShiRo256PlusPlus_Next END SELECT RETURN END SUBROUTINE XoShiRo256RNG_BaseInit !****************************************************************************** FUNCTION XoShiRo256RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo256RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: TmpState ! FLOW ! get next integer output RandNum = RNG % NextOutput () ! update states TmpState = SHIFTL ( RNG % State1 , 17 ) RNG % State2 = IEOR ( RNG % State2 , RNG % State0 ) RNG % State3 = IEOR ( RNG % State3 , RNG % State1 ) RNG % State1 = IEOR ( RNG % State1 , RNG % State2 ) RNG % State0 = IEOR ( RNG % State0 , RNG % State3 ) RNG % State2 = IEOR ( RNG % State2 , TmpState ) RNG % State3 = RotateLeft ( RNG % State3 , 45 ) RETURN END FUNCTION XoShiRo256RNG_NextLong !****************************************************************************** FUNCTION XoShiRo256RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo256RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % XoShiRoAlgo ) CASE ( XoShiRo256StarStar ) Name = 'XoShiRo256StarStarRNG' CASE ( XoShiRo256Plus ) Name = 'XoShiRo256PlusRNG' CASE ( XoShiRo256PlusPlus ) Name = 'XoShiRo256PlusPlusRNG' END SELECT RETURN END FUNCTION XoShiRo256RNG_GetName !****************************************************************************** FUNCTION XoShiRo256RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo256RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = SEED_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoShiRo256RNG_GetSeedSize !****************************************************************************** FUNCTION XoShiRo256StarStar_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo256StarStar generator, which is a fast all-purpose 64-bit !  generator with memory footprint of 256 bits and the period of 2**256-1. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo256RNG' object tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( RNG % State1 * 5 , 7 ) * 9 RETURN END FUNCTION XoShiRo256StarStar_Next !****************************************************************************** FUNCTION XoShiRo256Plus_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo256Plus generator, which is a fast 64-bit generator !  suitable for floating-point-number generation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo256RNG' object tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RNG % State0 + RNG % State3 RETURN END FUNCTION XoShiRo256Plus_Next !****************************************************************************** FUNCTION XoShiRo256PlusPlus_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo256PlusPlus generator, which is a fast all-purpose !  64-bit generator with memory footprint of 256 bits. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo256RNG' object tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( RNG % State0 + RNG % State3 , 23 ) + RNG % State0 RETURN END FUNCTION XoShiRo256PlusPlus_Next !****************************************************************************** SUBROUTINE XoShiRo256RNG_Perform_Jump ( RNG , JCoef ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform the jump to advance the generator state. !  Resets the cached state of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo256RNG' object tSInt64 , INTENT ( IN ) :: JCoef ( 0 :) !! jump coefficients !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S1 , S2 , S3 , Dummy tSInt32 :: I , B ! FLOW S0 = 0_kInt64 S1 = 0_kInt64 S2 = 0_kInt64 S3 = 0_kInt64 DO I = 0 , SEED_SIZE - 1 DO B = 0 , 63 IF ( IAND ( JCoef ( I ), SHIFTL ( 1_kInt64 , B )) /= 0_kInt64 ) THEN S0 = IEOR ( S0 , RNG % State0 ) S1 = IEOR ( S1 , RNG % State1 ) S2 = IEOR ( S2 , RNG % State2 ) S3 = IEOR ( S3 , RNG % State3 ) END IF Dummy = RNG % NextLong () END DO END DO RNG % State0 = S0 RNG % State1 = S1 RNG % State2 = S2 RNG % State3 = S3 RETURN END SUBROUTINE XoShiRo256RNG_Perform_Jump !****************************************************************************** FUNCTION XoShiRo256RNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy all components of the source object to the destination object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( INOUT ) :: Src !! source object TYPE ( XoShiRo256RNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! copy components Dst % State0 = Src % State0 Dst % State1 = Src % State1 Dst % State2 = Src % State2 Dst % State3 = Src % State3 Dst % XoShiRoAlgo = Src % XoShiRoAlgo Dst % NextOutput => Src % NextOutput CALL Src % CopySeed ( Dst ) RETURN END FUNCTION XoShiRo256RNG_Copy !****************************************************************************** FUNCTION XoShiRo256RNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>128</sup> calls to the generator's !  NextLong() method.  It can provide up to 2<sup>128</sup> non-overlapping !  subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo256RNG' object TYPE ( XoShiRo256RNG ) :: NewRNG !! new 'XoShiRo256RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( JUMP_COEFFICIENTS ) RETURN END FUNCTION XoShiRo256RNG_Jump !****************************************************************************** FUNCTION XoShiRo256RNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>192</sup> calls to the generator's !  NextLong() method.  It can provide up to 2<sup>64</sup> non-overlapping !  subsequences of length 2<sup>192</sup>; each subsequence can provide up to !  2<sup>64</sup> non-overlapping subsequences of length 2<sup>128</sup> using !  the generator's Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo256RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo256RNG' object TYPE ( XoShiRo256RNG ) :: NewRNG !! new 'XoShiRo256RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( LONG_JUMP_COEFFICIENTS ) RETURN END FUNCTION XoShiRo256RNG_LongJump !****************************************************************************** SUBROUTINE XoShiRo256RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'XoShiRo256RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( XoShiRo256RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo256RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % NextOutput ) RETURN END SUBROUTINE XoShiRo256RNG_Finalization !****************************************************************************** END MODULE MClass_XoShiRo256RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_xoshiro256rng.f90.html"},{"title":"MClass_XoRoShiRo64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_XoRoShiRo64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *XoRoShiRo64RNG* type and its related routines. !   The *XoRoShiRo64RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *XoRoShiRo64RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on algorithms from the Xor-Shift-Rotate !   family of generators by Sebastiano Vigna. <br> !   The *XoRoShiRo64RNG* type can represent two PRNG classes: <br> !   - the XoRoShiRo64StarStar RNG, which is a fast all-purpose 32-bit generator, or <br> !   - the XoRoShiRo64Star RNG, which is a fast 32-bit generator suitable for !     real number generation. <br> !   By default, the *XoRoShiRo64StarStar* RNG is employed.  However, the *XoRoShiRo64Star* !   RNG can be utilized by specifying an algorithm flag to true when initializing the !   generator.  The *XoRoShiRo64RNG* type has state size of 64 bits. <br> !   It is important to note that the *XoRoShiRo64* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://prng.di.unimi.it/\"> !       Xoshiro/Xoroshiro Generators and the PRNG shootout.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/XoRoShiRo64StarStar.html\"> !       Apache Commons RNG: Class XoRoShiRo64StarStar</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/XoRoShiRo64Star.html\"> !       Apache Commons RNG: Class XoRoShiRo64Star</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: XoRoShiRo64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Size of the state vector tSInt32 , PARAMETER :: SEED_SIZE = 2 ! multiplier tSInt32 , PARAMETER :: MPar = ToInt32 ( Z '9E3779BB' ) !** DERIVED TYPE DEFINITIONS !> The *XoRoShiRo64RNG* type is an *Integer* PRNG type based on algorithms from !  the Xor-Shift-Rotate family of generators by Sebastiano Vigna. TYPE , EXTENDS ( IntegerRNG ) :: XoRoShiRo64RNG PRIVATE ! states tSInt32 :: State0 , State1 ! algorithm flag tLogical :: UseXRSR64Star = FalseVal ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoRoShiRo64RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoRoShiRo64RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => XoRoShiRo64RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoRoShiRo64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoRoShiRo64RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoRoShiRo64RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoRoShiRo64RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG ) RESULT ( Output ) IMPORT CLASS ( XoRoShiRo64RNG ), INTENT ( IN ) :: RNG tSInt32 :: Output END FUNCTION Next END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE XoRoShiRo64RNG_InitWithFlag ( RNG , UseXRSR64Star , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'XoRoShiRo64RNG' object CLASS ( XoRoShiRo64RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - true, use XoRoShiRo64Star algorithm. <br> ! - false, use XoRoShiRo64StarStar algorithm. tLogical , INTENT ( IN ) :: UseXRSR64Star !% optional 32-bit integer seed(s) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set algorithm flag RNG % UseXRSR64Star = UseXRSR64Star IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE XoRoShiRo64RNG_InitWithFlag !****************************************************************************** SUBROUTINE XoRoShiRo64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified 32-bit integer seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo64RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo64RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 0 : 1 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! copy seeds to states RNG % State0 = Seed0 ( 0 ) RNG % State1 = Seed0 ( 1 ) ! set pointer to next output function IF ( RNG % UseXRSR64Star ) THEN RNG % NextOutput => XoRoShiRoStar_Next ELSE RNG % NextOutput => XoRoShiRoStarStar_Next END IF RETURN END SUBROUTINE XoRoShiRo64RNG_BaseInit !****************************************************************************** FUNCTION XoRoShiRo64RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo64RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo64RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: S0 , S1 ! FLOW ! get next integer output RandNum = RNG % NextOutput () ! update states S0 = RNG % State0 S1 = RNG % State1 S1 = IEOR ( S1 , S0 ) RNG % State0 = IEOR ( IEOR ( RotateLeft ( S0 , 26 ), S1 ), SHIFTL ( S1 , 9 )) ! a, b RNG % State1 = RotateLeft ( S1 , 13 ) ! c RETURN END FUNCTION XoRoShiRo64RNG_NextInteger !****************************************************************************** FUNCTION XoRoShiRo64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo64RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( RNG % UseXRSR64Star ) THEN Name = 'XoRoShiRo128StarRNG' ELSE Name = 'XoRoShiRo128StarStarRNG' END IF RETURN END FUNCTION XoRoShiRo64RNG_GetName !****************************************************************************** FUNCTION XoRoShiRo64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo64RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 2 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo64RNG_GetSeedSize !****************************************************************************** FUNCTION XoRoShiRoStarStar_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo64StarStar generator, which is a fast all-purpose !  32-bit generator with memory footprint of 64 bits. IMPLICIT NONE !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo64RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo64RNG' object tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( RNG % State0 * MPar , 5 ) * 5 RETURN END FUNCTION XoRoShiRoStarStar_Next !****************************************************************************** FUNCTION XoRoShiRoStar_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo64Star generator, which is a fast 32-bit generator !  suitable for floating-point-number generation. IMPLICIT NONE !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo64RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo64RNG' object tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RNG % State0 * MPar RETURN END FUNCTION XoRoShiRoStar_Next !****************************************************************************** SUBROUTINE XoRoShiRo64RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'XoRoShiRo64RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( XoRoShiRo64RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo64RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % NextOutput ) RETURN END SUBROUTINE XoRoShiRo64RNG_Finalization !****************************************************************************** END MODULE MClass_XoRoShiRo64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_xoroshiro64rng.f90.html"},{"title":"MClass_MswsRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_MswsRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *MswsRNG* type and its related routines. !   The *MswsRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *MswsRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the middle-square method !   by John von Neumann where a Weyl sequence is used to run the middle !   square.  It has a state size of 192-bits and the period of at least !   2<sup>64</sup>. <br> !   It is important to note that the *Msws* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://en.wikipedia.org/wiki/Middle-square_method\"> !       Middle-square method</a> <br> !   [2] <a href=\"https://arxiv.org/abs/1704.00358v3\">B. Widynski. 2017. !       Middle Square Weyl Sequence RNG</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/MiddleSquareWeylSequence.html\"> !       Apache Commons RNG: Class MiddleSquareWeylSequence</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: MswsRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Size of the seed array tSInt32 , PARAMETER :: SEED_SIZE = 3 ! The default seed ! This has a high quality Weyl increment (containing many bit state transitions). tSInt64 , PARAMETER :: DEFAULT_SEED ( 1 : SEED_SIZE ) = [ ToInt64 ( Z '012DE1BABB3C4104' ), & ToInt64 ( Z 'C8161B4202294965' ), ToInt64 ( Z 'B5AD4ECEDA1CE2A9' )] !** DERIVED TYPE DEFINITIONS !> The *Mt32RNG* type is a *Long* PRNG type based on the Middle Square !  Weyl Sequence RNG by B. Widynski. TYPE , EXTENDS ( LongRNG ) :: MswsRNG PRIVATE ! State of the generator tSInt64 :: X ! State of the Weyl sequence tSInt64 :: W ! Increment for the Weyl sequence.  This must be odd to ensure a full period. ! This is not final to support the restore functionality. tSInt64 :: S CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => MswsRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => MswsRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => MswsRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => MswsRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE :: InitWOSeedImpl => MswsRNG_InitNoSeed !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => MswsRNG_NextInteger ! --------------------------------------------------------------------- END TYPE MswsRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE MswsRNG_InitNoSeed ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG without specified seeds.  <br> !  This procedure overrides the default implementation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( MswsRNG ), INTENT ( INOUT ) :: RNG !! 'MswsRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! initialize with default seeds CALL RNG % Initialize ( DEFAULT_SEED ) RETURN END SUBROUTINE MswsRNG_InitNoSeed !****************************************************************************** SUBROUTINE MswsRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( MswsRNG ), INTENT ( INOUT ) :: RNG !! 'MswsRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: SizeOfSeed tSInt64 :: Seed0 ( SEED_SIZE ) ! FLOW ! set initial seed SizeOfSeed = SIZE ( Seed ) IF ( SizeOfSeed < SEED_SIZE ) THEN ! Complete the seed with a default to avoid low complexity Weyl increments Seed0 ( 1 : SizeOfSeed ) = Seed ( 1 : SizeOfSeed ) Seed0 ( SizeOfSeed + 1 : SEED_SIZE ) = DEFAULT_SEED ( SizeOfSeed + 1 : SEED_SIZE ) ELSE Seed0 = Seed ( 1 : SEED_SIZE ) END IF ! set state variables RNG % X = Seed0 ( 1 ) RNG % W = Seed0 ( 2 ) ! Ensure the increment is odd to provide a maximal period Weyl sequence RNG % S = IOR ( Seed0 ( 3 ), 1_kInt64 ) RETURN END SUBROUTINE MswsRNG_BaseInit !****************************************************************************** FUNCTION MswsRNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( MswsRNG ), INTENT ( INOUT ) :: RNG !! 'MswsRNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RNG % X = RNG % X * RNG % X RNG % W = RNG % W + RNG % S RNG % X = RNG % X + RNG % W RNG % X = IOR ( SHIFTR ( RNG % X , 32 ), SHIFTL ( RNG % X , 32 )) RandNum = ToInt32 ( RNG % X ) RETURN END FUNCTION MswsRNG_NextInteger !****************************************************************************** FUNCTION MswsRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( MswsRNG ), INTENT ( INOUT ) :: RNG !! 'MswsRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: Mask = ToInt64 ( Z 'FFFFFFFF00000000' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: I1 , I2 ! FLOW RNG % X = RNG % X * RNG % X RNG % W = RNG % W + RNG % S RNG % X = RNG % X + RNG % W I1 = IAND ( RNG % X , Mask ) RNG % X = IOR ( SHIFTR ( RNG % X , 32 ), SHIFTL ( RNG % X , 32 )) RNG % X = RNG % X * RNG % X RNG % W = RNG % W + RNG % S RNG % X = RNG % X + RNG % W I2 = SHIFTR ( RNG % X , 32 ) RNG % X = IOR ( I2 , SHIFTL ( RNG % X , 32 )) RandNum = IOR ( I1 , I2 ) RETURN END FUNCTION MswsRNG_NextLong !****************************************************************************** FUNCTION MswsRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( MswsRNG ), INTENT ( IN ) :: RNG !! 'MswsRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'MswsRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION MswsRNG_GetName !****************************************************************************** FUNCTION MswsRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( MswsRNG ), INTENT ( IN ) :: RNG !! 'MswsRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = SEED_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION MswsRNG_GetSeedSize !****************************************************************************** END MODULE MClass_MswsRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_mswsrng.f90.html"},{"title":"MClass_KomiRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_KomiRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *KomiRNG* type and its related routines. !   The *KomiRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *KomiRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the KomiRand algorithm by !   Aleksey Vaneev.  It has a state size of 128-bits and a period of !   2<sup>64</sup>. <br> !   It is important to note that the *Komi* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://github.com/avaneev/komihash\">KOMIHASH - Very fast, high-quality !       hash function, discrete-incremental and streamed hashing-capable (non-cryptographic, !       in C) + PRNG.</a> <br> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : U128_Multiply => UMul128 USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: KomiRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *KomiRNG* type is a *Long* PRNG type based on a simple, but reliable, !  self-starting, and fast 64-bit PRNG by Aleksey Vaneev. TYPE , EXTENDS ( LongRNG ) :: KomiRNG PRIVATE tSInt64 :: Seed1 ! working seed tSInt64 :: Seed2 ! working seed CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => KomiRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => KomiRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => KomiRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => KomiRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE KomiRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE KomiRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'KomiRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( KomiRNG ), INTENT ( INOUT ) :: RNG !! 'KomiRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I tSInt64 :: RandNum ! FLOW ! set initial seed RNG % Seed1 = Seed ( 1 ) IF ( SIZE ( Seed ) > 1 ) THEN RNG % Seed2 = Seed ( 2 ) ELSE RNG % Seed2 = Seed ( 1 ) END IF ! warming up before using the output DO I = 1 , 5 RandNum = RNG % NextLong () END DO RETURN END SUBROUTINE KomiRNG_BaseInit !****************************************************************************** FUNCTION KomiRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( KomiRNG ), INTENT ( INOUT ) :: RNG !! 'KomiRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: M = ToInt64 ( Z 'AAAAAAAAAAAAAAAA' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: OutLo , OutHi ! FLOW CALL U128_Multiply ( RNG % Seed1 , RNG % Seed2 , OutLo , OutHi ) RNG % Seed2 = RNG % Seed2 + ( OutHi + M ) RNG % Seed1 = IEOR ( RNG % Seed2 , OutLo ) RandNum = RNG % Seed1 RETURN END FUNCTION KomiRNG_NextLong !****************************************************************************** FUNCTION KomiRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( KomiRNG ), INTENT ( IN ) :: RNG !! 'KomiRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'KomiRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION KomiRNG_GetName !****************************************************************************** FUNCTION KomiRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( KomiRNG ), INTENT ( IN ) :: RNG !! 'KomiRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 2 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION KomiRNG_GetSeedSize !****************************************************************************** END MODULE MClass_KomiRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_komirng.f90.html"},{"title":"MClass_Jsf64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Jsf64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Jsf64RNG* type and its related routines. !   The *Jsf64RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *Jsf64RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on Bob Jenkins's small fast !   non-cryptographic (64-bit variant) PRNG.  It has a state size of 256-bits. <br> !   It is important to note that the *Jsf64* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://burtleburtle.net/bob/rand/smallprng.html\"> !       A small non-cryptographic PRNG</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/JenkinsSmallFast64.html\"> !       Apache Commons RNG: Class JenkinsSmallFast64</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Jsf64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *Jsf32RNG* type is a *Long* PRNG type based on the small !  fast non-cryptographic PRNG by Bob Jenkins. TYPE , EXTENDS ( LongRNG ) :: Jsf64RNG PRIVATE ! the working states tSInt64 :: A , B , C , D CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Jsf64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Jsf64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Jsf64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Jsf64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Jsf64RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Jsf64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Jsf64RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf64RNG ), INTENT ( INOUT ) :: RNG !! 'Jsf64RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , PARAMETER :: K = ToInt64 ( Z '00000000F1EA5EED' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I tSInt64 :: RandNum ! FLOW ! set initial seed RNG % B = Seed ( 1 ) RNG % A = K RNG % C = RNG % B RNG % D = RNG % B ! warming up before using the output DO I = 1 , 20 RandNum = RNG % NextLong () END DO RETURN END SUBROUTINE Jsf64RNG_BaseInit !****************************************************************************** FUNCTION Jsf64RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf64RNG ), INTENT ( INOUT ) :: RNG !! 'Jsf64RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: E ! FLOW E = RNG % A - RotateLeft ( RNG % B , 7 ) RNG % A = IEOR ( RNG % B , RotateLeft ( RNG % C , 13 )) RNG % B = RNG % C + RotateLeft ( RNG % D , 37 ) RNG % C = RNG % D + E RNG % D = E + RNG % A RandNum = RNG % D RETURN END FUNCTION Jsf64RNG_NextLong !****************************************************************************** FUNCTION Jsf64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf64RNG ), INTENT ( IN ) :: RNG !! 'Jsf64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Jsf64RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Jsf64RNG_GetName !****************************************************************************** FUNCTION Jsf64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf64RNG ), INTENT ( IN ) :: RNG !! 'Jsf64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Jsf64RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Jsf64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_jsf64rng.f90.html"},{"title":"MClass_PcgMcg32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_PcgMcg32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *PcgMcg32RNG* type and its related routines. !   The *PcgMcg32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *PcgMcg32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on algorithms from the Permuted !   Congruential Generator (PCG) family that use an internal 64-bit Multiplicative !   Congruential Generator (MCG) and output 32-bits per cycle. <br> !   The *PcgMcg32RNG* type can represent two PRNG classes: <br> !   - a PCG that is composed of a 64-bit MCG combined with the XSH-RR (xorshift; !     random rotate) output transformation, or <br> !   - a PCG that is composed of a 64-bit MCG combined with the XSH-RS (xorshift; !     random shift) output transformation. <br> !   By default, the random rotate (RR) transformation is employed.  However, the !   random shift (RS) transformation can be utilized by specifying an algorithm !   flag to true when initializing the generator.  The *PcgMcg32RNG* type has !   state size of 64 bits and a period of 2<sup>62</sup>. <br> !   It is important to note that the *PcgMcg32* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.pcg-random.org/\"> !       PCG, A Family of Better Random Number Generators.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/PcgMcgXshRr32.html\"> !       Apache Commons RNG: Class PcgMcgXshRr32</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/PcgMcgXshRs32.html\"> !       Apache Commons RNG: Class PcgMcgXshRs32</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: PcgMcg32RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *PcgMcg32RNG* type is an *Integer* PRNG type based on algorithms from !  the Permuted Congruential Generator (PCG) family that use an internal 64-bit !  Multiplicative Congruential Generator (MCG) and output 32-bits per cycle. TYPE , EXTENDS ( IntegerRNG ) :: PcgMcg32RNG PRIVATE ! The state of the MCG tSInt64 :: State ! algorithm flag tLogical :: UseRandShift = FalseVal ! function to transform the state PROCEDURE ( Transform ), NOPASS , POINTER :: Permute => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitLongSeeds => PcgMcg32RNG_InitLongSeeds PROCEDURE , PRIVATE :: InitWithFlag => PcgMcg32RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => PcgMcg32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => PcgMcg32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => PcgMcg32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => PcgMcg32RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: PcgMcg32RNG_Finalization ! --------------------------------------------------------------------- END TYPE PcgMcg32RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Transform ( Input ) RESULT ( Output ) IMPORT tSInt64 , INTENT ( IN ) :: Input tSInt32 :: Output END FUNCTION Transform END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE PcgMcg32RNG_InitWithFlag ( RNG , UseRandShift , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'PcgMcg32RNG' object CLASS ( PcgMcg32RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - true, the PCG generator is composed of a 64-bit LCG combined with !   the XSH-RS (xorshift; random shift) output transformation. <br> ! - false, the PCG generator is composed of a 64-bit LCG combined with !   the XSH-RR (xorshift; random rotate) output transformation. tLogical , INTENT ( IN ) :: UseRandShift !% optional 32-bit integer seed(s) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set algorithm flag RNG % UseRandShift = UseRandShift IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE PcgMcg32RNG_InitWithFlag !****************************************************************************** SUBROUTINE PcgMcg32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified 32-bit integer seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgMcg32RNG ), INTENT ( INOUT ) :: RNG !! 'PcgMcg32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IntSeed ( 2 ) tSInt64 :: LngSeed ! FLOW ! fill 32-bit integer seeds CALL Fill_State ( Seed , IntSeed ) ! get 64-bit integer seeds LngSeed = IOR ( IAND ( ToInt64 ( IntSeed ( 1 )), MaskL ), SHIFTL ( ToInt64 ( IntSeed ( 2 )), 32 )) & + GOLDEN_RATIO_64 ! initialize with a 64-bit integer seed CALL RNG % InitLongSeeds ( LngSeed ) RETURN END SUBROUTINE PcgMcg32RNG_BaseInit !****************************************************************************** SUBROUTINE PcgMcg32RNG_InitLongSeeds ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'PcgMcg32RNG' object with a 64-bit integer seed. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'PcgMcg32RNG' object CLASS ( PcgMcg32RNG ), INTENT ( INOUT ) :: RNG !% long seed tSInt64 , INTENT ( IN ) :: Seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set pointer to transformation function IF ( RNG % UseRandShift ) THEN RNG % Permute => Transform_Shift ELSE RNG % Permute => Transform_Rotate END IF ! A seed of zero will result in a non-functional MCG; it must be odd for a maximal ! period MCG. The multiplication factor always sets the 2 least-significant bits to 1 ! if they are already 1 so these are explicitly set. Bit k (zero-based) will have ! period 2&#94;(k-1) starting from bit 2 with a period of 1. Bit 63 has period 2&#94;62. RNG % State = IOR ( Seed , 3_kInt64 ) RETURN END SUBROUTINE PcgMcg32RNG_InitLongSeeds !****************************************************************************** FUNCTION PcgMcg32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgMcg32RNG ), INTENT ( INOUT ) :: RNG !! 'PcgMcg32RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: X ! FLOW X = RNG % State RNG % State = Bump ( RNG , RNG % State ) RandNum = RNG % Permute ( X ) RETURN END FUNCTION PcgMcg32RNG_NextInteger !****************************************************************************** FUNCTION PcgMcg32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgMcg32RNG ), INTENT ( IN ) :: RNG !! 'PcgMcg32RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( RNG % UseRandShift ) THEN Name = 'PcgMcg32_XSH_RS_RNG' ELSE Name = 'PcgMcg32_XSH_RR_RNG' END IF RETURN END FUNCTION PcgMcg32RNG_GetName !****************************************************************************** FUNCTION PcgMcg32RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgMcg32RNG ), INTENT ( IN ) :: RNG !! 'PcgMcg32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 2 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION PcgMcg32RNG_GetSeedSize !****************************************************************************** FUNCTION Bump ( RNG , Input ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To provide the next state of the MCG. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgMcg32RNG ), INTENT ( IN ) :: RNG !! 'PcgMcg32RNG' object tSInt64 , INTENT ( IN ) :: Input !! current state tSInt64 :: Output !! next state !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = Input * 6364136223846793005_kInt64 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Bump !****************************************************************************** FUNCTION Transform_Rotate ( Input ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To transform the 64-bit state of the generator to a 32-bit output !  using random rotate. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( IN ) :: Input !! current state tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Count ! FLOW Count = ToInt32 ( SHIFTR ( Input , 59 )) Output = RotateRight ( ToInt32 ( SHIFTR ( IEOR ( Input , SHIFTR ( Input , 18 )), 27 )), Count ) RETURN END FUNCTION Transform_Rotate !****************************************************************************** FUNCTION Transform_Shift ( Input ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To transform the 64-bit state of the generator to a 32-bit output !  using random shift. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( IN ) :: Input !! current state tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Count ! FLOW Count = ToInt32 ( SHIFTR ( Input , 61 )) Output = ToInt32 ( SHIFTR ( IEOR ( Input , SHIFTR ( Input , 22 )), 22 + Count )) RETURN END FUNCTION Transform_Shift !****************************************************************************** SUBROUTINE PcgMcg32RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'PcgMcg32RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( PcgMcg32RNG ), INTENT ( INOUT ) :: RNG !! 'PcgMcg32RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % Permute ) RETURN END SUBROUTINE PcgMcg32RNG_Finalization !****************************************************************************** END MODULE MClass_PcgMcg32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_pcgmcg32rng.f90.html"},{"title":"MClass_L64X1024RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L64X1024RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L64X1024RNG* type and its related routines. !   The *L64X1024RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L64X1024RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L64X1024* algorithm.  The !   *L64X1024* algorithm is a specific member of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L64X1024RNG* type employs a 64-bit LCG, a 1024-bit XBG and a mixing function !   where its memory footprint is 1184 bits and its period is roughly 2<sup>1088</sup>. <br> !   In addition to common operations of a PRNG, the *L64X1024RNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform.  <br> !   It is important to note that the *L64X1024* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L64X1024RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: tSInt32 , PARAMETER :: N = 16 ! length of array X !** DERIVED TYPE DEFINITIONS !> The *L64X1024RNG* type is a *Long* PRNG type based on the *L64X1024* !  algorithms, which are specific members of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L64X1024RNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0 ... X15 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: S tSInt64 :: X ( 0 : N - 1 ) tSInt32 :: P CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64X1024RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64X1024RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64X1024RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64X1024RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64X1024RNG_Split ! --------------------------------------------------------------------- END TYPE L64X1024RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L64X1024RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L64X1024RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X1024RNG ), INTENT ( INOUT ) :: RNG !! 'L64X1024RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: InitSeed , X ( 0 : 15 ), XSeed tIndex :: I ! FLOW ! set initial seed InitSeed = IEOR ( Seed ( 1 ), SILVER_RATIO_64 ) ! set parameters as follows: ! The seed is hashed by Mix_Murmur to produce the 'A' parameter. ! The seed is hashed by Mix_Stafford_13 to produce the initial 'X0', ! which will then be used to produce the first generated value. ! Then, the other 'X' values are filled in as if by a SplitMix PRNG ! with GOLDEN_RATIO_64 as the gamma value and Mix_Stafford_13 as the mixer. XSeed = InitSeed DO I = 0 , 15 X ( I ) = Mix_Stafford_13 ( XSeed ) XSeed = XSeed + GOLDEN_RATIO_64 END DO CALL L64X1024RNG_SetParameters ( RNG , Mix_Murmur ( InitSeed ), 1_kInt64 , X ) RETURN END SUBROUTINE L64X1024RNG_BaseInit !****************************************************************************** FUNCTION L64X1024RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X1024RNG ), INTENT ( INOUT ) :: RNG !! 'L64X1024RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Multiplier used in the LCG portion of the algorithm. ! Chosen based on research by Sebastiano Vigna and Guy Steele (2019). ! The spectral scores for dimensions 2 through 8 for the multiplier 0xd1342543de82ef95L ! are [0.958602, 0.937479, 0.870757, 0.822326, 0.820405, 0.813065, 0.760215]. tSInt64 , PARAMETER :: M = ToInt64 ( Z 'D1342543DE82EF95' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S15 tSInt32 :: Q ! FLOW ! First part of xoroshiro1024: fetch array data Q = RNG % P RNG % P = IAND ( RNG % P + 1 , N - 1 ) S0 = RNG % X ( RNG % P ) S15 = RNG % X ( Q ) ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % S + S0 ) ! Update the LCG subgenerator RNG % S = M * RNG % S + RNG % A ! Second part of xoroshiro1024: update array data S15 = IEOR ( S15 , S0 ) RNG % X ( Q ) = IEOR ( IEOR ( RotateLeft ( S0 , 25 ), S15 ), SHIFTL ( S15 , 27 )) RNG % X ( RNG % P ) = RotateLeft ( S15 , 36 ) RETURN END FUNCTION L64X1024RNG_NextLong !****************************************************************************** FUNCTION L64X1024RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X1024RNG ), INTENT ( IN ) :: RNG !! 'L64X1024RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'L64X1024RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L64X1024RNG_GetName !****************************************************************************** FUNCTION L64X1024RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X1024RNG ), INTENT ( IN ) :: RNG !! 'L64X1024RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L64X1024RNG_GetSeedSize !****************************************************************************** SUBROUTINE L64X1024RNG_SetParameters ( RNG , A , S , X ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To set parameters of the object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L64X1024RNG ), INTENT ( INOUT ) :: RNG tSInt64 , INTENT ( IN ) :: A tSInt64 , INTENT ( IN ) :: S tSInt64 , INTENT ( IN ) :: X ( 0 : 15 ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: V , Cond tIndex :: I ! FLOW ! initialize P RNG % P = N - 1 ! Force a to be odd RNG % A = IOR ( A , 1_kInt64 ) RNG % S = S ! check if all Xs are zero or not Cond = IOR ( X ( 0 ), X ( 1 )) DO I = 2 , 15 Cond = IOR ( Cond , X ( I )) END DO IF ( Cond == 0 ) THEN ! If all Xs are zero, we must choose nonzero values. V = S + GOLDEN_RATIO_64 ! At least 15 of the 16 values generated here will be nonzero. RNG % X ( 0 ) = Mix_Stafford_13 ( V ) DO I = 1 , 15 V = V + GOLDEN_RATIO_64 RNG % X ( I ) = Mix_Stafford_13 ( V ) END DO ELSE RNG % X ( 0 : 15 ) = X ( 0 : 15 ) END IF RETURN END SUBROUTINE L64X1024RNG_SetParameters !****************************************************************************** FUNCTION L64X1024RNG_Split ( RNG , Brine ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize and return a new 'L64X1024RNG' object that shares no mutable !  state with this object. However, with very high probability, the set of !  values collectively generated by the two objects has the same statistical !  properties as if the same quantity of values were generated by a single !  thread using a single object.  Either or both of the two objects may be !  further split using this routine, and the same expected statistical !  properties apply to the entire set of generators constructed by such !  recursive splitting. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L64X1024RNG' object CLASS ( L64X1024RNG ), INTENT ( INOUT ) :: RNG !> a long value, of which the low 63 bits provide a unique id among calls !  to this routine for constructing a single series of Generator objects. tSInt64 , OPTIONAL , INTENT ( IN ) :: Brine !% new 'L64X1024RNG' object TYPE ( L64X1024RNG ) :: NewRNG !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Salt , S , X ( 0 : 15 ) tIndex :: I ! FLOW ! check optional input IF ( PRESENT ( Brine )) THEN Salt = Brine ELSE Salt = RNG % NextLong () END IF ! copy initial seeds for re-initialization CALL RNG % CopySeed ( NewRNG ) ! set parameters by picking a new object at random but use the 63 bits ! of the salt for 'A' S = RNG % NextLong () DO I = 0 , 15 X ( I ) = RNG % NextLong () END DO CALL L64X1024RNG_SetParameters ( NewRNG , SHIFTL ( Salt , 1 ), S , X ) RETURN END FUNCTION L64X1024RNG_Split !****************************************************************************** END MODULE MClass_L64X1024RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l64x1024rng.f90.html"},{"title":"MClass_WyRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_WyRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *WyRNG* type and its related routines. !   The *WyRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *WyRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on a combination of WyRand !   and WyHash64 algorithms by Wang Yi.  It has a state size of 128-bits. <br> !   It is important to note that the *Wy* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://github.com/wangyi-fudan/wyhash\">WYHASH and WYRAND - The FASTEST !       QUALITY hash function, random number generators (PRNG) and hash map.</a> <br> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : U128_Multiply => UMul128 USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: WyRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! M and N parameters for \"wyhash_final_version_3\" !    tSInt64, PARAMETER  ::M = ToInt64(Z'A0761D6478BD642F') !    tSInt64, PARAMETER  ::N = ToInt64(Z'E7037ED1A0B428DB') ! M and N parameters for \"wyhash_final_version_4_2\" tSInt64 , PARAMETER :: M = ToInt64 ( Z '2D358DCCAA6C78A5' ) tSInt64 , PARAMETER :: N = ToInt64 ( Z '8BB84B93962EACC9' ) !** DERIVED TYPE DEFINITIONS !> The *WyRNG* type is a *Long* PRNG type based on a combination of ! WyRand and WyHash64 algorithms by Wang Yi. TYPE , EXTENDS ( LongRNG ) :: WyRNG PRIVATE ! tSInt64     :: State1 = ToInt64(Z'8EBC6AF09C88C6E3') ! tSInt64     :: State2 = ToInt64(Z'589965CC75374CC') tSInt64 :: State1 = ToInt64 ( Z '4B33A62ED433D4A3' ) tSInt64 :: State2 = ToInt64 ( Z '4D5A2DA51DE1AA47' ) tSInt32 :: Counter = 0 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => WyRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => WyRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => WyRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => WyRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE WyRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE WyRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'WyRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( WyRNG ), INTENT ( INOUT ) :: RNG !! 'WyRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I tSInt64 :: RandNum ! FLOW ! set initial seed SELECT CASE ( SIZE ( Seed )) CASE ( 1 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) CASE ( 2 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) END SELECT ! warming up before using the output DO I = 1 , 20 RandNum = RNG % NextLong () END DO RETURN END SUBROUTINE WyRNG_BaseInit !****************************************************************************** FUNCTION WyRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( WyRNG ), INTENT ( INOUT ) :: RNG !! 'WyRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! update counter RNG % Counter = RNG % Counter + 1 ! update states and compute random number based on counter SELECT CASE ( RNG % Counter ) CASE ( 1 ) RandNum = WyHash64 ( RNG % State1 , RNG % State2 ) CASE ( 2 ) RandNum = WyRand ( RNG % State1 ) CASE ( 3 ) RandNum = WyHash64 ( RNG % State2 , RNG % State1 ) CASE ( 4 ) RandNum = WyRand ( RNG % State2 ) ! wrap around RNG % Counter = 0 END SELECT RETURN END FUNCTION WyRNG_NextLong !****************************************************************************** FUNCTION WyRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( WyRNG ), INTENT ( IN ) :: RNG !! 'WyRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'WyRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION WyRNG_GetName !****************************************************************************** FUNCTION WyRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( WyRNG ), INTENT ( IN ) :: RNG !! 'WyRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 2 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION WyRNG_GetSeedSize !****************************************************************************** FUNCTION WyRand ( Seed ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To pseudo random number based on the 'WyRand' algorithm. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( INOUT ) :: Seed tUInt64 :: RandNum !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! update Seed Seed = Seed + M ! perform multiplication and mixing RandNum = WyMix ( Seed , IEOR ( Seed , N )) RETURN END FUNCTION WyRand !****************************************************************************** FUNCTION WyHash64 ( A , B ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return deterministic pseudo random numbers that can pass BigCrush and PractRand. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( INOUT ) :: A , B tUInt64 :: RandNum !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! update A and B A = IEOR ( A , M ) B = IEOR ( B , N ) ! perform 128-bit multiplication (WyMum) CALL WyMum ( A , B ) ! perform multiplication and mixing RandNum = WyMix ( IEOR ( A , M ), IEOR ( B , N )) RETURN END FUNCTION WyHash64 !****************************************************************************** FUNCTION WyMix ( A , B ) RESULT ( MixNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform multiplication and mixing of the specified input. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: A , B tUInt64 :: MixNum !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: OutLo , OutHi ! FLOW ! get input OutLo = A OutHi = B ! perform 128-bit multiplication (WyMum) CALL WyMum ( OutLo , OutHi ) ! mixing the output MixNum = IEOR ( OutLo , OutHi ) RETURN END FUNCTION WyMix !****************************************************************************** SUBROUTINE WyMum ( A , B ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform multiplication of the specified input. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( INOUT ) :: A , B !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: OutLo , OutHi ! FLOW ! perform 128-bit multiplication (WyMum) CALL U128_Multiply ( A , B , OutLo , OutHi ) ! note: the next two statements are for WYHASH_CONDOM > 1 ! -> extra protection against entropy loss (probability=2&#94;-63), !    aka. \"blind multiplication\" A = IEOR ( A , OutLo ) B = IEOR ( B , OutHi ) RETURN END SUBROUTINE WyMum !****************************************************************************** END MODULE MClass_WyRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_wyrng.f90.html"},{"title":"MClass_Kiss64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Kiss64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Kiss64RNG* type and its related routines. !   The *Kiss64RNG* type is an *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Long* PRNG type.  <br> !   In particular, the *Kiss64RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the 64-bit *KISS* (Keep it !   Simple Stupid) algorithm by George Marsaglia. <br> !   The 64-bit *KISS* algorithm consists of a combination of four sub-generators, !   each with 64 bits of state, of three kinds: <br> !   - one linear congruential generator modulo 2<sup>64</sup> <br> !   - one general binary linear generator over the vector space GF(2)<sup>64</sup> <br> !   - two multiply-with-carry generators modulo 2<sup>32</sup>, with different !     parameters <br> !   The four generators are updated independently, and their states are combined !   to form a sequence of 64-bit output words with period of about 2<sup>250</sup>. <br> !   It is important to note that the *Kiss64* PRNG requires an explicit !   initialization by first calling the *BaseInit* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://en.wikipedia.org/wiki/KISS_(algorithm)\"> !       KISS (algorithm)</a> <br> !   [2] <a href=\"http://www0.cs.ucl.ac.uk/staff/d.jones/GoodPracticeRNG.pdf\"> !       David Jones.  Good Practice in (Pseudo) Random Number Generation for !       Bioinformatics Applications.</a> <br> !   [3] <a href=\"https://github.com/jenetics/prngine/blob/master/prngine/src/main/java/io/jenetics/prngine/KISS64Random.java\"> !       PRNGine - Pseudo Random Number Engines for Monte Carlo simulations: !       Class KISS64Random</a> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : ToUnsignedLong USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Kiss64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: !% a mask used for masking 32 upper bits of a 64-bit integer tSInt64 , PARAMETER , PUBLIC :: MaskL = ToInt64 ( Z '00000000FFFFFFFF' ) !** DERIVED TYPE DEFINITIONS !> The *Kiss64RNG* type is a *Long* PRNG type based on the *KISS* !  (Keep it Simple Stupid) algorithm by George Marsaglia. TYPE , EXTENDS ( LongRNG ) :: Kiss64RNG PRIVATE !% state of the linear congruential generator tSInt64 :: X = 123456789123_kInt64 !% state of the xor-shift generator tSInt64 :: Y = 987654321987_kInt64 !% states and carries of the multiply-with-carry generators tSInt32 :: Z1 = 43219876_kInt32 tSInt32 :: C1 = 6543217_kInt32 tSInt32 :: Z2 = 21987643_kInt32 tSInt32 :: C2 = 1732654_kInt32 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *BaseInit* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Kiss64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Kiss64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Kiss64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Kiss64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Kiss64RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Kiss64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Kiss64RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss64RNG ), INTENT ( INOUT ) :: RNG !! 'Kiss64RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I tSInt64 :: Wrk ! FLOW ! set initial seeds SELECT CASE ( SIZE ( Seed )) CASE ( 1 ) RNG % X = Seed ( 1 ) CASE ( 2 ) RNG % X = Seed ( 1 ) RNG % Y = Seed ( 2 ) CASE ( 3 ) RNG % X = Seed ( 1 ) RNG % Y = Seed ( 2 ) RNG % Z1 = ToInt32 ( SHIFTR ( Seed ( 3 ), 32 )) RNG % C1 = ToInt32 ( IAND ( Seed ( 3 ), MaskL )) CASE ( 4 ) RNG % X = Seed ( 1 ) RNG % Y = Seed ( 2 ) RNG % Z1 = ToInt32 ( SHIFTR ( Seed ( 3 ), 32 )) RNG % C1 = ToInt32 ( IAND ( Seed ( 3 ), MaskL )) RNG % Z2 = ToInt32 ( SHIFTR ( Seed ( 4 ), 32 )) RNG % C2 = ToInt32 ( IAND ( Seed ( 4 ), MaskL )) END SELECT ! warming up before using the output DO I = 1 , 20 Wrk = RNG % NextLong () END DO RETURN END SUBROUTINE Kiss64RNG_BaseInit !****************************************************************************** FUNCTION Kiss64RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss64RNG ), INTENT ( INOUT ) :: RNG !! 'Kiss64RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: A = 1490024343005336237_kInt64 ! = ToInt64(Z'14ADA13ED78492AD') tSInt64 , PARAMETER :: B = 123456789_kInt64 tSInt64 , PARAMETER :: M1 = 4294584393_kInt64 tSInt64 , PARAMETER :: M2 = 4246477509_kInt64 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: T ! FLOW ! congruential generator RNG % X = A * RNG % X + B ! xor-shift generator RNG % Y = IEOR ( RNG % Y , SHIFTL ( RNG % Y , 21 )) RNG % Y = IEOR ( RNG % Y , SHIFTR ( RNG % Y , 17 )) RNG % Y = IEOR ( RNG % Y , SHIFTL ( RNG % Y , 30 )) ! multiply-with-carry generator #1 T = M1 * RNG % Z1 + RNG % C1 RNG % C1 = ToInt32 ( SHIFTR ( T , 32 )) ! get upper 32 bits RNG % Z1 = ToInt32 ( IAND ( T , MaskL )) ! get lower 32 bits ! multiply-with-carry generator #2 T = M2 * RNG % Z2 + RNG % C2 RNG % C2 = ToInt32 ( SHIFTR ( T , 32 )) ! get upper 32 bits RNG % Z2 = ToInt32 ( IAND ( T , MaskL )) ! get lower 32 bits ! KISS generator RandNum = RNG % X + RNG % Y + RNG % Z1 + SHIFTL ( ToUnsignedLong ( RNG % Z2 ), 32 ) RETURN END FUNCTION Kiss64RNG_NextLong !****************************************************************************** FUNCTION Kiss64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss64RNG ), INTENT ( IN ) :: RNG !! 'Kiss64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Kiss64RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Kiss64RNG_GetName !****************************************************************************** FUNCTION Kiss64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss64RNG ), INTENT ( IN ) :: RNG !! 'Kiss64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 4 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Kiss64RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Kiss64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_kiss64rng.f90.html"},{"title":"MClass_IsaacRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_IsaccRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *IsaccRNG* type and its related routines. !   The *IsaccRNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *IsaccRNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the ISAAC (Indirection, !   Shift, Accumulate, Add, and Count) algorithm.  the *IsaccRNG* type is !   a fast cryptographic pseudo-random number generator due to the fact !   that the ISAAC algorithm  has been designed to be cryptographically !   secure and is inspired by the stream cipher *RC4*. <br> !   Cycles of generated random sequences are guaranteed to be at least !   2<sup>40</sup> values long, and they are 2<sup>8295</sup> values long !   on average.   The results are uniformly distributed, unbiased, and !   unpredictable unless the seed is known. <br> !   It is important to note that the *ISAAC* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"http://burtleburtle.net/bob/rand/isaacafa.html\">ISAAC: a fast !       cryptographic pseudo-random number generator</a> <br> !   [2] <a href=\"https://en.wikipedia.org/wiki/ISAAC_(cipher)\">ISAAC (cipher) !       - Wikipedia</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/ISAACRandom.html\"> !       Apache Commons RNG: Class ISAACRandom</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: IsaccRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Log of size of Rsl and Mem. tSInt32 , PARAMETER :: L_SIZE = 8 ! Size of Rsl and Mem. tSInt32 , PARAMETER :: N_SIZE = SHIFTL ( 1 , L_SIZE ) ! Half-size of rsl() and mem(). tSInt32 , PARAMETER :: H_SIZE = SHIFTA ( N_SIZE , 1 ) ! For pseudo-random lookup. tSInt32 , PARAMETER :: MASK = SHIFTL ( N_SIZE - 1 , 2 ) ! The golden ratio. tSInt32 , PARAMETER :: GLD_RATIO = ToInt32 ( Z '9E3779B9' ) !** DERIVED TYPE DEFINITIONS !> The *IsaccRNG* type is an *Integer* PRNG type based on the *ISAAC* !  (Indirection, Shift, Accumulate, Add, and Count) algorithm. TYPE , EXTENDS ( IntegerRNG ) :: IsaccRNG PRIVATE ! The results given to the user. tSInt32 :: Rsl ( 0 : N_SIZE - 1 ) ! The internal state. tSInt32 :: Mem ( 0 : N_SIZE - 1 ) ! Count through the results in rsl(). tSInt32 :: Count ! Accumulator. tSInt32 :: IsaacA ! The last result. tSInt32 :: IsaacB ! Counter, guarantees cycle is at least 2&#94;40. tSInt32 :: IsaacC ! Service variable. tSInt32 :: IsaacX ! Service variable. tSInt32 :: IsaacI ! Service variable. tSInt32 :: IsaacJ CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => IsaccRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => IsaccRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => IsaccRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => IsaccRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE IsaccRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE IsaccRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'IsaccRNG' object with specified seed(s) !  where the maximum seed size is 256. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IsaccRNG ), INTENT ( INOUT ) :: RNG !! 'IsaccRNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seeds !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , PARAMETER :: CPar = ToInt64 ( Z '000000006C078965' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 0 : N_SIZE - 1 ) tSInt32 :: MinLen , SeedLen tIndex :: J tSInt64 :: K ! FLOW ! set initial seed SeedLen = SIZE ( Seed ) MinLen = MIN ( SeedLen , N_SIZE ) Seed0 ( 0 : MinLen - 1 ) = Seed ( 1 : MinLen ) ! fill the rest of the seed IF ( SeedLen < N_SIZE ) THEN DO J = SeedLen , N_SIZE - 1 K = Seed0 ( J - SeedLen ) Seed0 ( J ) = ToInt32 ( IAND ( CPar * IEOR ( K , SHIFTA ( K , 30 )) + J , MaskL )) END DO END IF RNG % Rsl = Seed0 CALL Initialize_State () RETURN CONTAINS SUBROUTINE Initialize_State () !** PURPOSE OF THIS SUBROUTINE: ! To initialize or re-initialize the states of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: ! na !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Array ( 0 : 7 ) tSInt32 :: I , J ! FLOW RNG % IsaacA = 0 RNG % IsaacB = 0 RNG % IsaacC = 0 Array = GLD_RATIO DO J = 0 , 3 CALL Shuffle ( Array ) END DO ! fill in mem() with messy stuff DO J = 0 , N_SIZE - 1 , 8 Array ( 0 : 7 ) = Array ( 0 : 7 ) + RNG % Rsl ( J : J + 7 ) CALL Shuffle ( Array ) ! set state RNG % Mem ( J : J + 7 ) = Array ( 0 : 7 ) END DO ! second pass makes all of seed affect all of mem DO J = 0 , N_SIZE - 1 , 8 Array ( 0 : 7 ) = Array ( 0 : 7 ) + RNG % Mem ( J : J + 7 ) CALL Shuffle ( Array ) ! set state RNG % Mem ( J : J + 7 ) = Array ( 0 : 7 ) END DO CALL ISAAC_Generate ( RNG ) RNG % Count = N_SIZE - 1 RETURN END SUBROUTINE Initialize_State !****************************************************************************** SUBROUTINE Shuffle ( Array ) !** PURPOSE OF THIS SUBROUTINE: ! To shuffle the specified array !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( INOUT ) :: Array ( 0 :) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Array ( 0 ) = IEOR ( Array ( 0 ), SHIFTL ( Array ( 1 ), 11 )) Array ( 3 ) = Array ( 3 ) + Array ( 0 ) Array ( 1 ) = Array ( 1 ) + Array ( 2 ) Array ( 1 ) = IEOR ( Array ( 1 ), SHIFTR ( Array ( 2 ), 2 )) Array ( 4 ) = Array ( 4 ) + Array ( 1 ) Array ( 2 ) = Array ( 2 ) + Array ( 3 ) Array ( 2 ) = IEOR ( Array ( 2 ), SHIFTL ( Array ( 3 ), 8 )) Array ( 5 ) = Array ( 5 ) + Array ( 2 ) Array ( 3 ) = Array ( 3 ) + Array ( 4 ) Array ( 3 ) = IEOR ( Array ( 3 ), SHIFTR ( Array ( 4 ), 16 )) Array ( 6 ) = Array ( 6 ) + Array ( 3 ) Array ( 4 ) = Array ( 4 ) + Array ( 5 ) Array ( 4 ) = IEOR ( Array ( 4 ), SHIFTL ( Array ( 5 ), 10 )) Array ( 7 ) = Array ( 7 ) + Array ( 4 ) Array ( 5 ) = Array ( 5 ) + Array ( 6 ) Array ( 5 ) = IEOR ( Array ( 5 ), SHIFTR ( Array ( 6 ), 4 )) Array ( 0 ) = Array ( 0 ) + Array ( 5 ) Array ( 6 ) = Array ( 6 ) + Array ( 7 ) Array ( 6 ) = IEOR ( Array ( 6 ), SHIFTL ( Array ( 7 ), 8 )) Array ( 1 ) = Array ( 1 ) + Array ( 6 ) Array ( 7 ) = Array ( 7 ) + Array ( 0 ) Array ( 7 ) = IEOR ( Array ( 7 ), SHIFTR ( Array ( 0 ), 9 )) Array ( 2 ) = Array ( 2 ) + Array ( 7 ) Array ( 0 ) = Array ( 0 ) + Array ( 1 ) RETURN END SUBROUTINE Shuffle !****************************************************************************** END SUBROUTINE IsaccRNG_BaseInit !****************************************************************************** FUNCTION IsaccRNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IsaccRNG ), INTENT ( INOUT ) :: RNG !! 'IsaccRNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( RNG % Count < 0 ) THEN CALL ISAAC_Generate ( RNG ) RNG % Count = N_SIZE - 1 END IF RandNum = RNG % Rsl ( RNG % Count ) RNG % Count = RNG % Count - 1 RETURN END FUNCTION IsaccRNG_NextInteger !****************************************************************************** FUNCTION IsaccRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IsaccRNG ), INTENT ( IN ) :: RNG !! 'IsaccRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'IsaccRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION IsaccRNG_GetName !****************************************************************************** FUNCTION IsaccRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IsaccRNG ), INTENT ( IN ) :: RNG !! 'IsaccRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = N_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION IsaccRNG_GetSeedSize !****************************************************************************** SUBROUTINE ISAAC_Generate ( RNG ) !** PURPOSE OF THIS SUBROUTINE: ! To generate 256 results. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IsaccRNG ), INTENT ( INOUT ) :: RNG ! 'IsaccRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RNG % IsaacI = 0 RNG % IsaacJ = H_SIZE RNG % IsaacC = RNG % IsaacC + 1 RNG % IsaacB = RNG % IsaacB + RNG % IsaacC DO WHILE ( RNG % IsaacI < H_SIZE ) CALL ISAAC_II () END DO RNG % IsaacJ = 0 DO WHILE ( RNG % IsaacJ < H_SIZE ) CALL ISAAC_II () END DO RETURN CONTAINS SUBROUTINE ISAAC_II () ! Intermediate internal loop RNG % IsaacX = RNG % Mem ( RNG % IsaacI ) RNG % IsaacA = IEOR ( RNG % IsaacA , SHIFTL ( RNG % IsaacA , 13 )) RNG % IsaacA = RNG % IsaacA + RNG % Mem ( RNG % IsaacJ ) RNG % IsaacJ = RNG % IsaacJ + 1 CALL ISAAC_III () RNG % IsaacX = RNG % Mem ( RNG % IsaacI ) RNG % IsaacA = IEOR ( RNG % IsaacA , SHIFTR ( RNG % IsaacA , 6 )) RNG % IsaacA = RNG % IsaacA + RNG % Mem ( RNG % IsaacJ ) RNG % IsaacJ = RNG % IsaacJ + 1 CALL ISAAC_III () RNG % IsaacX = RNG % Mem ( RNG % IsaacI ) RNG % IsaacA = IEOR ( RNG % IsaacA , SHIFTL ( RNG % IsaacA , 2 )) RNG % IsaacA = RNG % IsaacA + RNG % Mem ( RNG % IsaacJ ) RNG % IsaacJ = RNG % IsaacJ + 1 CALL ISAAC_III () RNG % IsaacX = RNG % Mem ( RNG % IsaacI ) RNG % IsaacA = IEOR ( RNG % IsaacA , SHIFTR ( RNG % IsaacA , 16 )) RNG % IsaacA = RNG % IsaacA + RNG % Mem ( RNG % IsaacJ ) RNG % IsaacJ = RNG % IsaacJ + 1 CALL ISAAC_III () RETURN END SUBROUTINE ISAAC_II !****************************************************************************** SUBROUTINE ISAAC_III () ! Lowest level internal loop RNG % Mem ( RNG % IsaacI ) = RNG % Mem ( SHIFTA ( IAND ( RNG % IsaacX , MASK ), 2 )) + RNG % IsaacA + & RNG % IsaacB RNG % IsaacB = RNG % Mem ( SHIFTA ( IAND ( SHIFTA ( RNG % Mem ( RNG % IsaacI ), L_SIZE ), MASK ), 2 )) + & RNG % IsaacX RNG % Rsl ( RNG % IsaacI ) = RNG % IsaacB RNG % IsaacI = RNG % IsaacI + 1 RETURN END SUBROUTINE ISAAC_III !****************************************************************************** END SUBROUTINE ISAAC_Generate !****************************************************************************** END MODULE MClass_IsaccRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_isaacrng.f90.html"},{"title":"MClass_RanLuxRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_RanLuxRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *RanLuxRNG* type and its related routines. !   The *RanLuxRNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *RanLuxRNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the *RANLUX* algorithm !   by Martin Luscher. <br> !   Similar to the *RCARRY* algorithm, the *RANLUX* algorithm employs a !   subtract-with-borrow (SWB) algorithm with a period on the order of !   10<sup>171</sup>.  However, it throws away some of the numbers generated !   in order to eliminate correlations.  Therefore, the *RANLUX* algorithm !   trades execution speed for quality; by choosing a larger luxury setting !   one gets better random numbers slower. <br> !   The standard luxury levels provided are: <br> !   - Level 0  (p=24): equivalent to the original RCARRY of Marsaglia !     and Zaman, very long period, but fails many tests. <br> !   - Level 1  (p=48): considerable improvement in quality over level 0, !     now passes the gap test, but still fails spectral test. <br> !   - Level 2  (p=97): passes all known tests, but theoretically still !     defective. <br> !   - Level 3  (p=223): DEFAULT VALUE.  Any theoretically possible !     correlations have very small chance of being observed. <br> !   - Level 4  (p=389): highest possible luxury, all 24 bits chaotic. <br> !   The luxury level can be specified when initializing the generator. <br> !   It is important to note that the *RanLux* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.sciencedirect.com/science/article/abs/pii/001046559490233X\"> !       F. James. 1994.  RANLUX: A Fortran implementation of the high-quality !       pseudorandom number generator of Luscher.  Computer Physics Communications, !       79(1), pp. 111-114. </a> <br> !   [2] <a href=\"https://www.sciencedirect.com/science/article/abs/pii/0010465594902321\"> !       M. Luscher. 1994.  A portable high-quality random number generator for !       lattice field theory simulations.  Computer Physics Communications, 79(1), !       pp. 100-110. </a> <br> !   [3] <a href=\"https://projecteuclid.org/journals/annals-of-applied-probability/volume-1/issue-3/A-New-Class-of-Random-Number-Generators/10.1214/aoap/1177005878.full\"> !        G. Marsaglia and A. Zaman. 1991. A New Class of Random Number Generators. !        The Annals of Applied Probability, 1(3), pp. 462-480. </a> <br> !   [4] <a href=\"https://wp.csiro.au/alanmiller/random/luxury.f90\"> !        Luxury: a Fortran 90 module implementation of the RANLUX generator by Alan Miller. </a> !** USE STATEMENTS: USE MBase_Common USE MBase_SIntUtil , ONLY : MIN_I32 , MAX_I32 USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: RanLuxRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! maximum luxury level tSInt32 , PARAMETER :: MaxLevel = 4 ! default luxury level tSInt32 , PARAMETER :: LuxLevDflt = 3 ! default seed tSInt32 , PARAMETER :: SeedDflt = 314159265 ! 2**12 tRealSP , PARAMETER :: TwoPow12 = 409 6.0 ! 2**24 tSInt32 , PARAMETER :: ITwoPow24 = 2 ** 24 ! constant tSInt32 , PARAMETER :: ICons = 2147483563 ! number of additional random numbers that need to be 'thrown away' ! every 24 numbers is set using 'LuxLev' variable. tSInt32 , PARAMETER :: NdSkip ( 0 : MaxLevel ) = [ 0 , 24 , 73 , 199 , 365 ] tSInt32 , PARAMETER :: IGiga = 1000000000 !** DERIVED TYPE DEFINITIONS !> The *RanLuxRNG* type is an *Integer* PRNG type based on the *RANLUX* !  algorithm by Martin Luscher. TYPE , EXTENDS ( IntegerRNG ) :: RanLuxRNG PRIVATE !% indices tSInt32 :: I24 = 24 tSInt32 :: J24 = 10 !% next 24 inte4ger numbers tSInt32 :: Next ( 24 ) !> luxury level (0-4 or 24-1999) <br> !  - Value in the range [0, 4] corresponds to the standard luxury level. <br> !  - Value in the range [24, 1999] corresponds to the *p* (skipping) parameter . <br> tSInt32 :: LuxLev = LuxLevDflt !% how many numbers generate and skip tSInt32 :: NSkip !% the seed number used to initialize the generator tSInt32 :: JSeed !% numbers delivered to a user after the skipping tSInt32 :: In24 = 0 !% total generated numbers tSInt32 :: Kount = 0 !% state vector tRealSP :: State ( 24 ) !% carry tSInt32 :: Carry = 0.0 tSInt32 :: TwoM24 , TwoM12 CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithLuxLevel => RanLuxRNG_InitWithLuxLevel ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => RanLuxRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => RanLuxRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => RanLuxRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => RanLuxRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use default luxury level (= 3) <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use default luxury level (= 3) <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use specified luxury level (= 1) <br> !   --->    CALL RNG%Initialize(1) <br> !   ! initialize with seed(s); use specified luxury level (= 4) <br> !   --->    CALL RNG%Initialize(4, Seeds) <br> !  **Usage**: If specified, the luxury level should be between 0 and 4. GENERIC :: Initialize => InitWithLuxLevel ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *Default_NextSingle* is an overridden procedure. <br> !  Use the *NextSingle* method in place of the *Default_NextSingle* !  method to generate a 32-bit real number. PROCEDURE :: Default_NextSingle => RanLuxRNG_NextSingle ! --------------------------------------------------------------------- END TYPE RanLuxRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE RanLuxRNG_InitWithLuxLevel ( RNG , LuxLevel , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified luxury level.  Optionally, !  initial Seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'RanLuxRNG' object CLASS ( RanLuxRNG ), INTENT ( INOUT ) :: RNG !> luxury level (0-4 or 24-1999) <br> !  - Value in the range [0, 4] corresponds to the standard luxury level. <br> !  - Value in the range [24, 1999] corresponds to the *p* (skipping) parameter . <br> !  - Value out of valid ranges is set to a valid value. tSInt32 , INTENT ( IN ) :: LuxLevel !% optional 32-bit integer seed(s) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: ILux ! FLOW ! check and set luxury level IF ( LuxLevel < 0 ) THEN RNG % LuxLev = LuxLevDflt ELSEIF ( LuxLevel <= MaxLevel ) THEN RNG % LuxLev = LuxLevel ELSEIF (( LuxLevel < 24 ). OR .( LuxLevel > 2000 )) THEN RNG % LuxLev = MaxLevel ELSE RNG % LuxLev = LuxLevel DO ILux = 0 , MaxLevel IF ( LuxLevel == NdSkip ( ILux ) + 24 ) RNG % LuxLev = ILux END DO END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE RanLuxRNG_InitWithLuxLevel !****************************************************************************** SUBROUTINE RanLuxRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'RanLuxRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxRNG ), INTENT ( INOUT ) :: RNG !! 'RanLuxRNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I , ISeeds ( 24 ), K ! FLOW ! set JSeed IF ( Seed ( 1 ) <= 0 ) THEN RNG % JSeed = SeedDflt ELSE RNG % JSeed = Seed ( 1 ) END IF ! set NSkip IF ( RNG % LuxLev <= MaxLevel ) THEN RNG % NSkip = NdSkip ( RNG % LuxLev ) ELSE RNG % NSkip = RNG % LuxLev - 24 END IF ! set other working variables RNG % In24 = 0 RNG % Kount = 0 RNG % TwoM24 = 1.0 DO I = 1 , 24 RNG % TwoM24 = RNG % TwoM24 * 0.5 K = RNG % JSeed / 53668 RNG % JSeed = 40014 * ( RNG % JSeed - K * 53668 ) - K * 12211 IF ( RNG % JSeed < 0 ) RNG % JSeed = RNG % JSeed + ICons ISeeds ( I ) = MOD ( RNG % JSeed , ITwoPow24 ) END DO RNG % TwoM12 = RNG % TwoM24 * 409 6.0 DO I = 1 , 24 RNG % State ( I ) = REAL ( ISeeds ( I )) * RNG % TwoM24 RNG % Next ( I ) = I - 1 END DO RNG % Next ( 1 ) = 24 RNG % I24 = 24 RNG % J24 = 10 RNG % Carry = 0.0 IF ( RNG % State ( 24 ) == 0.0 ) RNG % Carry = RNG % TwoM24 RETURN END SUBROUTINE RanLuxRNG_BaseInit !****************************************************************************** FUNCTION RanLuxRNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxRNG ), INTENT ( INOUT ) :: RNG !! 'RanLuxRNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tRealSP , PARAMETER :: Diff = ToRealSP ( MAX_I32 ) - ToRealSP ( MIN_I32 ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = ToInt32 ( RNG % NextSingle () * Diff ) + MIN_I32 RETURN END FUNCTION RanLuxRNG_NextInteger !****************************************************************************** FUNCTION RanLuxRNG_NextSingle ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random real value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxRNG ), INTENT ( INOUT ) :: RNG !! 'RanLuxRNG' object tRealSP :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: ISkip tRealSP :: Uni ! FLOW ! subtract-with-borrow generator Uni = RNG % State ( RNG % J24 ) - RNG % State ( RNG % I24 ) - RNG % Carry IF ( Uni < 0.0 ) THEN Uni = Uni + 1.0 RNG % Carry = RNG % TwoM24 ELSE RNG % Carry = 0.0 END IF RNG % State ( RNG % I24 ) = Uni RNG % I24 = RNG % Next ( RNG % I24 ) RNG % J24 = RNG % Next ( RNG % J24 ) RandNum = Uni ! small numbers (with less than 12 \"significant\" bits) are \"padded\". IF ( Uni < RNG % TwoM12 ) RandNum = RandNum + RNG % TwoM24 * RNG % State ( RNG % J24 ) ! zero is forbidden in case someone takes a logarithm IF ( RandNum == 0.0 ) RandNum = RNG % TwoM24 * RNG % TwoM24 ! Skipping to luxury.  As proposed by Martin Luscher. RNG % In24 = RNG % In24 + 1 IF ( RNG % In24 == 24 ) THEN RNG % In24 = 0 RNG % Kount = RNG % Kount + RNG % NSkip DO ISkip = 1 , RNG % NSkip Uni = RNG % State ( RNG % J24 ) - RNG % State ( RNG % I24 ) - RNG % Carry IF ( Uni < 0.0 ) THEN Uni = Uni + 1.0 RNG % Carry = RNG % TwoM24 ELSE RNG % Carry = 0.0 END IF RNG % State ( RNG % I24 ) = Uni RNG % I24 = RNG % Next ( RNG % I24 ) RNG % J24 = RNG % Next ( RNG % J24 ) END DO END IF RNG % Kount = RNG % Kount + 1 IF ( RNG % Kount >= IGiga ) THEN RNG % Kount = RNG % Kount - IGiga END IF RETURN END FUNCTION RanLuxRNG_NextSingle !****************************************************************************** FUNCTION RanLuxRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxRNG ), INTENT ( IN ) :: RNG !! 'RanLuxRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'RanLuxRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION RanLuxRNG_GetName !****************************************************************************** FUNCTION RanLuxRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxRNG ), INTENT ( IN ) :: RNG !! 'RanLuxRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION RanLuxRNG_GetSeedSize !****************************************************************************** END MODULE MClass_RanLuxRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_ranluxrng.f90.html"},{"title":"MClass_IntegerRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_IntegerRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *IntegerRNG* type and its related routines. !   The *IntegerRNG* type is an abstract PRNG type that directly extends !   the *BaseRNG* type.   It defines additional methods for a so-called !   *Integer* PRNG.  It also provides default implementations of some !   deferred procedures required by a PRNG where other deferred procedures !   must be implemented by its subtypes.  <br> !   By design, the *IntegerRNG* type is provided as a base type for an !   *Integer* PRNG whose main purpose is to produce a 32-bit integer random !   number.   Therefore, all so-called *Integer* PRNGs are particularly !   required to implement the *NextIntegerImpl* deferred procedure. !** USE STATEMENTS: USE ISO_C_BINDING , ONLY : C_LOC , C_F_POINTER , C_NULL_PTR USE MBase_Common USE MBase_MemHandlers , ONLY : MemAlloc USE MBase_SInt128 USE MBase_UInt128 USE MClass_BaseRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS ! derived type PUBLIC :: IntegerRNG ! auxiliary function PUBLIC :: I128_To_R128 PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: !% a mask used for masking 32 upper bits of a 64-bit integer tSInt64 , PARAMETER , PUBLIC :: MaskL = ToInt64 ( Z '00000000FFFFFFFF' ) !** DERIVED TYPE DEFINITIONS !> The *IntegerRNG* type is an abstract PRNG type that directly extends !  the *BaseRNG* type.  It is provided to aid the implementation of an !  *Integer* PRNG whose main purpose is to produce a 32-bit integer random !  number.  Therefore, all so-called *Integer* PRNGs should extend from !  this base type. TYPE , ABSTRACT , EXTENDS ( BaseRNG ) :: IntegerRNG PRIVATE ! initial seed used to re-initialize the PRNG tSInt32 , ALLOCATABLE :: InitSeed (:) CONTAINS ! --------------------------------------------------------------------- ! -----               Additional Deferred Procedure               ----- ! --------------------------------------------------------------------- !> *BaseInit* is a binding name of the *InitBase* deferred procedure. <br> !  This procedure is intentionally employed as a base initialization that !  all other initialization procedures should call this procedure.  Also, !  it is intended to be used internally by an implementor, not a user. PROCEDURE ( InitBase ), DEFERRED :: BaseInit ! --------------------------------------------------------------------- ! -----               Deferred Procedures Implemented             ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE :: InitWOSeedImpl => Default_InitNoSeed !> *ReInit* is a deferred procedure. <br> !  **Type-Bound Subroutine**: ReInit <br> !  **Purpose**:  To reset the PRNG to its initial state. <br> !  **Usage**: <br> !   --->    CALL PRNG%ReInit() PROCEDURE :: ReInit => Default_ReInitialize !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Default_NextLong !> *NextI128Impl* is a deferred procedure. <br> !  Use the *NextI128* method in place of the *NextI128Impl* method !  to generate a signed 128-bit integer number. PROCEDURE :: NextI128Impl => Default_NextI128 !> *NextU128Impl* is a deferred procedure. <br> !  Use the *NextU128* method in place of the *NextU128Impl* method !  to generate an unsigned 128-bit integer number. PROCEDURE :: NextU128Impl => Default_NextU128 !> *NextDoubleImpl* is a deferred procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Default_NextDouble !> *NextQuadImpl* is a deferred procedure. <br> !  Use the *NextQuad* method in place of the *NextQuadImpl* method !  to generate a 128-bit real number. PROCEDURE :: NextQuadImpl => Default_NextQuad ! --------------------------------------------------------------------- ! -----               Public Procedures                           ----- ! --------------------------------------------------------------------- !> *InitWSeedImpl* is a procedure to initialize the generator with !  specified seed(s).  Instances of the PRNG initialized with the same !  seed(s) in the same program should  produce identical sequences of !  values. <br> !  Use the *Initialize* method in place of the *InitWSeedImpl* method to !  initialize the PRNG with specified seed(s). PROCEDURE :: InitWSeedImpl => Default_InitWithSeeds !> **Type-Bound Subroutine**: CopySeed <br> !  **Purpose**:  To copy the initial seeds of the source PRNG to !                that of the destination PRNG. <br> !  **Usage**: <br> !   --->    CALL SrcRNG%CopySeed(DstRNG) <br> !  **Usage**: This method is intended for internal use only. PROCEDURE :: CopySeed => Copy_InitSeed ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   --->    CALL RNG%Initialize() <br> !   --->    CALL RNG%Initialize(Seeds) GENERIC :: Initialize => InitWSeedImpl ! --------------------------------------------------------------------- END TYPE IntegerRNG !** INTERFACE DEFINITIONS: ! abstract interface for deferred procedure ABSTRACT INTERFACE !> InitBase is a deferred procedure to initialize the generator with !  specified seed(s).  Instances of the PRNG initialized with the same !  seed(s) in the same program should  produce identical sequences of !  values. <br> !  This procedure is intentionally employed as a base initialization that !  all other initialization procedures should call this procedure.  Also, !  it is intended to be used internally by an implementor, not a user. SUBROUTINE InitBase ( RNG , Seed ) IMPORT !% random number generator CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !> seed(s) whose size depends on the PRNG to be initialized tSInt32 , INTENT ( IN ) :: Seed (:) END SUBROUTINE END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Default_InitNoSeed ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize an 'IntegerRNG' object without specified seeds. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! allocate InitSeed used for re-initialization CALL MemAlloc ( RNG % InitSeed , [ 1_kIndex ]) ! set InitSeed RNG % InitSeed = GetRandomSeed32 () + GOLDEN_RATIO_32 ! initialize the PRNG CALL RNG % BaseInit ( RNG % InitSeed ) RETURN END SUBROUTINE Default_InitNoSeed !****************************************************************************** SUBROUTINE Default_InitWithSeeds ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize an 'IntegerRNG' object with specified seeds. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( SIZE ( Seed , KIND = kIndex ) >= 11_kIndex ) THEN ! allocate InitSeed used for re-initialization CALL MemAlloc ( RNG % InitSeed , [ SIZE ( Seed , KIND = kIndex )]) ! set InitSeed RNG % InitSeed = Seed ELSE ! +++ a zero-sized array -> no valuable information available +++ ! allocate InitSeed used for re-initialization CALL MemAlloc ( RNG % InitSeed , [ 1_kIndex ]) ! set InitSeed RNG % InitSeed = GetRandomSeed32 () + GOLDEN_RATIO_32 END IF ! initialize the PRNG CALL RNG % BaseInit ( RNG % InitSeed ) RETURN END SUBROUTINE Default_InitWithSeeds !****************************************************************************** SUBROUTINE Default_ReInitialize ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To re-initialize an 'IntegerRNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( ALLOCATED ( RNG % InitSeed )) THEN ! re-initialize the PRNG CALL RNG % BaseInit ( RNG % InitSeed ) ELSE ! initialize without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE Default_ReInitialize !****************************************************************************** SUBROUTINE Copy_InitSeed ( SrcRng , DstRng ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy the InitSeed of the source to that of the destination. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( IN ) :: SrcRng !! the source CLASS ( IntegerRNG ), INTENT ( INOUT ) :: DstRng !! the destination !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! allocate InitSeed used for re-initialization CALL MemAlloc ( DstRng % InitSeed , [ SIZE ( SrcRng % InitSeed , KIND = kIndex )]) ! set InitSeed DstRng % InitSeed = SrcRng % InitSeed RETURN END SUBROUTINE Copy_InitSeed !****************************************************************************** FUNCTION Default_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = IOR ( SHIFTL ( ToInt64 ( RNG % NextInteger ()), 32 ), & IAND ( ToInt64 ( RNG % NextInteger ()), MaskL )) RETURN END FUNCTION Default_NextLong !****************************************************************************** FUNCTION Default_NextI128 ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the signed 128-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object TYPE ( SInt128 ) :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! construct SInt128 object from two 64-bit random numbers RandNum = SInt128 ( RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION Default_NextI128 !****************************************************************************** FUNCTION Default_NextU128 ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the unsigned 128-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object TYPE ( UInt128 ) :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! construct UInt128 object from two 64-bit random numbers RandNum = UInt128 ( RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION Default_NextU128 !****************************************************************************** FUNCTION Default_NextDouble ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 64-bit-floating-point value between zero (inclusive) !  and one (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object tRealDP :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! although these three parameters use different formulas, they are essentially the same. tRealDP , PARAMETER :: DNorm1 = 2.0_kDouble ** ( - 53 ) tRealDP , PARAMETER :: DNorm2 = 1.0_kDouble / SHIFTL ( 1_kInt64 , 53 ) tRealDP , PARAMETER :: DNorm3 = 0.5_kDouble * EPSILON ( 1.0_kDouble ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: High , Low ! FLOW ! Require the least significant 53-bits from a long. ! Join the most significant 26 from the first random integer ! with 27 from the second random integer. High = SHIFTL ( ToInt64 ( SHIFTR ( RNG % NextInteger (), 6 )), 27 ) ! 26-bits remain Low = ToInt64 ( SHIFTR ( RNG % NextInteger (), 5 )) ! 27-bits remain RandNum = IOR ( High , Low ) * DNorm1 RETURN END FUNCTION Default_NextDouble !****************************************************************************** FUNCTION Default_NextQuad ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 128-bit-floating-point value between zero (inclusive) !  and one (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( IntegerRNG ), INTENT ( INOUT ) :: RNG !! 'IntegerRNG' object tRealQP :: RandNum !! random number !** SUBROUTINE ARGUMENT DECLARATIONS: ! although these two parameters use different formulas, they are essentially the same. tRealQP , PARAMETER :: QNorm1 = 2.0_kQuad ** ( - 113 ) tRealQP , PARAMETER :: QNorm2 = 0.5_kQuad * EPSILON ( 1.0_kQuad ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IntVal ( 4 ) tSInt32 :: Hi1 , Hi2 , Lo1 , Lo2 tUInt64 :: I128Hi , I128Lo tRealQP :: R128 ! FLOW ! get four random integer values Hi1 = SHIFTR ( RNG % NextInteger (), 4 ) ! use the most significant 28 bits Hi2 = SHIFTR ( RNG % NextInteger (), 4 ) ! use the most significant 28 bits Lo1 = SHIFTR ( RNG % NextInteger (), 4 ) ! use the most significant 28 bits Lo2 = SHIFTR ( RNG % NextInteger (), 3 ) ! use the most significant 29 bits ! join the most significant 57 bits of Low and 56 bits of High IntVal = 0 CALL MVBITS ( Lo2 , 0 , 29 , IntVal ( 1 ), 0 ) CALL MVBITS ( Lo1 , 0 , 3 , IntVal ( 1 ), 29 ) CALL MVBITS ( Lo1 , 3 , 25 , IntVal ( 2 ), 0 ) CALL MVBITS ( Hi2 , 0 , 7 , IntVal ( 2 ), 25 ) CALL MVBITS ( Hi2 , 7 , 21 , IntVal ( 3 ), 0 ) CALL MVBITS ( Hi1 , 0 , 11 , IntVal ( 3 ), 21 ) CALL MVBITS ( Hi1 , 11 , 17 , IntVal ( 4 ), 0 ) ! get upper and lower 64 bits of 128-bit integer number I128Lo = IOR ( SHIFTL ( ToInt64 ( IntVal ( 2 )), 32 ), ToInt64 ( IntVal ( 1 ))) ! treated as unsigned I128Hi = IOR ( SHIFTL ( ToInt64 ( IntVal ( 4 )), 32 ), ToInt64 ( IntVal ( 3 ))) ! treated as signed ! convert 128-bit integer number to 128-bit real number R128 = I128_To_R128 ( I128Hi , I128Lo ) ! normalize the 128-bit real random number ! Note: Although the above block treats 128-bit integer as signed number, !       it is always positive because only the lower 113 bits are set and !       the higher 15 bits are all zero. RandNum = R128 * QNorm1 RETURN END FUNCTION Default_NextQuad !****************************************************************************** FUNCTION I128_To_R128 ( I128Hi , I128Lo ) RESULT ( R128 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To convert a 128-bit integer value to a 128-bit real value. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: I128Hi !! upper 64 bits of the 128-bit integer tUInt64 , INTENT ( IN ) :: I128Lo !! lower 64 bits of the 128-bit integer tRealQP :: R128 !! the 128-bit real !** SUBROUTINE ARGUMENT DECLARATIONS: ! parameters for converting from 128-bit integer to 128-bit floating point number tRealQP , PARAMETER :: TwoPow64 = 2.0_kQuad ** 64 tUInt64 , PARAMETER :: TwoPow112 ( 2 ) = [ 0_kInt64 , 281474976710656_kInt64 ] ! SHIFTL(1, 112) tUInt32 , PARAMETER :: Mask = ToInt32 ( Z '00007FFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tLogical :: Negative tSInt64 :: High tUInt64 :: Low tSInt32 :: S , Shift tUInt64 :: Exp TYPE ( C_PTR ) :: cPtr ! C pointer to IBits tRealQP , POINTER :: fPtr ! Fortran pointer to IBits tUInt64 , TARGET :: IBits ( 2 ) ! FLOW ! get sign flag and absolute values of components Negative = ( I128Hi < 0_kInt64 ) IF ( Negative ) THEN High = NOT ( I128Hi ) IF ( I128Lo == 0_kInt64 ) High = High + 1_kInt64 Low = NOT ( I128Lo ) + 1_kInt64 ELSE High = I128Hi Low = I128Lo END IF IF ( High == 0_kInt64 ) THEN R128 = U64_To_R128 ( Low ) IF ( Negative ) R128 = - R128 RETURN END IF S = LEADZ ( High ) IF ( S >= 15 ) THEN R128 = U64_To_R128 ( Low ) + REAL ( High , KIND = kQuad ) * TwoPow64 IF ( Negative ) R128 = - R128 RETURN END IF ! Mask out the 113 MSBits Shift = 15 - S IBits ( 2 ) = SHIFTR ( High , Shift ) IBits ( 1 ) = IOR ( SHIFTR ( Low , Shift ), SHIFTL ( High , 64 - Shift )) ! get the binary exponent Exp = ToInt64 ( IAND ( 16510 - S , Mask )) ! 16510 = 64 + 64 + 16383 - 1 ! The leading bit is implicit, cancel it out to get the significand ! and also add the exponent IBits ( 1 ) = IEOR ( IOR ( SHIFTR ( Low , Shift ), SHIFTL ( High , 64 - Shift )), TwoPow112 ( 1 )) IBits ( 2 ) = IOR ( IEOR ( SHIFTR ( High , Shift ), TwoPow112 ( 2 )), SHIFTL ( Exp , 48 )) ! 48 = 112 - 64 !-----------------------------------------------------------------------! !+++++  Transfer output (R128 mapped to IBits using C_F_POINTER)   +++++! !-----------------------------------------------------------------------! IF (. NOT . IsLittleEndian ) THEN ! big-endian so swap IBits(1) and IBits(2) BLOCK tUInt64 :: Tmp Tmp = IBits ( 1 ); IBits ( 1 ) = IBits ( 2 ); IBits ( 2 ) = Tmp END BLOCK END IF ! get a C pointer to IBits cPtr = C_LOC ( IBits ) ! associate a Fortran data pointer with the C pointer CALL C_F_POINTER ( cPtr , fPtr ) ! get a 128-bit real number equivalent to the 128-bit integer number R128 = fPtr ! check and add sign if needed IF ( Negative ) R128 = - R128 ! nullify pointers NULLIFY ( fPtr ) cPtr = C_NULL_PTR RETURN CONTAINS FUNCTION U64_To_R128 ( LongVal ) RESULT ( QuadVal ) !** PURPOSE OF THIS SUBROUTINE: ! To convert an unsigned 64-bit integer number to a 128-bit floating point number !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: LongVal ! integer number treated as unsigned one tRealQP :: QuadVal ! floating point number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na !** FLOW IF ( LongVal >= 0_kInt64 ) THEN QuadVal = REAL ( LongVal , KIND = kQuad ) ELSE QuadVal = TwoPow64 + REAL ( LongVal , KIND = kQuad ) END IF RETURN END FUNCTION U64_To_R128 !****************************************************************************** END FUNCTION I128_To_R128 !****************************************************************************** END MODULE MClass_IntegerRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_integerrng.f90.html"},{"title":"MClass_Mt64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Mt64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Mt64RNG* type and its related routines. !   The *Mt64RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *Mt64RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the 64-bit Mersenne Twister !   algorithm by Makoto Matsumoto and Takuji Nishimura.  The *Mt64* PRNG !   features an extremely long period (2<sup>19937</sup> - 1) and !   311-dimensional equidistribution up to 64 bits accuracy. <br> !   It is important to note that the *Mt64* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/10.1145/369534.369540\"> !       T. Nishimura.  2000.  Tables of 64-bit Mersenne twisters.  ACM Transactions on !       Modeling and Computer Simulation, Vol. 10, No. 4, October 2000, pp 348-357.</a> <br> !   [2] <a href=\"http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf\"> !       M. Matsumoto and T. Nishimura.  1998.  Mersenne Twister: A 623-Dimensionally !       Equidistributed Uniform Pseudo-Random Number Generator.  ACM Transactions on !       Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.</a> <br> !   [3] <a href=\"http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/emt64.html\"> !       Mersenne Twister 64bit version.</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/MersenneTwister64.html\"> !       Apache Commons RNG: Class MersenneTwister64</a> !** PURPOSE OF THIS MODULE: ! This module contains a random number generator class based on the Mersenne Twister ! algorithm by Makoto Matsumoto and Takuji Nishimura. !** REFERENCES: ! [1] M. Matsumoto and T. Nishimura.  1998.  Mersenne Twister: A 623-Dimensionally !    Equidistributed Uniform Pseudo-Random Number Generator.  ACM Transactions on !    Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3--30 ! [2] http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt64.html !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Mt64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Most significant 33 bits. tSInt64 , PARAMETER :: UM = ToInt64 ( Z 'FFFFFFFF80000000' ) ! Least significant 31 bits. tSInt64 , PARAMETER :: LM = ToInt64 ( Z '000000007FFFFFFF' ) ! Size of the bytes pool. tSInt32 , PARAMETER :: NN = 312 ! Period second parameter. tSInt32 , PARAMETER :: MM = 156 ! X * MATRIX_A for X = {0, 1}. tSInt64 , PARAMETER :: MAG01 ( 0 : 1 ) = [ 0_kInt64 , ToInt64 ( Z 'B5026F5AA96619E9' )] !** DERIVED TYPE DEFINITIONS !> The *Mt64RNG* type is a *Long* PRNG type based on the Mersenne !  Twister algorithm by Makoto Matsumoto and Takuji Nishimura. TYPE , EXTENDS ( LongRNG ) :: Mt64RNG PRIVATE ! Bytes pool tSInt64 :: MT ( 0 : NN - 1 ) ! Current index in the bytes pool tSInt32 :: MTI CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mt64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Mt64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mt64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mt64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Mt64RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Mt64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Mt64RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt64RNG ), INTENT ( INOUT ) :: RNG !! 'Mt64RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set initial states IF ( SIZE ( Seed ) < NN ) THEN CALL FillStateVariable ( Seed , RNG % MT ) ELSE RNG % MT ( 0 : NN - 1 ) = Seed ( 1 : NN ) END IF ! Initial index RNG % MTI = NN RETURN CONTAINS SUBROUTINE FillStateVariable ( Seed , State ) !** PURPOSE OF THIS SUBROUTINE: ! To fill State based on the given seed. IMPLICIT NONE !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( IN ) :: Seed ( 0 :) tSInt64 , INTENT ( OUT ) :: State ( 0 :) !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: C1 = ToInt64 ( Z '369DEA0F31A53F85' ) tSInt64 , PARAMETER :: C2 = ToInt64 ( Z '27BB2EE687B0B0FD' ) tSInt64 , PARAMETER :: C3 = ToInt64 ( Z '8000000000000000' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I , J , K , SeedSize tSInt64 :: MM1 ! FLOW CALL Initialize_State ( 19650218_kInt64 , State ) I = 1 J = 0 SeedSize = SIZE ( Seed ) DO K = MAX ( NN , SeedSize ), 1 , - 1 MM1 = State ( I - 1 ) ! non linear State ( I ) = IEOR ( State ( I ), ( IEOR ( MM1 , SHIFTR ( MM1 , 62 )) * C1 )) + Seed ( J ) + J I = I + 1 J = J + 1 IF ( I >= NN ) THEN State ( 0 ) = State ( NN - 1 ) I = 1 END IF IF ( J >= SeedSize ) THEN J = 0 END IF END DO DO K = NN - 1 , 1 , - 1 MM1 = State ( I - 1 ) ! non linear State ( I ) = IEOR ( State ( I ), ( IEOR ( MM1 , SHIFTR ( MM1 , 62 )) * C2 )) - I I = I + 1 IF ( I >= NN ) THEN State ( 0 ) = State ( NN - 1 ) I = 1 END IF END DO ! MSB is 1 assuring non-zero initial array State ( 0 ) = C3 RETURN END SUBROUTINE FillStateVariable !****************************************************************************** SUBROUTINE Initialize_State ( Seed , State ) !** PURPOSE OF THIS SUBROUTINE: ! To fill the State using a defined pseudo-random sequence. IMPLICIT NONE !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( IN ) :: Seed tSInt64 , INTENT ( OUT ) :: State ( 0 :) !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: CPAR = ToInt64 ( Z '5851F42D4C957F2D' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: MM1 tSInt32 :: MTI ! FLOW State ( 0 ) = Seed DO MTI = 1 , NN - 1 MM1 = State ( MTI - 1 ) State ( MTI ) = CPAR * IEOR ( MM1 , SHIFTR ( MM1 , 62 )) + MTI END DO RETURN END SUBROUTINE Initialize_State !****************************************************************************** END SUBROUTINE Mt64RNG_BaseInit !****************************************************************************** FUNCTION Mt64RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt64RNG ), INTENT ( INOUT ) :: RNG !! 'Mt64RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: C1 = ToInt64 ( Z '5555555555555555' ) tSInt64 , PARAMETER :: C2 = ToInt64 ( Z '71d67fffeda60000' ) tSInt64 , PARAMETER :: C3 = ToInt64 ( Z 'fff7eee000000000' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: X tSInt32 :: I ! FLOW IF ( RNG % MTI >= NN ) THEN ! Generate N words at one time DO I = 0 , NN - MM - 1 X = IOR ( IAND ( RNG % MT ( I ), UM ), IAND ( RNG % MT ( I + 1 ), LM )) RNG % MT ( I ) = IEOR ( IEOR ( RNG % MT ( I + MM ), SHIFTR ( X , 1 )), & MAG01 ( ToInt32 ( IAND ( X , 1_kInt64 )))) END DO DO I = NN - MM , NN - 2 X = IOR ( IAND ( RNG % MT ( I ), UM ), IAND ( RNG % MT ( I + 1 ), LM )) RNG % MT ( I ) = IEOR ( IEOR ( RNG % MT ( I + ( MM - NN )), SHIFTR ( X , 1 )), & MAG01 ( ToInt32 ( IAND ( X , 1_kInt64 )))) END DO X = IOR ( IAND ( RNG % MT ( NN - 1 ), UM ), IAND ( RNG % MT ( 0 ), LM )) RNG % MT ( NN - 1 ) = IEOR ( IEOR ( RNG % MT ( MM - 1 ), SHIFTR ( X , 1 )), & MAG01 ( ToInt32 ( IAND ( X , 1_kInt64 )))) RNG % MTI = 0 END IF X = RNG % MT ( RNG % MTI ) RNG % MTI = RNG % MTI + 1 ! Tempering X = IEOR ( X , IAND ( SHIFTR ( X , 29 ), C1 )) X = IEOR ( X , IAND ( SHIFTL ( X , 17 ), C2 )) X = IEOR ( X , IAND ( SHIFTL ( X , 37 ), C3 )) X = IEOR ( X , SHIFTR ( X , 43 )) RandNum = X RETURN END FUNCTION Mt64RNG_NextLong !****************************************************************************** FUNCTION Mt64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt64RNG ), INTENT ( IN ) :: RNG !! 'Mt64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Mt64RNG' ! to prevent warning of unused variable(s) ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mt64RNG_GetName !****************************************************************************** FUNCTION Mt64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt64RNG ), INTENT ( IN ) :: RNG !! 'Mt64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = NN ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mt64RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Mt64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_mt64rng.f90.html"},{"title":"MClass_Sip24RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Sip24RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Sip24RNG* type and its related routines. !   The *Sip24RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *Sip24RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *SipHash24* algorithm. !   The *SipHash24* algorithm is a member of the *SipHash* family, which !   is an add-rotate-xor (ARX) based family of pseudorandom functions by !   by J.P. Aumasson and D.J. Bernstein. <br> !   It is important to note that the *Sip24* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://en.wikipedia.org/wiki/SipHash\">SipHash</a> <br> !   [2] <a href=\"https://github.com/veorq/SipHash\">SipHash: High-speed !       secure pseudorandom function for short messages.</a> <br> !   [3] <a href=\"https://github.com/vnmakarov/mum-hash/blob/master/src/sip24-prng.h\"> !       Pseudo Random Number Generator (PRNG) based on SipHash24.</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Sip24RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Size of the state vector tSInt32 , PARAMETER :: SEED_SIZE = 4 !** DERIVED TYPE DEFINITIONS !> The *Sip24RNG* type is a *Long* PRNG type based on the *SipHash24* algorithm !  by J.P. Aumasson and D.J. Bernstein. TYPE , EXTENDS ( LongRNG ) :: Sip24RNG PRIVATE !% initial state tSInt64 :: InitState ( SEED_SIZE ) !% current state tSInt64 :: State ( SEED_SIZE ) !% index into the current state (position of the output) tIndex :: Index !% counter (used as a current message) tSInt64 :: Counter CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: Update => Sip24RNG_Update ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Sip24RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Sip24RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Sip24RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Sip24RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Sip24RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Sip24RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Sip24RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sip24RNG ), INTENT ( INOUT ) :: RNG !! 'Sip24RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: IV ( 4 ) = [ ToInt64 ( Z '736F6D6570736575' ), & ToInt64 ( Z '646F72616E646F6D' ), & ToInt64 ( Z '6C7967656E657261' ), & ToInt64 ( Z '7465646279746573' )] !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Seed0 ( SEED_SIZE ) tIndex :: I ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! set initial state DO I = 1 , SEED_SIZE RNG % InitState ( I ) = IEOR ( Seed0 ( I ), IV ( I )) END DO ! set index and counter RNG % Index = 5_kIndex RNG % Counter = 0_kInt64 RETURN END SUBROUTINE Sip24RNG_BaseInit !****************************************************************************** FUNCTION Sip24RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sip24RNG ), INTENT ( INOUT ) :: RNG !! 'Sip24RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( RNG % Index > 4_kIndex ) THEN ! reset index RNG % Index = 1_kIndex ! update current state CALL RNG % Update () ! update counter RNG % Counter = RNG % Counter + 1 END IF ! get random number RandNum = RNG % State ( RNG % Index ) ! update index RNG % Index = RNG % Index + 1_kIndex RETURN END FUNCTION Sip24RNG_NextLong !****************************************************************************** SUBROUTINE Sip24RNG_Update ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the current state of the PRNG. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sip24RNG ), INTENT ( INOUT ) :: RNG !! 'Sip24RNG' object !** SUBROUTINE MACRO DEFINITIONS: #define RotateLeft(V,P)     ISHFTC(V,  P) #define HalfRound(A,B,C,D,S,T) \\ A = A + B ; \\ C = C + D ; \\ B = IEOR ( RotateLeft ( B , S ), A ); \\ D = IEOR ( RotateLeft ( D , T ), C ); \\ A = RotateLeft ( A , 32 ); #define DoubleRound(V0,V1,V2,V3) \\ HalfRound ( V0 , V1 , V2 , V3 , 13 , 16 ); \\ HalfRound ( V2 , V1 , V0 , V3 , 17 , 21 ); \\ HalfRound ( V0 , V1 , V2 , V3 , 13 , 16 ); \\ HalfRound ( V2 , V1 , V0 , V3 , 17 , 21 ); !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na !** FLOW ! reset current state to initial state RNG % State = RNG % InitState ! update current state RNG % State ( 3 ) = IEOR ( RNG % State ( 3 ), RNG % Counter ) ASSOCIATE ( V0 => RNG % State ( 1 ), V1 => RNG % State ( 2 ), & V2 => RNG % State ( 3 ), V3 => RNG % State ( 4 )) DoubleRound ( V0 , V1 , V2 , V3 ) V0 = IEOR ( V0 , RNG % Counter ) DoubleRound ( V0 , V1 , V2 , V3 ) V2 = IEOR ( V2 , ToInt64 ( Z '00000000000000FF' )) DoubleRound ( V0 , V1 , V2 , V3 ) DoubleRound ( V0 , V1 , V2 , V3 ) END ASSOCIATE RETURN #undef RotateLeft #undef HalfRound #undef DoubleRound END SUBROUTINE Sip24RNG_Update !****************************************************************************** FUNCTION Sip24RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sip24RNG ), INTENT ( IN ) :: RNG !! 'Sip24RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Sip24RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Sip24RNG_GetName !****************************************************************************** FUNCTION Sip24RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sip24RNG ), INTENT ( IN ) :: RNG !! 'Sip24RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = SEED_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Sip24RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Sip24RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_sip24rng.f90.html"},{"title":"MClass_Lfsr258RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Lfsr258RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Lfsr258RNG* type and its related routines. !   The *Lfsr258RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *Lfsr258RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the 64-bit *LFSR* ( composite !   linear feedback shift register) algorithm by Pierre L'Ecuyer. <br> !   The *LFSR258* PRNG has five 64-bit states combined by a bitwise xor. !   Its period length is approximatively 2<sup>258</sup>. <br> !   It is important to note that the *LFSR258* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  Also, it should be noted that the implementation of !   this PRNG is based on reference #2-3. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-01039-X/\"> !       L'Ecuyer, P. 1999. Tables of maximally equidistributed combined LFSR !       generators. Mathematics of Computation, 68(225): 261-269. </a> <br> !   [2] <a href=\"https://wp.csiro.au/alanmiller/random/lfsr258.f90\"> !       Lin_Feedback_Shift_Reg: a Fortran 90 module implementation of the LFSR258 !       generator by Alan Miller. </a> <br> !   [3] <a href=\"http://umontreal-simul.github.io/ssj/docs/master/classumontreal_1_1ssj_1_1rng_1_1LFSR258.html\"> !       Package umontreal.ssj.rng: LFSR258 Class Reference. </a> !** USE STATEMENTS: USE MBase_Common USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Lfsr258RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! name of module tCharStar , PARAMETER :: ModName = 'MClass_Lfsr258RNG' !** DERIVED TYPE DEFINITIONS !> The *Lfsr258RNG* type is a *Long* PRNG type based on 64-bit composite !  linear feedback shift register (LFSR) algorithm by Pierre L'Ecuyer. TYPE , EXTENDS ( LongRNG ) :: Lfsr258RNG PRIVATE tSInt64 :: State1 = 153587801 tSInt64 :: State2 = - 759022222 tSInt64 :: State3 = 1288503317 tSInt64 :: State4 = - 1718083407 tSInt64 :: State5 = - 123456789 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Lfsr258RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Lfsr258RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Lfsr258RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Lfsr258RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Lfsr258RNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Lfsr258RNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Lfsr258RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Lfsr258RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Lfsr258RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr258RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr258RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set initial seeds SELECT CASE ( SIZE ( Seed )) CASE ( 1 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) CASE ( 2 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) CASE ( 3 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) RNG % State3 = IEOR ( RNG % State3 , Seed ( 3 )) CASE ( 4 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) RNG % State3 = IEOR ( RNG % State3 , Seed ( 3 )) RNG % State4 = IEOR ( RNG % State4 , Seed ( 4 )) CASE ( 5 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) RNG % State3 = IEOR ( RNG % State3 , Seed ( 3 )) RNG % State4 = IEOR ( RNG % State4 , Seed ( 4 )) RNG % State5 = IEOR ( RNG % State5 , Seed ( 5 )) END SELECT IF ( IAND ( RNG % State1 , - 2_kInt64 ) == 0_kInt64 ) RNG % State1 = RNG % State1 - 8388607_kInt64 IF ( IAND ( RNG % State2 , - 512_kInt64 ) == 0_kInt64 ) RNG % State2 = RNG % State2 - 8388607_kInt64 IF ( IAND ( RNG % State3 , - 4096_kInt64 ) == 0_kInt64 ) RNG % State3 = RNG % State3 - 8388607_kInt64 IF ( IAND ( RNG % State4 , - 131072_kInt64 ) == 0_kInt64 ) RNG % State4 = RNG % State4 - 8388607_kInt64 IF ( IAND ( RNG % State5 , - 8388608_kInt64 ) == 0_kInt64 ) RNG % State5 = RNG % State5 - 8388607_kInt64 RETURN END SUBROUTINE Lfsr258RNG_BaseInit !****************************************************************************** FUNCTION Lfsr258RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr258RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr258RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: B ! FLOW B = SHIFTR ( IEOR ( SHIFTL ( RNG % State1 , 1 ), RNG % State1 ), 53 ) RNG % State1 = IEOR ( SHIFTL ( IAND ( RNG % State1 , - 2_kInt64 ), 10 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State2 , 24 ), RNG % State2 ), 50 ) RNG % State2 = IEOR ( SHIFTL ( IAND ( RNG % State2 , - 512_kInt64 ), 5 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State3 , 3 ), RNG % State3 ), 23 ) RNG % State3 = IEOR ( SHIFTL ( IAND ( RNG % State3 , - 4096_kInt64 ), 29 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State4 , 5 ), RNG % State4 ), 24 ) RNG % State4 = IEOR ( SHIFTL ( IAND ( RNG % State4 , - 131072_kInt64 ), 23 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State5 , 3 ), RNG % State5 ), 33 ) RNG % State5 = IEOR ( SHIFTL ( IAND ( RNG % State5 , - 8388608_kInt64 ), 8 ), B ) RandNum = IEOR ( IEOR ( IEOR ( IEOR ( RNG % State1 , RNG % State2 ), RNG % State3 ), RNG % State4 ), RNG % State5 ) RETURN END FUNCTION Lfsr258RNG_NextLong !****************************************************************************** FUNCTION Lfsr258RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr258RNG ), INTENT ( IN ) :: RNG !! 'Lfsr258RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Lfsr258RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Lfsr258RNG_GetName !****************************************************************************** FUNCTION Lfsr258RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr258RNG ), INTENT ( IN ) :: RNG !! 'Lfsr258RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 5 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Lfsr258RNG_GetSeedSize !****************************************************************************** FUNCTION Lfsr258RNG_NextDouble ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random floating-point value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr258RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr258RNG' object tRealDP :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tRealDP , PARAMETER :: InvTwo24 = 5.9604644775390625E-8_kDouble ! 2**(-24) tRealDP , PARAMETER :: Epsilon = 5.5511151231257827E-17_kDouble ! 2**(-54) ! equivalent a NORM = 1.0 / ToInt64(Z'FFFFFFFFFFFFF800') tRealDP , PARAMETER :: DNorm = 0.5_kDouble / ToInt64 ( Z '7FFFFFFFFFFFFC00' ) tRealDP , PARAMETER :: DMax = ToInt64 ( Z 'FFFFFFFFFFFFF800' ) * DNorm + 1.0_kDouble !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: I tSInt64 :: LongRnd tRealDP :: U ( 2 ) ! FLOW DO I = 1 , 2 LongRnd = RNG % NextLong () ! Make sure that double values 0 and 1 never occur IF ( LongRnd <= 0_kInt64 ) THEN U ( I ) = LongRnd * DNorm + DMax ELSE U ( I ) = LongRnd * DNorm END IF END DO RandNum = MOD (( U ( 1 ) + U ( 2 ) * InvTwo24 ), 1.0_kDouble ) + Epsilon RETURN END FUNCTION Lfsr258RNG_NextDouble !****************************************************************************** FUNCTION Lfsr258RNG_NextIntegerLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 32-bit-integer value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  0 and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in between the lower limit (inclusive) and the upper !  limit (exclusive). <br> !  This routine overrides the default implementation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr258RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr258RNG' object tSInt32 , INTENT ( IN ) :: Bound1 !! a required limit tSInt32 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: TwoPow66 = ToInt64 ( Z '4000000000000000' ) ! 4*(2**64) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Lower , Diff tSInt64 :: D , Q , R , LongRnd ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN Diff = ABS ( Bound1 - Bound2 ) Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = ABS ( Bound1 ) Lower = MIN ( Bound1 , 0_kInt32 ) END IF ! return quickly if Diff is zero IF ( Diff == 0_kInt32 ) THEN RandNum = Bound1 RETURN END IF D = Diff + 1_kInt64 Q = TwoPow66 / D R = MOD ( TwoPow66 , D ) DO LongRnd = SHIFTR ( RNG % NextLong (), 2 ) IF ( LongRnd < TwoPow66 - R ) EXIT END DO RandNum = ToInt32 ( LongRnd / Q ) + Lower RETURN END FUNCTION Lfsr258RNG_NextIntegerLimits !****************************************************************************** END MODULE MClass_Lfsr258RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_lfsr258rng.f90.html"},{"title":"MClass_BaseRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_BaseRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *BaseRNG* type and its related routines. !   The *BaseRNG* type is an abstract type representing a pseudo random !   number generator (PRNG).  It defines an application programming !   interface (API) for uniformly-distributed random number generations. !   Except for the *NextGaussian* and *NextExponential* methods, all other !   so-called *Next* methods provided produce a sequence of random numbers !   that follow a uniform distribution.  <br> !   The *BaseRNG* type also provides a number of default implementations !   of random number generations.  For better accuracy and performance, !   these methods with a default implementation can be overridden.  All !   other PRNG types should extend from this base type. <br> !   By design, all pseudo random number generators should be initialized !   before being used.  This means that the *Initialize* method must be !   called before all other methods (with the exception of the *GetName* !   and *GetSeedSize* methods) are used.  Otherwise, the generated output !   sequence may not be a desirable one. <br> !   The API and various implementations of this PRNG base type and many !   of its subtypes are greatly influenced by those in the references !   provided below. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://commons.apache.org/proper/commons-rng/index.html\"> !       Apache Commons RNG: Random Numbers Generators</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> <br> !   [3] <a href=\"http://simul.iro.umontreal.ca/\">Random Number Generators !       by Pierre L'Ecuyer</a> <br> !   [4] <a href=\"https://wp.csiro.au/alanmiller/random.html\">Uniform Random Number Generation !       by Alan J. Miller</a> !** USE STATEMENTS: USE , INTRINSIC :: IEEE_ARITHMETIC USE MBase_Common USE MBase_ErrHandlers USE MBase_SIntUtil USE MBase_UInt128 USE MBase_SInt128 IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS ! base type for pseudo-random number generator PUBLIC :: BaseRNG ! parameters for a character set that may be used when calling the *NextString* method PUBLIC :: AlphaOnlyCap , AlphaOnlyMix PUBLIC :: AlphaNumericCap , AlphaNumericMix PUBLIC :: DecimalString , HexadecimalString ! helper parameters PUBLIC :: GOLDEN_RATIO_32 , GOLDEN_RATIO_64 PUBLIC :: SILVER_RATIO_32 , SILVER_RATIO_64 ! helper procedures PUBLIC :: GetRandomSeed32 , GetRandomSeed64 PUBLIC :: Mix_Stafford_13 , Mix_Murmur , Mix_Lea PUBLIC :: ScrambleWell , Fill_State , Extend_Seed ! procedure interfaces PUBLIC :: NextR64 PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #define     tSInt128    TYPE(SInt128) #define     tUInt128    TYPE(UInt128) !** MODULE PARAMETERS: ! ----------------------------------------------------------------------------------- ! -----                     Private Parameters                                  ----- ! ----------------------------------------------------------------------------------- ! name of module tCharStar , PARAMETER :: ModName = 'MClass_BaseRNG' ! +++ character sets +++ tCharParam :: SET_ALPHABETS_LOW = 'abcdefghijklmnopqrstuvwxyz' tCharParam :: SET_DEC_DIGITS = '0123456789' tCharParam :: SET_HEX_DIGITS = SET_DEC_DIGITS // 'ABCDEF' tCharParam :: SET_ALPHABETS_CAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' tCharParam :: SET_ALPHABETS_MIX = SET_ALPHABETS_LOW // SET_ALPHABETS_CAP tCharParam :: SET_ALPHANUM_CAP = SET_ALPHABETS_CAP // SET_DEC_DIGITS tCharParam :: SET_ALPHANUM_MIX = SET_ALPHABETS_LOW // SET_DEC_DIGITS // SET_ALPHABETS_CAP ! ----------------------------------------------------------------------------------- ! -----                     Public Parameters                                   ----- ! ----------------------------------------------------------------------------------- !% The first 32 bits of the golden ratio (1+sqrt(5))/2, forced to be odd. !  Useful for producing good *Weyl* sequences or as an arbitrary nonzero odd value. tSInt32 , PARAMETER :: GOLDEN_RATIO_32 = ToInt32 ( Z '9E3779B9' ) !% The first 64 bits of the golden ratio (1+sqrt(5))/2, forced to be odd. !  Useful for producing good *Weyl* sequences or as an arbitrary nonzero odd value. tSInt64 , PARAMETER :: GOLDEN_RATIO_64 = ToInt64 ( Z '9E3779B97F4A7C15' ) !% The first 32 bits of the silver ratio 1+sqrt(2), forced to be odd. !  Useful for producing good *Weyl* sequences or as an arbitrary nonzero odd value. tSInt32 , PARAMETER :: SILVER_RATIO_32 = ToInt32 ( Z '6A09E667' ) !% The first 64 bits of the silver ratio 1+sqrt(2), forced to be odd. !  Useful for producing good *Weyl* sequences or as an arbitrary nonzero odd value. tSInt64 , PARAMETER :: SILVER_RATIO_64 = ToInt64 ( Z '6A09E667F3BCC909' ) ! +++ parameters for character-string type +++ tSInt32 , PARAMETER :: AlphaOnlyCap = 1 !! upper-case alphabet tSInt32 , PARAMETER :: AlphaOnlyMix = 2 !! mixed-case alphabet tSInt32 , PARAMETER :: AlphaNumericCap = 3 !! upper-case alphabet + decimal number tSInt32 , PARAMETER :: AlphaNumericMix = 4 !! mixed-case alphabet + decimal number tSInt32 , PARAMETER :: DecimalString = 5 !! decimal (number) string tSInt32 , PARAMETER :: HexadecimalString = 6 !! hexadecimal (number) string !** DERIVED TYPE DEFINITIONS !> The *BaseRNG* type is an abstract PRNG type that provides an API !  for random number generations.  Some random number generations are !  deferred while others (with default implementation) can be overridden. TYPE , ABSTRACT :: BaseRNG CONTAINS ! --------------------------------------------------------------------- ! -----                     Deferred Procedures                   ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a binding name of the *InitRNG* deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE ( InitRNG ), DEFERRED :: InitWOSeedImpl !> *NextIntegerImpl* is a binding name of the *NextI32* deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE ( NextI32 ), DEFERRED :: NextIntegerImpl !> *NextLongImpl* is a binding name of the *NextI64* deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE ( NextI64 ), DEFERRED :: NextLongImpl !> *NextI128Impl* is a binding name of the *NextI128* deferred procedure. <br> !  Use the *NextI128* method in place of the *NextI128Impl* method !  to generate a signed 128-bit integer number. PROCEDURE ( NextI128 ), DEFERRED :: NextI128Impl !> *NextU128Impl* is a binding name of the *NextU128* deferred procedure. <br> !  Use the *NextU128* method in place of the *NextU128Impl* method !  to generate an unsigned 128-bit integer number. PROCEDURE ( NextU128 ), DEFERRED :: NextU128Impl !> *NextDoubleImpl* is a binding name of the *NextR64* deferred procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE ( NextR64 ), DEFERRED :: NextDoubleImpl !> *NextQuadImpl* is a binding name of the *NextR128* deferred procedure. <br> !  Use the *NextQuad* method in place of the *NextQuadImpl* method !  to generate a 128-bit real number. PROCEDURE ( NextR128 ), DEFERRED :: NextQuadImpl !> *ReInit* is a binding name of the *Reset* deferred procedure. <br> !  **Type-Bound Subroutine**: ReInit <br> !  **Purpose**:  To reset the PRNG to its initial state. <br> !  **Usage**: <br> !   --->    CALL PRNG%ReInit() PROCEDURE ( Reset ), DEFERRED :: ReInit !> *GetName* is a binding name of the *RNGName* deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE ( RNGName ), DEFERRED :: GetName !> *GetSeedSize* is a binding name of the *SeedSize* deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize the PRNG. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE ( SeedSize ), DEFERRED :: GetSeedSize ! --------------------------------------------------------------------- ! ----- Default-Implementation Procedures with Generic Interfaces ----- ! --------------------------------------------------------------------- !> Use the *NextInteger* Method instead of this method. PROCEDURE :: Default_NextIntegerLimits !> Use the *NextLong* Method instead of this method. PROCEDURE :: Default_NextLongLimits !> Use the *NextI128* Method instead of this method. PROCEDURE :: Default_NextI128Limits !> Use the *NextU128* Method instead of this method. PROCEDURE :: Default_NextU128Limits !> Use the *NextSingle* Method instead of this method. PROCEDURE :: Default_NextSingle !> Use the *NextSingle* Method instead of this method. PROCEDURE :: Default_NextSingleLimits !> Use the *NextDouble* Method instead of this method. PROCEDURE :: Default_NextDoubleLimits !> Use the *NextQuad* Method instead of this method. PROCEDURE :: Default_NextQuadLimits ! --------------------------------------------------------------------- ! -----                     Public Procedures                     ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   --->    CALL RNG%Initialize() GENERIC :: Initialize => InitWOSeedImpl !> **Type-Bound Function**: NextInteger  <br> !  **Purpose**:  To return a 32-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    I32Val = RNG%NextInteger() <br> !           ! random value between 0 and Limit1 <br> !   --->    I32Val = RNG%NextInteger(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    I32Val = RNG%NextInteger(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextInteger => NextIntegerImpl , & Default_NextIntegerLimits !> **Type-Bound Function**: NextLong <br> !  **Purpose**:  To return a 64-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    I64Val = RNG%NextLong() <br> !           ! random value between 0 and Limit1 <br> !   --->    I64Val = RNG%NextLong(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    I64Val = RNG%NextLong(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextLong => NextLongImpl , & Default_NextLongLimits !> **Type-Bound Function**: NextIndex  <br> !  **Purpose**:  To return an integer random number representing an index. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    Index = RNG%NextIndex() <br> !           ! random value between 0 and Limit1 <br> !   --->    Index = RNG%NextIndex(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    Index = RNG%NextIndex(Limit1, Limit2) <br> !  **Note**: The number can be either 32-bit or 64-bit integer depending on the configuration !            set when the code is compiled. #ifdef Indx32Bits GENERIC :: NextIndex => NextIntegerImpl , & Default_NextIntegerLimits #else GENERIC :: NextIndex => NextLongImpl , & Default_NextLongLimits #endif !> **Type-Bound Function**: NextI128 <br> !  **Purpose**:  To return a signed 128-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    I128Val = RNG%NextI128() <br> !           ! random value between 0 and Limit1 <br> !   --->    I128Val = RNG%NextI128(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    I128Val = RNG%NextI128(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextI128 => NextI128Impl , & Default_NextI128Limits !> **Type-Bound Function**: NextU128 <br> !  **Purpose**:  To return an unsigned 128-bit integer random number. <br> !  **Usage**: <br> !           ! any random value <br> !   --->    U128Val = RNG%NextU128() <br> !           ! random value between 0 and Limit1 <br> !   --->    U128Val = RNG%NextU128(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    U128Val = RNG%NextU128(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextU128 => NextU128Impl , & Default_NextU128Limits !> **Type-Bound Function**: NextSingle <br> !  **Purpose**:  To return a 32-bit real random number. <br> !  **Usage**: <br> !           ! random value between 0.0 (inclusive) and 1.0 (exclusive) <br> !   --->    R32Val = RNG%NextSingle() <br> !           ! random value between 0.0 and Limit1 <br> !   --->    R32Val = RNG%NextSingle(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    R32Val = RNG%NextSingle(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextSingle => Default_NextSingle , & Default_NextSingleLimits !> **Type-Bound Function**: NextDouble <br> !  **Purpose**:  To return a 64-bit real random number. <br> !  **Usage**: <br> !           ! random value between 0.0 (inclusive) and 1.0 (exclusive) <br> !   --->    R64Val = RNG%NextDouble() <br> !           ! random value between 0.0 and Limit1 <br> !   --->    R64Val = RNG%NextDouble(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    R64Val = RNG%NextDouble(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextDouble => NextDoubleImpl , & Default_NextDoubleLimits !> **Type-Bound Function**: NextQuad <br> !  **Purpose**:  To return a 128-bit real random number. <br> !  **Usage**: <br> !           ! random value between 0.0 (inclusive) and 1.0 (exclusive) <br> !   --->    R128Val = RNG%NextQuad() <br> !           ! random value between 0.0 and Limit1 <br> !   --->    R128Val = RNG%NextQuad(Limit1) <br> !           ! random value between Limit1 and Limit2 <br> !   --->    R128Val = RNG%NextQuad(Limit1, Limit2) <br> !  **Note**: Values of specified limits can either be positive or negative. GENERIC :: NextQuad => NextQuadImpl , & Default_NextQuadLimits !> **Type-Bound Function**: NextString <br> !  **Purpose**:  To return a random character string. <br> !  **Usage**: <br> !           ! random string with default settings <br> !   --->    Str = RNG%NextString() <br> !           ! random string with a specified character set <br> !   --->    Str = RNG%NextString(AlphaOnlyCap) <br> !           ! random string with a specified length <br> !   --->    Str = RNG%NextString(StrLen=OutLen) <br> !           ! random string with a specified maximum length <br> !   --->    Str = RNG%NextString(MaxLen=MaxLen) PROCEDURE :: NextString => Default_NextString !> **Type-Bound Function**: NextLogical <br> !  **Purpose**:  To return a logical random value. <br> !  **Usage**: <br> !   --->    LogVal = RNG%NextLogical() PROCEDURE :: NextLogical => Default_NextLogical !> **Type-Bound Subroutine**: NextLogicalArray <br> !  **Purpose**:  To fill the specified array with logical random values. <br> !  **Usage**: <br> !   --->    CALL RNG%NextLogicalArray(RndArr) PROCEDURE :: NextLogicalArray => Default_NextLogicalArray !> **Type-Bound Function**: NextByte <br> !  **Purpose**:  To return a 8-bit integer random number. <br> !  **Usage**: <br> !   --->    I8Val = RNG%NextByte() PROCEDURE :: NextByte => Default_NextByte !> **Type-Bound Subroutine**: NextByteArray <br> !  **Purpose**:  To fill the specified array with 8-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextByteArray(RndArr) PROCEDURE :: NextByteArray => Default_NextByteArray !> **Type-Bound Function**: NextShort <br> !  **Purpose**:  To return a 16-bit integer random number. <br> !  **Usage**: <br> !   --->    I16Val = RNG%NextShort() PROCEDURE :: NextShort => Default_NextShort !> **Type-Bound Subroutine**: NextShortArray <br> !  **Purpose**:  To fill the specified array with 16-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextShortArray(RndArr) PROCEDURE :: NextShortArray => Default_NextShortArray !> **Type-Bound Subroutine**: NextIntegerArray <br> !  **Purpose**:  To fill the specified array with 32-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextIntegerArray(RndArr) PROCEDURE :: NextIntegerArray => Default_NextIntegerArray !> **Type-Bound Subroutine**: NextLongArray <br> !  **Purpose**:  To fill the specified array with 64-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextLongArray(RndArr) PROCEDURE :: NextLongArray => Default_NextLongArray !> **Type-Bound Subroutine**: NextI128Array <br> !  **Purpose**:  To fill the specified array with signed 128-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextI128Array(RndArr) PROCEDURE :: NextI128Array => Default_NextI128Array !> **Type-Bound Subroutine**: NextU128Array <br> !  **Purpose**:  To fill the specified array with unsigned 128-bit integer random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextU128Array(RndArr) !        PROCEDURE   :: NextU128Array    => Default_NextU128Array !> **Type-Bound Subroutine**: NextSingleArray <br> !  **Purpose**:  To fill the specified array with 32-bit real random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextSingleArray(RndArr) PROCEDURE :: NextSingleArray => Default_NextSingleArray !> **Type-Bound Subroutine**: NextDoubleArray <br> !  **Purpose**:  To fill the specified array with 64-bit real random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextDoubleArray(RndArr) PROCEDURE :: NextDoubleArray => Default_NextDoubleArray !> **Type-Bound Subroutine**: NextQuadArray <br> !  **Purpose**:  To fill the specified array with 128-bit real random numbers. <br> !  **Usage**: <br> !   --->    CALL RNG%NextQuadArray(RndArr) PROCEDURE :: NextQuadArray => Default_NextQuadArray !> **Type-Bound Function**: NextGaussian <br> !  **Purpose**:  To return a 64-bit real value pseudo-randomly chosen from !                a Gaussian (normal) distribution whose mean is 0.0 and whose !                standard deviation is 1.0. <br> !  **Usage**: <br> !   --->    R64Val = RNG%NextGaussian() PROCEDURE :: NextGaussian => Default_NextGaussian !> **Type-Bound Function**: NextExponential <br> !  **Purpose**:  To return a nonnegative 64-bit real value pseudo-randomly chosen !                from a exponential distribution whose mean is 1.0. <br> !  **Usage**: <br> !   --->    R64Val = RNG%NextExponential() PROCEDURE :: NextExponential => Default_NextExponential ! --------------------------------------------------------------------- END TYPE BaseRNG !** INTERFACE DEFINITIONS: ! abstract interface for deferred procedures ABSTRACT INTERFACE !> InitRNG is a deferred procedure to initialize the generator without !  any specified seed(s).  The PRNG initialized with this procedure !  should  produce sequences of values that are statistically independent !  of those of any other instances in the current program execution, !  but may, and typically does, vary across program invocations. <br> SUBROUTINE InitRNG ( RNG ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG END SUBROUTINE !> NextI32 is a deferred procedure to return a random 32-bit-integer value. <br> FUNCTION NextI32 ( RNG ) RESULT ( RandNum ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tSInt32 :: RandNum END FUNCTION !> NextI64 is a deferred procedure to return a random 64-bit-integer value. <br> FUNCTION NextI64 ( RNG ) RESULT ( RandNum ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tSInt64 :: RandNum END FUNCTION !> NextI128 is a deferred procedure to return a random signed 128-bit-integer value. <br> FUNCTION NextI128 ( RNG ) RESULT ( RandNum ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tSInt128 :: RandNum END FUNCTION !> NextU128 is a deferred procedure to return a random unsigned 128-bit-integer value. <br> FUNCTION NextU128 ( RNG ) RESULT ( RandNum ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tUInt128 :: RandNum END FUNCTION !> NextR64 is a deferred procedure to return a random 64-bit-real value. <br> FUNCTION NextR64 ( RNG ) RESULT ( RandNum ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tRealDP :: RandNum END FUNCTION !> NextR128 is a deferred procedure to return a random 128-bit-real value. <br> FUNCTION NextR128 ( RNG ) RESULT ( RandNum ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tRealQP :: RandNum END FUNCTION !> Reset is a deferred procedure to reset the generator to its initial state. <br> SUBROUTINE Reset ( RNG ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG END SUBROUTINE !> RNGName is a deferred procedure to return the name of the generator. <br> FUNCTION RNGName ( RNG ) RESULT ( Name ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( IN ) :: RNG !% generator's name tCharAlloc :: Name END FUNCTION !> SeedSize is a deferred procedure to return size of specified !  seed(s) needed to initialize the generator. <br> FUNCTION SeedSize ( RNG ) RESULT ( Size ) IMPORT !% random number generator CLASS ( BaseRNG ), INTENT ( IN ) :: RNG !% size of specified seed(s) tIndex :: Size END FUNCTION END INTERFACE ! interface for procedures in the SubMClass_Rng_Ziggurate submodule INTERFACE !> To return a 64-bit floating point value pseudo-randomly chosen from a Gaussian !  (normal) distribution whose mean is 0.0 and whose standard deviation is 1.0. MODULE FUNCTION Default_NextGaussian ( RNG ) RESULT ( RandNum ) !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tRealDP :: RandNum END FUNCTION !> To return a nonnegative 64-bit floating point value pseudo-randomly chosen !  from a exponential distribution whose mean is 1.0. <br> MODULE FUNCTION Default_NextExponential ( RNG ) RESULT ( RandNum ) !% random number generator CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !% random number generated tRealDP :: RandNum END FUNCTION END INTERFACE ! interface for procedures in the SubMClass_Rng_Auxiliary submodule INTERFACE !> To compute Stafford variant 13 of the 64-bit mixing function of ! the MurmurHash3 hash function. MODULE FUNCTION Mix_Stafford_13 ( Input ) RESULT ( Output ) tSInt64 , INTENT ( IN ) :: Input tSInt64 :: Output END FUNCTION !% To transform the initial state of a generator. MODULE FUNCTION ScrambleWell ( Seed , Add ) RESULT ( Output ) tSInt64 , INTENT ( IN ) :: Seed !! seed element tSInt32 , INTENT ( IN ) :: Add !! offset tSInt64 :: Output !! the transformed seed element END FUNCTION END INTERFACE !** GENERIC DECLARATIONS: !% To get a 64-bit integer value representing a seed value. INTERFACE GetRandomSeed64 !> To return a random 64-bit integer value that may be useful for !  initializing a source of seed value(s). MODULE FUNCTION Get_Random_Seed64 () RESULT ( Output ) tSInt64 :: Output END FUNCTION END INTERFACE !% To get a 32-bit integer value representing a seed value. INTERFACE GetRandomSeed32 !> To return a random 32-bit integer value that may be useful for !  initializing a source of seed value(s). MODULE FUNCTION Get_Random_Seed32 () RESULT ( Output ) tSInt32 :: Output END FUNCTION END INTERFACE !% To compute the mixing function of the MurmurHash3 hash function. INTERFACE Mix_Murmur !% To compute the 32-bit mixing function of the MurmurHash3 hash function. MODULE FUNCTION Mix_Murmur_32 ( Input ) RESULT ( Output ) tSInt32 , INTENT ( IN ) :: Input tSInt32 :: Output END FUNCTION !% To compute the 64-bit mixing function of the MurmurHash3 hash function. MODULE FUNCTION Mix_Murmur_64 ( Input ) RESULT ( Output ) tSInt64 , INTENT ( IN ) :: Input tSInt64 :: Output END FUNCTION END INTERFACE !% To compute Doug Lea's mixing function. INTERFACE Mix_Lea !% To compute Doug Lea's 32-bit mixing function. MODULE FUNCTION Mix_Lea_32 ( Input ) RESULT ( Output ) tSInt32 , INTENT ( IN ) :: Input tSInt32 :: Output END FUNCTION !% To compute Doug Lea's 64-bit mixing function. MODULE FUNCTION Mix_Lea_64 ( Input ) RESULT ( Output ) tSInt64 , INTENT ( IN ) :: Input tSInt64 :: Output END FUNCTION END INTERFACE !% To fill state(s) based on the given seed(s). INTERFACE Fill_State !% To fill 32-bit integer state(s) based on the given seed(s). MODULE SUBROUTINE Fill_State32 ( Seed , State ) tSInt32 , INTENT ( IN ) :: Seed ( 0 :) tSInt32 , INTENT ( OUT ) :: State ( 0 :) END SUBROUTINE !% To fill 64-bit integer state(s) based on the given seed(s). MODULE SUBROUTINE Fill_State64 ( Seed , State ) tSInt64 , INTENT ( IN ) :: Seed ( 0 :) tSInt64 , INTENT ( OUT ) :: State ( 0 :) END SUBROUTINE END INTERFACE !% To extend the seed if the length of SeedIn is less than that of SeedOut. INTERFACE Extend_Seed !% To extend the 32-bit integer seeds if the length of SeedIn is less than that of SeedOut. MODULE SUBROUTINE Extend_Seed32 ( SeedIn , SeedOut ) tSInt32 , INTENT ( IN ) :: SeedIn ( 0 :) tSInt32 , INTENT ( OUT ) :: SeedOut ( 0 :) END SUBROUTINE !% To extend the 64-bit integer seeds if the length of SeedIn is less than that of SeedOut. MODULE SUBROUTINE Extend_Seed64 ( SeedIn , SeedOut ) tSInt64 , INTENT ( IN ) :: SeedIn ( 0 :) tSInt64 , INTENT ( OUT ) :: SeedOut ( 0 :) END SUBROUTINE END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): FUNCTION Default_NextLogical ( RNG ) RESULT ( RandVal ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random logical value.  This default implementation !  uses the sign bit from a call to the 'NextInteger' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tLogical :: RandVal !! random value !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandVal = ( RNG % NextInteger () < 0 ) RETURN END FUNCTION Default_NextLogical !****************************************************************************** SUBROUTINE Default_NextLogicalArray ( RNG , BoolArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied logical array with generated logical values !  based on calls to NextLogical(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tLogical , INTENT ( OUT ) :: BoolArray (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( BoolArray ) BoolArray ( I ) = RNG % NextLogical () END DO RETURN END SUBROUTINE Default_NextLogicalArray !****************************************************************************** FUNCTION Default_NextByte ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 8-bit-integer value.  This default implementation !  uses the 8 high-order bits from a call to the 'NextInteger' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt8 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = ToInt8 ( SHIFTR ( RNG % NextInteger (), 24 )) RETURN END FUNCTION Default_NextByte !****************************************************************************** SUBROUTINE Default_NextByteArray ( RNG , ByteArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied 8-bit-integer array with generated byte values !  pseudo-randomly chosen uniformly from the range of values between !  -128 (inclusive) and 127 (inclusive). <br> !  This default implementation generates random bytes from repeated !  calls to the 'NextLong' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt8 , INTENT ( OUT ) :: ByteArray ( 0 :) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: I , ByteLen , WordLen , N tSInt64 :: RndLong ! FLOW ! initialize I = 0_kIndex ByteLen = SIZE ( ByteArray , KIND = kIndex ) WordLen = SHIFTA ( ByteLen , 3 ) ! fill the byte array, 8 bytes at a time DO WHILE ( WordLen > 0 ) WordLen = WordLen - 1 RndLong = RNG % NextLong () N = 8 DO WHILE ( N > 0 ) N = N - 1 ByteArray ( I ) = ToInt8 ( RndLong ) I = I + 1 RndLong = SHIFTR ( RndLong , 8 ) END DO END DO ! fill the remaining bytes IF ( I < ByteLen ) THEN RndLong = RNG % NextLong () DO WHILE ( I < ByteLen ) ByteArray ( I ) = ToInt8 ( RndLong ) I = I + 1 RndLong = SHIFTR ( RndLong , 8 ) END DO END IF RETURN END SUBROUTINE Default_NextByteArray !****************************************************************************** FUNCTION Default_NextShort ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 16-bit-integer value.  This default implementation !  uses the 16 high-order bits from a call to the 'NextInteger' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt16 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = ToInt16 ( SHIFTR ( RNG % NextInteger (), 16 )) RETURN END FUNCTION Default_NextShort !****************************************************************************** SUBROUTINE Default_NextShortArray ( RNG , ShortArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied 16-bit-integer array with generated short values !  pseudo-randomly chosen uniformly from the range of values between !  -32768 (inclusive) and 32767 (inclusive). <br> !  This default implementation generates random shorts from repeated !  calls to the 'NextLong' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt16 , INTENT ( OUT ) :: ShortArray ( 0 :) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: I , ShortLen , WordLen , N tSInt64 :: RndLong ! FLOW ! initialize I = 0_kIndex ShortLen = SIZE ( ShortArray , KIND = kIndex ) WordLen = SHIFTA ( ShortLen , 2 ) ! fill the short array, 4 elements at a time DO WHILE ( WordLen > 0 ) WordLen = WordLen - 1 RndLong = RNG % NextLong () N = 4 DO WHILE ( N > 0 ) N = N - 1 ShortArray ( I ) = ToInt16 ( RndLong ) I = I + 1 RndLong = SHIFTR ( RndLong , 16 ) END DO END DO ! fill the remaining elements IF ( I < ShortLen ) THEN RndLong = RNG % NextLong () DO WHILE ( I < ShortLen ) ShortArray ( I ) = ToInt16 ( RndLong ) I = I + 1 RndLong = SHIFTR ( RndLong , 16 ) END DO END IF RETURN END SUBROUTINE Default_NextShortArray !****************************************************************************** FUNCTION Default_NextIntegerLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 32-bit-integer value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  0 and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in the range between the lower limit (inclusive) and !  the upper limit (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt32 , INTENT ( IN ) :: Bound1 !! a required limit tSInt32 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: POW_32 = SHIFTL ( 1_kInt64 , 32 ) tSInt64 , PARAMETER :: MaskL = ToInt64 ( Z 'FFFFFFFFFFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Lower , Diff , AddVal tSInt64 :: M , L , T ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN Diff = ABS ( Bound1 - Bound2 ) Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = ABS ( Bound1 ) Lower = MIN ( Bound1 , 0_kInt32 ) END IF ! return quickly if Diff is zero IF ( Diff == 0_kInt32 ) THEN RandNum = Bound1 RETURN END IF ! determine the AddVal based on Lemire (2019): Fast Random Integer Generation ! in an Interval (https://arxiv.org/abs/1805.10941) M = IAND ( ToInt64 ( RNG % NextInteger ()), MaskL ) * Diff L = IAND ( M , MaskL ) IF ( L < Diff ) THEN ! 2&#94;32 % N T = MOD ( POW_32 , ToInt64 ( Diff )) DO WHILE ( L < T ) M = IAND ( ToInt64 ( RNG % NextInteger ()), MaskL ) * ToInt64 ( Diff ) L = IAND ( M , MaskL ) END DO END IF AddVal = ToInt32 ( SHIFTR ( M , 32 )) ! get random number RandNum = Lower + AddVal RETURN END FUNCTION Default_NextIntegerLimits !****************************************************************************** SUBROUTINE Default_NextIntegerArray ( RNG , IntegerArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied 32-bit-integer array with generated integer values !  based on calls to NextInteger(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt32 , INTENT ( OUT ) :: IntegerArray (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( IntegerArray ) IntegerArray ( I ) = RNG % NextInteger () END DO RETURN END SUBROUTINE Default_NextIntegerArray !****************************************************************************** FUNCTION Default_NextLongLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 64-bit-integer value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  0 and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in the range between the lower limit (inclusive) and !  the upper limit (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt64 , INTENT ( IN ) :: Bound1 !! a required limit tSInt64 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Lower , Diff tSInt64 :: Bits , AddVal ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN Diff = ABS ( Bound1 - Bound2 ) Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = ABS ( Bound1 ) Lower = MIN ( Bound1 , 0_kInt64 ) END IF ! return quickly if Diff is zero IF ( Diff == 0_kInt64 ) THEN RandNum = Bound1 RETURN END IF ! determine the AddVal DO Bits = SHIFTR ( RNG % NextLong (), 1 ) AddVal = MOD ( Bits , Diff ) IF ( Bits - AddVal + ( Diff - 1_kInt64 ) >= 0_kInt64 ) EXIT END DO ! get random number RandNum = Lower + AddVal RETURN END FUNCTION Default_NextLongLimits !****************************************************************************** SUBROUTINE Default_NextLongArray ( RNG , LongArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied 64-bit-integer array with generated long values !  based on calls to NextLong(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt64 , INTENT ( OUT ) :: LongArray (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( LongArray ) LongArray ( I ) = RNG % NextLong () END DO RETURN END SUBROUTINE Default_NextLongArray !****************************************************************************** FUNCTION Default_NextI128Limits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random signed 128-bit-integer value in the specified range.  If *Bound2* !  is not specified, the value is in the range between 0 and *Bound1*.  Otherwise, the !  value is in the range between *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can have either a positive !  or a negative value.  The returned value is always in the range between the lower limit !  (inclusive) and the upper limit (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt128 , INTENT ( IN ) :: Bound1 !! a required limit tSInt128 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tSInt128 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt128 :: Lower , Diff tSInt128 :: Bits , AddVal ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN Diff = ABS ( Bound1 - Bound2 ) Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = ABS ( Bound1 ) Lower = MIN ( Bound1 , ZeroI128 ) END IF ! return quickly if Diff is zero IF ( Diff == ZeroI128 ) THEN RandNum = Bound1 RETURN END IF ! determine the AddVal DO Bits = ShiftROnce ( RNG % NextI128 ()) AddVal = MOD ( Bits , Diff ) IF ( Bits - AddVal + ( Diff - OneI128 ) >= ZeroI128 ) EXIT END DO ! get random number RandNum = Lower + AddVal RETURN END FUNCTION Default_NextI128Limits !****************************************************************************** SUBROUTINE Default_NextI128Array ( RNG , I128Array ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied signed 128-bit-integer array with generated signed !  128-bit-integer values based on calls to NextI128(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt128 , INTENT ( OUT ) :: I128Array (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( I128Array ) I128Array ( I ) = RNG % NextI128 () END DO RETURN END SUBROUTINE Default_NextI128Array !****************************************************************************** FUNCTION Default_NextU128Limits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random unsigned 128-bit-integer value in the specified range.  If *Bound2* !  is not specified, the value is in the range between 0 and *Bound1*.  Otherwise, the !  value is in the range between *Bound1* and *Bound2*, where either one can be a lower !  or an upper limit.  The returned value is always in the range between the lower limit !  (inclusive) and the upper limit (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tUInt128 , INTENT ( IN ) :: Bound1 !! a required limit tUInt128 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tUInt128 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt128 :: Lower , Diff tUInt128 :: Bits , AddVal ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN IF ( Bound1 . UGT . Bound2 ) THEN Diff = Bound1 - Bound2 ELSE Diff = Bound2 - Bound1 END IF Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = Bound1 Lower = ZeroU128 END IF ! return quickly if Diff is zero IF ( Diff == ZeroU128 ) THEN RandNum = Bound1 RETURN END IF ! determine the AddVal DO Bits = ShiftROnce ( RNG % NextU128 ()) AddVal = UMOD ( Bits , Diff ) IF (( Bits + ( Diff - OneU128 )) . UGE . AddVal ) EXIT END DO ! get random number RandNum = Lower + AddVal RETURN END FUNCTION Default_NextU128Limits !****************************************************************************** SUBROUTINE Default_NextU128Array ( RNG , U128Array ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied unsigned 128-bit-integer array with generated unsigned !  128-bit-integer values based on calls to NextU128(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tUInt128 , INTENT ( OUT ) :: U128Array (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( U128Array ) U128Array ( I ) = RNG % NextU128 () END DO RETURN END SUBROUTINE Default_NextU128Array !****************************************************************************** FUNCTION Default_NextSingle ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 32-bit real value between zero (inclusive) !  and one (exclusive).  This default implementation uses the 24 high-order !  bits from a call to the 'NextInteger' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tRealSP :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! although these three parameters use different formulas, they are essentially the same. tRealSP , PARAMETER :: SNorm1 = 2.0_kSingle ** ( - 24 ) tRealSP , PARAMETER :: SNorm2 = 1.0_kSingle / SHIFTL ( 1 , 24 ) tRealSP , PARAMETER :: SNorm3 = 0.5_kSingle * EPSILON ( 1.0_kSingle ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = SHIFTR ( RNG % NextInteger (), 8 ) * SNorm1 RETURN END FUNCTION Default_NextSingle !****************************************************************************** FUNCTION Default_NextSingleLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 32-bit real value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  zero and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in the range between the lower limit (inclusive) and !  the upper limit (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tRealSP , INTENT ( IN ) :: Bound1 !! a required limit tRealSP , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tRealSP :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tRealSP :: Upper , Lower ! FLOW ! check for invalid input IF (. NOT . IEEE_IS_FINITE ( Bound1 )) THEN CALL Handle_ErrLevel ( 'Default_NextSingleLimits' , ModName , ErrWarning , & 'The *Bound1* value must be finite.' ) RandNum = Bound1 RETURN END IF ! check specified input and set Upper and Lower values IF ( PRESENT ( Bound2 )) THEN ! check for invalid input IF (. NOT . IEEE_IS_FINITE ( Bound2 )) THEN CALL Handle_ErrLevel ( 'Default_NextSingleLimits' , ModName , ErrWarning , & 'The *Bound2* value must be finite.' ) RandNum = Bound2 RETURN END IF IF ( Bound1 > Bound2 ) THEN Upper = Bound1 Lower = Bound2 ELSEIF ( Bound1 < Bound2 ) THEN Upper = Bound2 Lower = Bound1 ELSE ! Bound1 = Bound2 so return Bound1 RandNum = Bound1 RETURN END IF ELSE IF ( Bound1 > 0.0_kSingle ) THEN Upper = Bound1 Lower = 0.0_kSingle ELSEIF ( Bound1 < 0.0_kSingle ) THEN Upper = 0.0_kSingle Lower = Bound1 ELSE ! Bound1 = 0 so return 0 RandNum = 0.0_kSingle RETURN END IF END IF RandNum = RNG % NextSingle () ! This expression allows (Upper - Lower) to be infinite ! Lower + (Upper - Lower) * RandNum == Lower - Lower * RandNum + Upper * RandNum RandNum = ( 1.0_kSingle - RandNum ) * Lower + RandNum * Upper IF ( RandNum >= Upper ) THEN ! correct rounding #ifndef  __INTEL_COMPILER RandNum = IEEE_NEXT_DOWN_SP ( Upper ) #else RandNum = IEEE_NEXT_DOWN ( Upper ) #endif END IF RETURN END FUNCTION Default_NextSingleLimits !****************************************************************************** SUBROUTINE Default_NextSingleArray ( RNG , SingleArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied 32-bit-floating-point array with generated !  single values based on calls to NextSingle(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tRealSP , INTENT ( OUT ) :: SingleArray (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( SingleArray ) SingleArray ( I ) = RNG % NextSingle () END DO RETURN END SUBROUTINE Default_NextSingleArray !****************************************************************************** FUNCTION Default_NextDoubleLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 64-bit real value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  zero and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in the range between the lower limit (inclusive) and !  the upper limit (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tRealDP , INTENT ( IN ) :: Bound1 !! a required limit tRealDP , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tRealDP :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tRealDP :: Upper , Lower ! FLOW ! check for invalid input IF (. NOT . IEEE_IS_FINITE ( Bound1 )) THEN CALL Handle_ErrLevel ( 'Default_NextDoubleLimits' , ModName , ErrWarning , & 'The *Bound1* value must be finite.' ) RandNum = Bound1 RETURN END IF ! check specified input and set Upper and Lower values IF ( PRESENT ( Bound2 )) THEN ! check for invalid input IF (. NOT . IEEE_IS_FINITE ( Bound2 )) THEN CALL Handle_ErrLevel ( 'Default_NextDoubleLimits' , ModName , ErrWarning , & 'The *Bound2* value must be finite.' ) RandNum = Bound2 RETURN END IF IF ( Bound1 > Bound2 ) THEN Upper = Bound1 Lower = Bound2 ELSEIF ( Bound1 < Bound2 ) THEN Upper = Bound2 Lower = Bound1 ELSE ! Bound1 = Bound2 so return Bound1 RandNum = Bound1 RETURN END IF ELSE IF ( Bound1 > 0.0_kDouble ) THEN Upper = Bound1 Lower = 0.0_kDouble ELSEIF ( Bound1 < 0.0_kDouble ) THEN Upper = 0.0_kDouble Lower = Bound1 ELSE ! Bound1 = 0 so return 0 RandNum = 0.0_kDouble RETURN END IF END IF RandNum = RNG % NextDouble () ! This expression allows (Upper - Lower) to be infinite ! Lower + (Upper - Lower) * RandNum == Lower - Lower * RandNum + Upper * RandNum RandNum = ( 1.0_kDouble - RandNum ) * Lower + RandNum * Upper IF ( RandNum >= Upper ) THEN ! correct rounding #ifndef  __INTEL_COMPILER RandNum = IEEE_NEXT_DOWN_DP ( Upper ) #else RandNum = IEEE_NEXT_DOWN ( Upper ) #endif END IF RETURN END FUNCTION Default_NextDoubleLimits !****************************************************************************** SUBROUTINE Default_NextDoubleArray ( RNG , DoubleArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied 64-bit-floating-point array with generated !  single values based on calls to NextDouble(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tRealDP , INTENT ( OUT ) :: DoubleArray (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( DoubleArray ) DoubleArray ( I ) = RNG % NextDouble () END DO RETURN END SUBROUTINE Default_NextDoubleArray !****************************************************************************** FUNCTION Default_NextQuadLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 128-bit real value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  zero and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in the range between the lower limit (inclusive) and !  the upper limit (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tRealQP , INTENT ( IN ) :: Bound1 !! a required limit tRealQP , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tRealQP :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tRealQP :: Upper , Lower ! FLOW ! check for invalid input IF (. NOT . IEEE_IS_FINITE ( Bound1 )) THEN CALL Handle_ErrLevel ( 'Default_NextQuadLimits' , ModName , ErrWarning , & 'The *Bound1* value must be finite.' ) RandNum = Bound1 RETURN END IF ! check specified input and set Upper and Lower values IF ( PRESENT ( Bound2 )) THEN ! check for invalid input IF (. NOT . IEEE_IS_FINITE ( Bound2 )) THEN CALL Handle_ErrLevel ( 'Default_NextQuadLimits' , ModName , ErrWarning , & 'The *Bound2* value must be finite.' ) RandNum = Bound2 RETURN END IF IF ( Bound1 > Bound2 ) THEN Upper = Bound1 Lower = Bound2 ELSEIF ( Bound1 < Bound2 ) THEN Upper = Bound2 Lower = Bound1 ELSE ! Bound1 = Bound2 so return Bound1 RandNum = Bound1 RETURN END IF ELSE IF ( Bound1 > 0.0_kQuad ) THEN Upper = Bound1 Lower = 0.0_kQuad ELSEIF ( Bound1 < 0.0_kQuad ) THEN Upper = 0.0_kQuad Lower = Bound1 ELSE ! Bound1 = 0 so return 0 RandNum = 0.0_kQuad RETURN END IF END IF RandNum = RNG % NextQuad () ! This expression allows (Upper - Lower) to be infinite ! Lower + (Upper - Lower) * RandNum == Lower - Lower * RandNum + Upper * RandNum RandNum = ( 1.0_kQuad - RandNum ) * Lower + RandNum * Upper IF ( RandNum >= Upper ) THEN ! correct rounding #ifndef  __INTEL_COMPILER RandNum = IEEE_NEXT_DOWN_QP ( Upper ) #else RandNum = IEEE_NEXT_DOWN ( Upper ) #endif END IF RETURN END FUNCTION Default_NextQuadLimits !****************************************************************************** SUBROUTINE Default_NextQuadArray ( RNG , QuadArray ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To fill a user-supplied 128-bit-floating-point array with generated !  single values based on calls to NextQuad(). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tRealQP , INTENT ( OUT ) :: QuadArray (:) !! random numbers !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! fill the array DO I = 1 , SIZE ( QuadArray ) QuadArray ( I ) = RNG % NextQuad () END DO RETURN END SUBROUTINE Default_NextQuadArray !****************************************************************************** FUNCTION Default_NextString ( RNG , StrType , StrLen , MaxLen ) RESULT ( RandStr ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random string (according to the specified optional !  input if they are present; otherwise, according default settings). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( BaseRNG ), INTENT ( INOUT ) :: RNG !! 'BaseRNG' object tSInt32 , OPTIONAL , INTENT ( IN ) :: StrType !! type of string (1-6) tSInt32 , OPTIONAL , INTENT ( IN ) :: StrLen !! length of output string tSInt32 , OPTIONAL , INTENT ( IN ) :: MaxLen !! maximum length of output string; if StrLen present, this parameter is ignored tCharAlloc :: RandStr !! random string !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: LenMax , OutLen , I , J tCharAlloc :: CharacterSet tSInt32 :: CharSetLen ! FLOW LenMax = 0 ! check input string length whether it is present and valid IF ( PRESENT ( StrLen )) THEN IF ( StrLen > 0 ) THEN OutLen = StrLen LenMax = StrLen END IF END IF IF ( LenMax == 0 ) THEN ! check input maximum length whether it is present and valid IF ( PRESENT ( MaxLen )) THEN IF ( MaxLen > 0 ) LenMax = MaxLen END IF IF ( LenMax == 0 ) LenMax = 100 OutLen = RNG % NextInteger ( 0 , LenMax ) END IF ! determine character set IF ( PRESENT ( StrType )) THEN SELECT CASE ( StrType ) CASE ( AlphaOnlyCap ) CharacterSet = SET_ALPHABETS_CAP CASE ( AlphaOnlyMix ) CharacterSet = SET_ALPHABETS_MIX CASE ( AlphaNumericCap ) CharacterSet = SET_ALPHANUM_CAP CASE ( AlphaNumericMix ) CharacterSet = SET_ALPHANUM_MIX CASE ( DecimalString ) CharacterSet = SET_DEC_DIGITS CASE ( HexadecimalString ) CharacterSet = SET_HEX_DIGITS CASE DEFAULT CharacterSet = SET_ALPHANUM_MIX END SELECT ELSE CharacterSet = SET_ALPHANUM_MIX END IF ! determine length of the character set CharSetLen = LEN ( CharacterSet ) ! generate random string ALLOCATE ( CHARACTER ( LEN = OutLen ) :: RandStr ) DO I = 1 , OutLen J = RNG % NextInteger ( 1 , CharSetLen ) RandStr ( I : I ) = CharacterSet ( J : J ) END DO RETURN END FUNCTION Default_NextString !****************************************************************************** #ifndef  __INTEL_COMPILER FUNCTION IEEE_NEXT_DOWN_SP ( X ) RESULT ( XNext ) !** PURPOSE OF THIS SUBROUTINE: ! To emulate IEEE_NEXT_DOWN intrinsic function since GFortran does not have one. !** SUBROUTINE ARGUMENT DECLARATIONS: tRealSP , INTENT ( IN ) :: X tRealSP :: XNext !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tRealSP :: RVal tSInt32 :: IVal EQUIVALENCE ( IVal , RVal ) ! FLOW ! get input RVal = X ! get next down IF ( IVal > 0 ) IVal = IVal - 1 ! set output XNext = RVal RETURN END FUNCTION IEEE_NEXT_DOWN_SP !****************************************************************************** FUNCTION IEEE_NEXT_DOWN_DP ( X ) RESULT ( XNext ) !** PURPOSE OF THIS SUBROUTINE: ! To emulate IEEE_NEXT_DOWN intrinsic function since GFortran does not have one. !** SUBROUTINE ARGUMENT DECLARATIONS: tRealDP , INTENT ( IN ) :: X tRealDP :: XNext !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tRealDP :: RVal tSInt64 :: IVal EQUIVALENCE ( IVal , RVal ) ! FLOW ! get input RVal = X ! get next down IF ( IVal > 0 ) IVal = IVal - 1 ! set output XNext = RVal RETURN END FUNCTION IEEE_NEXT_DOWN_DP !****************************************************************************** FUNCTION IEEE_NEXT_DOWN_QP ( X ) RESULT ( XNext ) !** PURPOSE OF THIS SUBROUTINE: ! To emulate IEEE_NEXT_DOWN intrinsic function since GFortran does not have one. !** SUBROUTINE ARGUMENT DECLARATIONS: tRealQP , INTENT ( IN ) :: X tRealQP :: XNext !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tRealQP :: RVal tSInt64 :: IVal ( 2 ) EQUIVALENCE ( IVal , RVal ) ! FLOW ! get input RVal = X ! assuming little-endian order; get next down ! (if big-endian order just replace IVal(2) by IVal(1) in the following statement) IF ( IVal ( 2 ) > 0 ) IVal ( 2 ) = IVal ( 2 ) - 1 ! set output XNext = RVal RETURN END FUNCTION IEEE_NEXT_DOWN_QP !****************************************************************************** #endif END MODULE MClass_BaseRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_baserng.f90.html"},{"title":"MClass_XoShiRo128RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_XoShiRo128RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *XoShiRo128RNG* type and its related routines. !   The *XoShiRo128RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *XoShiRo128RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on algorithms from the Xor-Shift-Rotate !   family of generators by Sebastiano Vigna. <br> !   The *XoShiRo128RNG* type can represent three PRNG classes: <br> !   - the XoShiRo128StarStar RNG, which is a fast all-purpose 32-bit generator, <br> !   - the XoShiRo128Plus  RNG, which is a fast 32-bit generator suitable for !     real number generation, or <br> !   - the XoShiRo128PlusPlus RNG, which is a fast all-purpose 32-bit generator. <br> !   By default, the XoShiRo128StarStar RNG is employed.  However, other XoShiRo128 !   PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3) !   when initializing the generator.  The *XoShiRo128RNG* type has state size of !   128 bits. <br> !   In addition to common operations of a PRNG, the *XoShiRo128RNG* type provides !   the *Jump* and *LongJump* methods where a large (or very large) number of steps !   of the output sequence can be advanced in a single operation.  Each method creates !   (and also returns) a copy of the input PRNG and then advances the state of the !   specified PRNG.  The PRNG and its copy produce non-overlapping output for the !   length of the jump intendedly for use in parallel computations. <br> !   It is important to note that the *XoShiRo128* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://prng.di.unimi.it/\"> !       Xoshiro/Xoroshiro Generators and the PRNG shootout.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/XoShiRo128StarStar.html\"> !       Apache Commons RNG: Class XoShiRo128StarStar</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/XoShiRo128Plus.html\"> !       Apache Commons RNG: Class XoShiRo128Plus</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/XoShiRo128PlusPlus.html\"> !       Apache Commons RNG: Class XoShiRo128PlusPlus</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: XoShiRo128RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Size of the state vector tSInt32 , PARAMETER :: SEED_SIZE = 4 ! The coefficients for the jump function tSInt32 , PARAMETER :: JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt32 ( Z '8764000B' ), ToInt32 ( Z 'F542D2D3' ), & ToInt32 ( Z '6FA035C3' ), ToInt32 ( Z '77F2DB5B' )] ! The coefficients for the long jump function tSInt32 , PARAMETER :: LONG_JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt32 ( Z 'B523952E' ), ToInt32 ( Z '0B6F099F' ), & ToInt32 ( Z 'CCF5A0EF' ), ToInt32 ( Z '1C580662' )] ! Parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: XoShiRo128StarStar = 1 !! flag for XoShiRo128StarStar PRNG tSInt32 , PARAMETER , PUBLIC :: XoShiRo128Plus = 2 !! flag for XoShiRo128Plus PRNG tSInt32 , PARAMETER , PUBLIC :: XoShiRo128PlusPlus = 3 !! flag for XoShiRo128PlusPlus PRNG !** DERIVED TYPE DEFINITIONS !> The *XoShiRo128RNG* type is an *Integer* PRNG type based on algorithms from !  the Xor-Shift-Rotate family of generators by Sebastiano Vigna. TYPE , EXTENDS ( IntegerRNG ) :: XoShiRo128RNG PRIVATE ! states tSInt32 :: State0 , State1 , State2 , State3 ! algorithm flag tSInt32 :: XoShiRoAlgo = XoShiRo128StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoShiRo128RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoShiRo128RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoShiRo128RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoShiRo128RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => XoShiRo128RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoShiRo128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoShiRo128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoShiRo128Plus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo128Plus) <br> !   ! initialize with seed(s); use XoShiRo128PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo128PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoShiRo128RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoShiRo128RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoShiRo128RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoShiRo128RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG ) RESULT ( Output ) IMPORT CLASS ( XoShiRo128RNG ), INTENT ( IN ) :: RNG tSInt32 :: Output END FUNCTION Next END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE XoShiRo128RNG_InitWithFlag ( RNG , XoShiRoAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'XoShiRo128RNG' object CLASS ( XoShiRo128RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - 1, use XoShiRo128StarStar algorithm. <br> ! - 2, use XoShiRo128Plus algorithm. <br> ! - 3, use XoShiRo128PlusPlus algorithm. tSInt32 , INTENT ( IN ) :: XoShiRoAlgo !% optional 32-bit integer seed(s) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( XoShiRoAlgo , 1 , 3 )) THEN RNG % XoShiRoAlgo = XoShiRoAlgo ELSE RNG % XoShiRoAlgo = XoShiRo128StarStar END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE XoShiRo128RNG_InitWithFlag !****************************************************************************** SUBROUTINE XoShiRo128RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo128RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 0 : SEED_SIZE - 1 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! copy seeds to states RNG % State0 = Seed0 ( 0 ) RNG % State1 = Seed0 ( 1 ) RNG % State2 = Seed0 ( 2 ) RNG % State3 = Seed0 ( 3 ) ! set pointer to next output function SELECT CASE ( RNG % XoShiRoAlgo ) CASE ( XoShiRo128StarStar ) RNG % NextOutput => XoShiRo128StarStar_Next CASE ( XoShiRo128Plus ) RNG % NextOutput => XoShiRo128Plus_Next CASE ( XoShiRo128PlusPlus ) RNG % NextOutput => XoShiRo128PlusPlus_Next END SELECT RETURN END SUBROUTINE XoShiRo128RNG_BaseInit !****************************************************************************** FUNCTION XoShiRo128RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo128RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: TmpState ! FLOW ! get next integer output RandNum = RNG % NextOutput () ! update states TmpState = SHIFTL ( RNG % State1 , 9 ) RNG % State2 = IEOR ( RNG % State2 , RNG % State0 ) RNG % State3 = IEOR ( RNG % State3 , RNG % State1 ) RNG % State1 = IEOR ( RNG % State1 , RNG % State2 ) RNG % State0 = IEOR ( RNG % State0 , RNG % State3 ) RNG % State2 = IEOR ( RNG % State2 , TmpState ) RNG % State3 = RotateLeft ( RNG % State3 , 11 ) RETURN END FUNCTION XoShiRo128RNG_NextInteger !****************************************************************************** FUNCTION XoShiRo128RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo128RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % XoShiRoAlgo ) CASE ( XoShiRo128StarStar ) Name = 'XoShiRo128StarStarRNG' CASE ( XoShiRo128Plus ) Name = 'XoShiRo128PlusRNG' CASE ( XoShiRo128PlusPlus ) Name = 'XoShiRo128PlusPlusRNG' END SELECT RETURN END FUNCTION XoShiRo128RNG_GetName !****************************************************************************** FUNCTION XoShiRo128RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo128RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 4 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoShiRo128RNG_GetSeedSize !****************************************************************************** FUNCTION XoShiRo128StarStar_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo128StarStar generator, which is a fast all-purpose !  32-bit generator with memory footprint of 128 bits. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo128RNG' object tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( RNG % State0 * 5 , 7 ) * 9 RETURN END FUNCTION XoShiRo128StarStar_Next !****************************************************************************** FUNCTION XoShiRo128Plus_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo128Plus generator, which is a fast 32-bit generator !  suitable for floating-point-number generation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo128RNG' object tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RNG % State0 + RNG % State3 RETURN END FUNCTION XoShiRo128Plus_Next !****************************************************************************** FUNCTION XoShiRo128PlusPlus_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo128PlusPlus generator, which is a fast all-purpose !  32-bit generator with memory footprint of 128 bits. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo128RNG' object tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( RNG % State0 + RNG % State3 , 7 ) + RNG % State0 RETURN END FUNCTION XoShiRo128PlusPlus_Next !****************************************************************************** SUBROUTINE XoShiRo128RNG_Perform_Jump ( RNG , JCoef ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform the jump to advance the generator state. !  Resets the cached state of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo128RNG' object tSInt32 , INTENT ( IN ) :: JCoef ( 0 :) !! jump coefficients !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: S0 , S1 , S2 , S3 , I , B , Dummy ! FLOW S0 = 0 S1 = 0 S2 = 0 S3 = 0 DO I = 0 , SEED_SIZE - 1 DO B = 0 , 31 IF ( IAND ( JCoef ( I ), SHIFTL ( 1 , B )) /= 0 ) THEN S0 = IEOR ( S0 , RNG % State0 ) S1 = IEOR ( S1 , RNG % State1 ) S2 = IEOR ( S2 , RNG % State2 ) S3 = IEOR ( S3 , RNG % State3 ) END IF Dummy = RNG % NextInteger () END DO END DO RNG % State0 = S0 RNG % State1 = S1 RNG % State2 = S2 RNG % State3 = S3 RETURN END SUBROUTINE XoShiRo128RNG_Perform_Jump !****************************************************************************** FUNCTION XoShiRo128RNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy all components of the source object to the destination object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( INOUT ) :: Src !! source object TYPE ( XoShiRo128RNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! copy states Dst % State0 = Src % State0 Dst % State1 = Src % State1 Dst % State2 = Src % State2 Dst % State3 = Src % State3 ! copy algorithm flag and pointer Dst % XoShiRoAlgo = Src % XoShiRoAlgo Dst % NextOutput => Src % NextOutput ! copy initial seeds for re-initialization CALL Src % CopySeed ( Dst ) RETURN END FUNCTION XoShiRo128RNG_Copy !****************************************************************************** FUNCTION XoShiRo128RNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>64</sup> calls to the generator's !  NextInteger() method.  It can provide up to 2<sup>64</sup> non-overlapping !  subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo128RNG' object TYPE ( XoShiRo128RNG ) :: NewRNG !! new 'XoShiRo128RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( JUMP_COEFFICIENTS ) RETURN END FUNCTION XoShiRo128RNG_Jump !****************************************************************************** FUNCTION XoShiRo128RNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>96</sup> calls to the generator's !  NextInteger() method.  It can provide up to 2<sup>32</sup> non-overlapping !  subsequences of length 2<sup>96</sup>; each subsequence can provide up to !  2<sup>32</sup> non-overlapping subsequences of length 2<sup>64</sup> using !  the generator's Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo128RNG' object TYPE ( XoShiRo128RNG ) :: NewRNG !! new 'XoShiRo128RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( LONG_JUMP_COEFFICIENTS ) RETURN END FUNCTION XoShiRo128RNG_LongJump !****************************************************************************** SUBROUTINE XoShiRo128RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'XoShiRo128RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( XoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo128RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % NextOutput ) RETURN END SUBROUTINE XoShiRo128RNG_Finalization !****************************************************************************** END MODULE MClass_XoShiRo128RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_xoshiro128rng.f90.html"},{"title":"MClass_SplitMixRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_SplitMixRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *SplitMixRNG* type and its related routines. !   The *SplitMixRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *SplitMixRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *SplitMix* algorithm for !   which is an algorithm for a splittable PRNG.  It is a fast RNG, with !   64 bits of state, that can be used to initialize the state of other PRNGs. <br> !   It is important to note that the *SplitMix* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/10.1145/2714064.2660195\"> !       Guy L. Steele, Jr., Doug Lea, and Christine H. Flood. 2014. Fast splittable !       pseudorandom number generators. ACM SIGPLAN Notices, Vol. 49, No. 10, pp 453-472.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/SplitMix64.html\"> !       Apache Commons RNG: Class SplitMix64</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: SplitMixRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *SplitMixRNG* type is a *Long* PRNG type based on the !  *SplitMix* algorithm by Steele, Lea, and Flood. TYPE , EXTENDS ( LongRNG ) :: SplitMixRNG PRIVATE tSInt64 :: State ! working seed CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => SplitMixRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => SplitMixRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => SplitMixRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => SplitMixRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE SplitMixRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE SplitMixRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'SplitMixRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SplitMixRNG ), INTENT ( INOUT ) :: RNG !! 'SplitMixRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set initial state RNG % State = Seed ( 1 ) RETURN END SUBROUTINE SplitMixRNG_BaseInit !****************************************************************************** FUNCTION SplitMixRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SplitMixRNG ), INTENT ( INOUT ) :: RNG !! 'SplitMixRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! update state RNG % State = RNG % State + GOLDEN_RATIO_64 ! mix state RandNum = Mix_Stafford_13 ( RNG % State ) RETURN END FUNCTION SplitMixRNG_NextLong !****************************************************************************** FUNCTION SplitMixRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SplitMixRNG ), INTENT ( IN ) :: RNG !! 'SplitMixRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'SplitMixRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION SplitMixRNG_GetName !****************************************************************************** FUNCTION SplitMixRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SplitMixRNG ), INTENT ( IN ) :: RNG !! 'SplitMixRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION SplitMixRNG_GetSeedSize !****************************************************************************** END MODULE MClass_SplitMixRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_splitmixrng.f90.html"},{"title":"MClass_XoRoShiRo1024RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_XoRoShiRo1024RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *XoRoShiRo1024RNG* type and its related routines. !   The *XoRoShiRo1024RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *XoRoShiRo1024RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on algorithms from the Xor-Shift-Rotate !   family of generators by Sebastiano Vigna. <br> !   The *XoRoShiRo1024RNG* type can represent three PRNG classes: <br> !   - the XoRoShiRo1024StarStar RNG, which is a large-state all-purpose 64-bit generator, <br> !   - the XoRoShiRo1024Star  RNG, which is a large-state 64-bit generator suitable for !     real number generation, or <br> !   - the XoRoShiRo1024PlusPlus RNG, which is a large-state all-purpose 64-bit generator. <br> !   By default, the XoRoShiRo1024StarStar RNG is employed.  However, other XoRoShiRo1024 !   PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3) !   when initializing the generator.  The *XoRoShiRo1024RNG* type has state size of !   1024 bits and period of 2<sup>1024</sup>-1. <br> !   In addition to common operations of a PRNG, the *XoRoShiRo1024RNG* type provides !   the *Jump* and *LongJump* methods where a large (or very large) number of steps !   of the output sequence can be advanced in a single operation.  Each method creates !   (and also returns) a copy of the input PRNG and then advances the state of the !   specified PRNG.  The PRNG and its copy produce non-overlapping output for the !   length of the jump intendedly for use in parallel computations. <br> !   It is important to note that the *XoRoShiRo1024* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://prng.di.unimi.it/\"> !       Xoshiro/Xoroshiro Generators and the PRNG shootout.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoRoShiRo1024StarStar.html\"> !       Apache Commons RNG: Class XoRoShiRo1024StarStar</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoRoShiRo1024Star.html\"> !       Apache Commons RNG: Class XoRoShiRo1024Star</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoRoShiRo1024PlusPlus.html\"> !       Apache Commons RNG: Class XoRoShiRo1024PlusPlus</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: XoRoShiRo1024RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Size of the state vector tSInt32 , PARAMETER :: SEED_SIZE = 16 ! The coefficients for the jump function ! The coefficients for the long jump function tSInt64 , PARAMETER :: JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '931197D8E3177F17' ), ToInt64 ( Z 'B59422E0B9138C5F' ), & ToInt64 ( Z 'F06A6AFB49D668BB' ), ToInt64 ( Z 'ACB8A6412C8A1401' ), & ToInt64 ( Z '12304EC85F0B3468' ), ToInt64 ( Z 'B7DFE7079209891E' ), & ToInt64 ( Z '405B7EEC77D9EB14' ), ToInt64 ( Z '34EAD68280C44E4A' ), & ToInt64 ( Z 'E0E4BA3E0AC9E366' ), ToInt64 ( Z '8F46EDA8348905B7' ), & ToInt64 ( Z '328BF4DBAD90D6FF' ), ToInt64 ( Z 'C8FD6FB31C9EFFC3' ), & ToInt64 ( Z 'E899D452D4B67652' ), ToInt64 ( Z '45F387286ADE3205' ), & ToInt64 ( Z '03864F454A8920BD' ), ToInt64 ( Z 'A68FA28725B1B384' )] tSInt64 , PARAMETER :: LONG_JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '7374156360BBF00F' ), ToInt64 ( Z '4630C2EFA3B3C1F6' ), & ToInt64 ( Z '6654183A892786B1' ), ToInt64 ( Z '94F7BFCBFB0F1661' ), & ToInt64 ( Z '27D8243D3D13EB2D' ), ToInt64 ( Z '9701730F3DFB300F' ), & ToInt64 ( Z '2F293BAAE6F604AD' ), ToInt64 ( Z 'A661831CB60CD8B6' ), & ToInt64 ( Z '68280C77D9FE008C' ), ToInt64 ( Z '50554160F5BA9459' ), & ToInt64 ( Z '2FC20B17EC7B2A9A' ), ToInt64 ( Z '49189BBDC8EC9F8F' ), & ToInt64 ( Z '92A65BCA41852CC1' ), ToInt64 ( Z 'F46820DD0509C12A' ), & ToInt64 ( Z '52B00C35FBF92185' ), ToInt64 ( Z '1E5B3B7F589E03C1' )] ! Parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: XoRoShiRo1024StarStar = 1 !! flag for XoRoShiRo1024StarStar PRNG tSInt32 , PARAMETER , PUBLIC :: XoRoShiRo1024Star = 2 !! flag for XoRoShiRo1024Star PRNG tSInt32 , PARAMETER , PUBLIC :: XoRoShiRo1024PlusPlus = 3 !! flag for XoRoShiRo1024PlusPlus PRNG !** DERIVED TYPE DEFINITIONS !> The *XoRoShiRo1024RNG* type is a *Long* PRNG type based on algorithms from !  the Xor-Shift-Rotate family of generators by Sebastiano Vigna. TYPE , EXTENDS ( LongRNG ) :: XoRoShiRo1024RNG PRIVATE ! states tSInt64 :: State ( 0 : SEED_SIZE - 1 ) ! index in \"state\" array tSInt32 :: Index ! algorithm flag tSInt32 :: XoRoShiRoAlgo = XoRoShiRo1024StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoRoShiRo1024RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoRoShiRo1024RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoRoShiRo1024RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoRoShiRo1024RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoRoShiRo1024RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoRoShiRo1024RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoRoShiRo1024RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoRoShiRo1024StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoRoShiRo1024StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoRoShiRo1024Star algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo1024Star) <br> !   ! initialize with seed(s); use XoRoShiRo1024PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo1024PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoRoShiRo1024RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoRoShiRo1024RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoRoShiRo1024RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoRoShiRo1024RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG , S0 , S15 ) RESULT ( Output ) IMPORT CLASS ( XoRoShiRo1024RNG ), INTENT ( IN ) :: RNG tSInt64 , INTENT ( IN ) :: S0 , S15 tSInt64 :: Output END FUNCTION Next END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE XoRoShiRo1024RNG_InitWithFlag ( RNG , XoRoShiRoAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'XoRoShiRo1024RNG' object CLASS ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - 1, use XoRoShiRo1024StarStar algorithm. <br> ! - 2, use XoRoShiRo1024Star algorithm. <br> ! - 3, use XoRoShiRo1024PlusPlus algorithm. tSInt32 , INTENT ( IN ) :: XoRoShiRoAlgo !% optional 32-bit integer seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( XoRoShiRoAlgo , 1 , 3 )) THEN RNG % XoRoShiRoAlgo = XoRoShiRoAlgo ELSE RNG % XoRoShiRoAlgo = XoRoShiRo1024StarStar END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE XoRoShiRo1024RNG_InitWithFlag !****************************************************************************** SUBROUTINE XoRoShiRo1024RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo1024RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Seed0 ( 0 : SEED_SIZE - 1 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! copy seeds to states RNG % State = Seed0 ! set pointer to next output function SELECT CASE ( RNG % XoRoShiRoAlgo ) CASE ( XoRoShiRo1024StarStar ) RNG % NextOutput => XoRoShiRo1024StarStar_Next CASE ( XoRoShiRo1024Star ) RNG % NextOutput => XoRoShiRo1024Star_Next CASE ( XoRoShiRo1024PlusPlus ) RNG % NextOutput => XoRoShiRo1024PlusPlus_Next END SELECT RETURN END SUBROUTINE XoRoShiRo1024RNG_BaseInit !****************************************************************************** FUNCTION XoRoShiRo1024RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo1024RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S15 tSInt32 :: Q ! FLOW ! update index Q = RNG % Index RNG % Index = IAND (( RNG % Index + 1 ), 15 ) ! get random number S0 = RNG % State ( RNG % Index ) S15 = RNG % State ( Q ) RandNum = RNG % NextOutput ( S0 , S15 ) ! update state S15 = IEOR ( S15 , S0 ) RNG % State ( Q ) = IEOR ( IEOR ( RotateLeft ( S0 , 25 ), S15 ), SHIFTL ( S15 , 27 )) RNG % State ( RNG % Index ) = RotateLeft ( S15 , 36 ) RETURN END FUNCTION XoRoShiRo1024RNG_NextLong !****************************************************************************** FUNCTION XoRoShiRo1024RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo1024RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % XoRoShiRoAlgo ) CASE ( XoRoShiRo1024StarStar ) Name = 'XoRoShiRo1024StarStarRNG' CASE ( XoRoShiRo1024Star ) Name = 'XoRoShiRo1024StarRNG' CASE ( XoRoShiRo1024PlusPlus ) Name = 'XoRoShiRo1024PlusPlusRNG' END SELECT RETURN END FUNCTION XoRoShiRo1024RNG_GetName !****************************************************************************** FUNCTION XoRoShiRo1024RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo1024RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = SEED_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo1024RNG_GetSeedSize !****************************************************************************** FUNCTION XoRoShiRo1024StarStar_Next ( RNG , S0 , S15 ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo1024StarStar generator, which is large-state all-purpose !  64-bit generator with memory footprint of 1024 bits and the period !  of 2**1024-1. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo1024RNG' object tSInt64 , INTENT ( IN ) :: S0 , S15 tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( S0 * 5 , 7 ) * 9 ASSOCIATE ( Dummy => RNG , Dummy2 => S15 ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo1024StarStar_Next !****************************************************************************** FUNCTION XoRoShiRo1024Star_Next ( RNG , S0 , S15 ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo1024Plus generator, which is a large-state 64-bit !  generator suitable for floating-point-number generation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo1024RNG' object tSInt64 , INTENT ( IN ) :: S0 , S15 tSInt64 :: Output !! 64-bit output !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: Multiplier = ToInt64 ( Z '9E3779B97F4A7C13' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = S0 * Multiplier ASSOCIATE ( Dummy => RNG , Dummy2 => S15 ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo1024Star_Next !****************************************************************************** FUNCTION XoRoShiRo1024PlusPlus_Next ( RNG , S0 , S15 ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo1024PlusPlus generator, which is a large-state all-purpose !  64-bit generator with memory footprint of 1024 bits. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo1024RNG' object tSInt64 , INTENT ( IN ) :: S0 , S15 tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( S0 + S15 , 23 ) + S15 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo1024PlusPlus_Next !****************************************************************************** SUBROUTINE XoRoShiRo1024RNG_Perform_Jump ( RNG , JCoef ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform the jump to advance the generator state. !  Resets the cached state of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo1024RNG' object tSInt64 , INTENT ( IN ) :: JCoef ( 0 :) !! jump coefficients !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: NewState ( 0 : SEED_SIZE - 1 ) tSInt64 :: Dummy tSInt32 :: I , J , B ! FLOW NewState = 0_kInt64 DO I = 0 , SEED_SIZE - 1 DO B = 0 , 63 IF ( IAND ( JCoef ( I ), SHIFTL ( 1_kInt64 , B )) /= 0_kInt64 ) THEN DO J = 0 , SEED_SIZE - 1 NewState ( J ) = IEOR ( NewState ( J ), RNG % State ( IAND ( J + RNG % Index , 15 ))) END DO END IF Dummy = RNG % NextLong () END DO END DO ! Note: Calling the NextLong() function updates 'index'. ! The present index effectively becomes 0. DO J = 0 , SEED_SIZE - 1 RNG % State ( IAND ( J + RNG % Index , 15 )) = NewState ( J ) END DO RETURN END SUBROUTINE XoRoShiRo1024RNG_Perform_Jump !****************************************************************************** FUNCTION XoRoShiRo1024RNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy all components of the source object to the destination object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: Src !! source object TYPE ( XoRoShiRo1024RNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! copy components Dst % State = Src % State Dst % Index = Src % Index Dst % XoRoShiRoAlgo = Src % XoRoShiRoAlgo Dst % NextOutput => Src % NextOutput CALL Src % CopySeed ( Dst ) RETURN END FUNCTION XoRoShiRo1024RNG_Copy !****************************************************************************** FUNCTION XoRoShiRo1024RNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>512</sup> calls to the generator's !  NextLong() method.  It can provide up to 2<sup>512</sup> non-overlapping !  subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo1024RNG' object TYPE ( XoRoShiRo1024RNG ) :: NewRNG !! new 'XoRoShiRo1024RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( JUMP_COEFFICIENTS ) RETURN END FUNCTION XoRoShiRo1024RNG_Jump !****************************************************************************** FUNCTION XoRoShiRo1024RNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>768</sup> calls to the generator's !  NextLong() method.  It can provide up to 2<sup>256</sup> non-overlapping !  subsequences of length 2<sup>768</sup>; each subsequence can provide up to !  2<sup>256</sup> non-overlapping subsequences of length 2<sup>512</sup> using !  the generator's Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo1024RNG' object TYPE ( XoRoShiRo1024RNG ) :: NewRNG !! new 'XoRoShiRo1024RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( LONG_JUMP_COEFFICIENTS ) RETURN END FUNCTION XoRoShiRo1024RNG_LongJump !****************************************************************************** SUBROUTINE XoRoShiRo1024RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'XoRoShiRo1024RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( XoRoShiRo1024RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo1024RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % NextOutput ) RETURN END SUBROUTINE XoRoShiRo1024RNG_Finalization !****************************************************************************** END MODULE MClass_XoRoShiRo1024RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_xoroshiro1024rng.f90.html"},{"title":"MClass_SuperKiss32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_SuperKiss32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *SuperKiss32RNG* type and its related routines. !   The *SuperKiss32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *SuperKiss32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the 32-bit *SuperKISS* algorithm !   by George Marsaglia. <br> !   The 32-bit *SuperKiss* algorithm consists of a combination of three sub-generators: <br> !   - complementary-multiply-with-carry (CMWC) generator <br> !   - linear congruential generator, and <br> !   - xorshift generator. <br> !   The three generators are updated independently, and their states are combined !   to form a sequence of 32-bit output words. <br> !   The *SuperKiss32RNG* type has a memory footprint of 1320608 bits and a period of !   (5)(2<sup>1320481</sup>)(2<sup>32</sup>-1). <br> !   It is important to note that the *SuperKiss32* PRNG requires an explicit !   initialization by first calling the *BaseInit* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://en.wikipedia.org/wiki/KISS_(algorithm)\"> !       KISS (algorithm)</a> <br> !   [2] <a href=\"https://groups.google.com/g/sci.math/c/QiTrbq0XeyM/m/_qSRAdMaeK8J\"> !       SuperKISS for 32- and 64-bit RNGs in both C and Fortran</a> <br> !   [3] <a href=\"http://forums.silverfrost.com/viewtopic.php?p=20716&sid=ef071ed8302541d789d1e08c0fbda580\"> !       Help for a 64-bit RNG</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: SuperKiss32RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: tIndex , PARAMETER :: QSIZE = 41265_kIndex tSInt32 , PARAMETER :: CMul = 69609_kInt32 tSInt32 , PARAMETER :: CAdd = 123_kInt32 !** DERIVED TYPE DEFINITIONS !> The *SuperKiss32RNG* type is an *Integer* PRNG type based on the *SuperKISS* !  algorithm by George Marsaglia. TYPE , EXTENDS ( IntegerRNG ) :: SuperKiss32RNG PRIVATE !% state of CMWC generator tSInt32 :: QState ( QSIZE ) !% index into QState tIndex :: Index = QSIZE + 1_kIndex !% carry tSInt32 :: Carry = 362_kInt32 !% state of the linear congruential generator tSInt32 :: CState = 1236789_kInt32 !% state of the xorshift generator tSInt32 :: XState = 521288629_kInt32 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *BaseInit* method to initialize the PRNG instead. PROCEDURE :: BaseInit => SuperKiss32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => SuperKiss32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => SuperKiss32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => SuperKiss32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE SuperKiss32RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE SuperKiss32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'SuperKiss32RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss32RNG ), INTENT ( INOUT ) :: RNG !! 'SuperKiss32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! set initial seed(s) SELECT CASE ( SIZE ( Seed )) CASE ( 1 ) RNG % Carry = IEOR ( RNG % Carry , Seed ( 1 )) CASE ( 2 ) RNG % Carry = IEOR ( RNG % Carry , Seed ( 1 )) RNG % CState = IEOR ( RNG % CState , Seed ( 2 )) CASE ( 3 ) RNG % Carry = IEOR ( RNG % Carry , Seed ( 1 )) RNG % CState = IEOR ( RNG % CState , Seed ( 2 )) RNG % XState = IEOR ( RNG % XState , Seed ( 3 )) END SELECT ! fill QState with Congruential + Xorshift DO I = 1_kIndex , QSIZE ! Congruential generator RNG % CState = CMul * RNG % CState + CAdd ! Xorshift generator RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 13 )) RNG % XState = IEOR ( RNG % XState , SHIFTR ( RNG % XState , 17 )) RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 5 )) ! left shift in ref#2 (right in #3) ! fill Q RNG % QState ( I ) = RNG % CState + RNG % XState END DO RETURN END SUBROUTINE SuperKiss32RNG_BaseInit !****************************************************************************** FUNCTION SuperKiss32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss32RNG ), INTENT ( INOUT ) :: RNG !! 'SuperKiss32RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: QState ! FLOW ! CMWC generator IF ( RNG % Index <= QSIZE ) THEN QState = RNG % QState ( RNG % Index ) ELSE RNG % Index = 1 QState = Refill ( RNG % QState , RNG % Carry , RNG % Index ) END IF ! Congruential generator RNG % CState = CMul * RNG % CState + CAdd ! Xorshift generator RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 13 )) RNG % XState = IEOR ( RNG % XState , SHIFTR ( RNG % XState , 17 )) RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 5 )) ! left shift in ref#2 (right in #3) ! SuperKISS generator RandNum = QState + RNG % CState + RNG % XState RETURN CONTAINS FUNCTION Refill ( Q , C , ID ) RESULT ( Q1 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To refill the QState array and return the first QState. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( INOUT ) :: Q (:) !! QState array tSInt32 , INTENT ( INOUT ) :: C !! Carry tIndex , INTENT ( INOUT ) :: ID !! Index tSInt32 :: Q1 !! the first QState !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: I tSInt32 :: Z , H ! FLOW ! refill QState DO I = 1_kIndex , QSIZE H = IAND ( C , 1_kInt32 ) Z = SHIFTR ( SHIFTL ( Q ( I ), 9 ), 1 ) + SHIFTR ( SHIFTL ( Q ( I ), 7 ), 1 ) + SHIFTR ( C , 1 ) C = SHIFTR ( Q ( I ), 23 ) + SHIFTR ( Q ( I ), 25 ) + SHIFTR ( Z , 31 ) Q ( I ) = NOT ( SHIFTL ( Z , 1 ) + H ) END DO ! return the first QState Q1 = Q ( ID ) ! update index ID = ID + 1_kIndex RETURN END FUNCTION Refill !************************************************************************** END FUNCTION SuperKiss32RNG_NextInteger !****************************************************************************** FUNCTION SuperKiss32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss32RNG ), INTENT ( IN ) :: RNG !! 'SuperKiss32RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'SuperKiss32RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION SuperKiss32RNG_GetName !****************************************************************************** FUNCTION SuperKiss32RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss32RNG ), INTENT ( IN ) :: RNG !! 'SuperKiss32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 3_kIndex ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION SuperKiss32RNG_GetSeedSize !****************************************************************************** END MODULE MClass_SuperKiss32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_superkiss32rng.f90.html"},{"title":"MClass_L128X128RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L128X128RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L128X128RNG* type and its related routines. !   The *L128X128RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L128X128RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L128X128* algorithm.  The !   *L128X128* algorithm is a specific member of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L128X128RNG* type employs a 128-bit LCG, a 128-bit XBG and a mixing function !   where its memory footprint is 384 bits and its period is roughly 2<sup>256</sup>. <br> !   In addition to common operations of a PRNG, the *L128X128RNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform.  <br> !   It is important to note that the *L128X128* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : OPERATOR (. ULT .), U128_Multiply_High => UMul128_Upper64 USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L128X128RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *L128X128RNG* type is a *Long* PRNG type based on the *L128X128* !  algorithms, which are specific members of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L128X128RNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt64 :: SH , SL , X0 , X1 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128X128RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128X128RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128X128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128X128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128X128RNG_Split ! --------------------------------------------------------------------- END TYPE L128X128RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L128X128RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L128X128RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X128RNG ), INTENT ( INOUT ) :: RNG !! 'L128X128RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: InitSeed1 , InitSeed2 ! FLOW ! set initial seed InitSeed1 = IEOR ( Seed ( 1 ), SILVER_RATIO_64 ) InitSeed2 = InitSeed1 + GOLDEN_RATIO_64 ! set parameters as follows: ! The seed is hashed by Mix_Murmur to produce the 'A' parameter. ! The seed is hashed by Mix_Stafford_13 to produce the initial 'X0', ! which will then be used to produce the first generated value. ! Then 'X1' is filled in as if by a SplitMix PRNG with GOLDEN_RATIO_64 ! as the gamma value and Mix_Stafford_13 as the mixer. CALL L128X128RNG_SetParameters ( RNG , Mix_Murmur ( InitSeed1 ), Mix_Murmur ( InitSeed2 ), & 0_kInt64 , 1_kInt64 , Mix_Stafford_13 ( InitSeed2 ), & Mix_Stafford_13 ( InitSeed2 + GOLDEN_RATIO_64 )) RETURN END SUBROUTINE L128X128RNG_BaseInit !****************************************************************************** FUNCTION L128X128RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X128RNG ), INTENT ( INOUT ) :: RNG !! 'L128X128RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Low half of multiplier used in the LCG portion of the algorithm; ! the overall multiplier is (2**64 + ML). ! Chosen based on research by Sebastiano Vigna and Guy Steele (2019). ! The spectral scores for dimensions 2 through 8 for the multiplier 0x1d605bbb58c8abbfdLL ! are [0.991889, 0.907938, 0.830964, 0.837980, 0.780378, 0.797464, 0.761493]. tSInt64 , PARAMETER :: ML = ToInt64 ( Z 'D605BBB58C8ABBFD' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: U , Q0 , Q1 ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % SH + RNG % X0 ) ! Update the LCG subgenerator ! The LCG is, in effect, s = ((1LL << 64) + ML) * s + a, if only we had 128-bit arithmetic. U = ML * RNG % SL RNG % SH = ( ML * RNG % SH ) + U128_Multiply_High ( ML , RNG % SL ) + RNG % SL + RNG % AH RNG % SL = U + RNG % AL ! Handle the carry propagation from low half to high half. IF ( RNG % SL . ULT . U ) RNG % SH = RNG % SH + 1_kInt64 ! Update the XBG subgenerator Q0 = RNG % X0 Q1 = RNG % X1 ! xoroshiro128v1_0 Q1 = IEOR ( Q1 , Q0 ) Q0 = RotateLeft ( Q0 , 24 ) Q0 = IEOR ( IEOR ( Q0 , Q1 ), SHIFTL ( Q1 , 16 )) Q1 = RotateLeft ( Q1 , 37 ) RNG % X0 = Q0 RNG % X1 = Q1 RETURN END FUNCTION L128X128RNG_NextLong !****************************************************************************** FUNCTION L128X128RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X128RNG ), INTENT ( IN ) :: RNG !! 'L128X128RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'L128X128RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L128X128RNG_GetName !****************************************************************************** FUNCTION L128X128RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X128RNG ), INTENT ( IN ) :: RNG !! 'L128X128RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L128X128RNG_GetSeedSize !****************************************************************************** SUBROUTINE L128X128RNG_SetParameters ( RNG , AH , AL , SH , SL , X0 , X1 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To set parameters of the object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L128X128RNG ), INTENT ( INOUT ) :: RNG tSInt64 , INTENT ( IN ) :: AH , AL tSInt64 , INTENT ( IN ) :: SH , SL tSInt64 , INTENT ( IN ) :: X0 , X1 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: V ! FLOW ! Force a to be odd RNG % AH = AH RNG % AL = IOR ( AL , 1_kInt64 ) RNG % SH = SH RNG % SL = SL ! check if X0 and X1 are both zero or not IF ( IOR ( X0 , X1 ) == 0 ) THEN ! If X0 and X1 are both zero, we must choose nonzero values. V = SH + GOLDEN_RATIO_64 ! At least one of the two values generated here will be nonzero. RNG % X0 = Mix_Stafford_13 ( V ) RNG % X1 = Mix_Stafford_13 ( V + GOLDEN_RATIO_64 ) ELSE RNG % X0 = X0 RNG % X1 = X1 END IF RETURN END SUBROUTINE L128X128RNG_SetParameters !****************************************************************************** FUNCTION L128X128RNG_Split ( RNG , Brine ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize and return a new 'L128X128RNG' object that shares no mutable !  state with this object. However, with very high probability, the set of !  values collectively generated by the two objects has the same statistical !  properties as if the same quantity of values were generated by a single !  thread using a single object.  Either or both of the two objects may be !  further split using this routine, and the same expected statistical !  properties apply to the entire set of generators constructed by such !  recursive splitting. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L128X128RNG' object CLASS ( L128X128RNG ), INTENT ( INOUT ) :: RNG !> a long value, of which the low 63 bits provide a unique id among calls !  to this routine for constructing a single series of Generator objects. tSInt64 , OPTIONAL , INTENT ( IN ) :: Brine !% new 'L128X128RNG' object TYPE ( L128X128RNG ) :: NewRNG !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Salt ! FLOW ! check optional input IF ( PRESENT ( Brine )) THEN Salt = Brine ELSE Salt = RNG % NextLong () END IF ! copy initial seeds for re-initialization CALL RNG % CopySeed ( NewRNG ) ! set parameters by picking a new object at random but use the 63 bits ! of the salt for (the low half of) 'A' CALL L128X128RNG_SetParameters ( NewRNG , RNG % NextLong (), SHIFTL ( Salt , 1 ), RNG % NextLong (), & RNG % NextLong (), RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION L128X128RNG_Split !****************************************************************************** END MODULE MClass_L128X128RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l128x128rng.f90.html"},{"title":"MClass_PcgLcg32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_PcgLcg32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *PcgLcg32RNG* type and its related routines. !   The *PcgLcg32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *PcgLcg32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on algorithms from the Permuted !   Congruential Generator (PCG) family that use an internal 64-bit Linear !   Congruential Generator (LCG) and output 32-bits per cycle. <br> !   The *PcgLcg32RNG* type can represent two PRNG classes: <br> !   - a PCG that is composed of a 64-bit LCG combined with the XSH-RR (xorshift; !     random rotate) output transformation, or <br> !   - a PCG that is composed of a 64-bit LCG combined with the XSH-RS (xorshift; !     random shift) output transformation. <br> !   By default, the random rotate (RR) transformation is employed.  However, the !   random shift (RS) transformation can be utilized by specifying an algorithm !   flag to true when initializing the generator.  The *PcgLcg32RNG* type has !   state size of 128 bits and a period of 2<sup>64</sup>. <br> !   It is important to note that the *PcgLcg32* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.pcg-random.org/\"> !       PCG, A Family of Better Random Number Generators.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/PcgXshRr32.html\"> !       Apache Commons RNG: Class PcgXshRr32</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/PcgXshRs32.html\"> !       Apache Commons RNG: Class PcgXshRs32</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: PcgLcg32RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *PcgLcg32RNG* type is an *Integer* PRNG type based on algorithms from !  the Permuted Congruential Generator (PCG) family that use an internal 64-bit !  Linear Congruential Generator (LCG) and output 32-bits per cycle. TYPE , EXTENDS ( IntegerRNG ) :: PcgLcg32RNG PRIVATE ! The state of the LCG tSInt64 :: State ! The increment of the LCG tSInt64 :: Increment ! algorithm flag tLogical :: UseRandShift = FalseVal ! function to transform the state PROCEDURE ( Transform ), NOPASS , POINTER :: Permute => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitLongSeeds => PcgLcg32RNG_InitLongSeeds PROCEDURE , PRIVATE :: InitWithFlag => PcgLcg32RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => PcgLcg32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => PcgLcg32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => PcgLcg32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => PcgLcg32RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use random rotate (default) transformation <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use random shift transformation <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: PcgLcg32RNG_Finalization ! --------------------------------------------------------------------- END TYPE PcgLcg32RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Transform ( Input ) RESULT ( Output ) IMPORT tSInt64 , INTENT ( IN ) :: Input tSInt32 :: Output END FUNCTION Transform END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE PcgLcg32RNG_InitWithFlag ( RNG , UseRandShift , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'PcgLcg32RNG' object CLASS ( PcgLcg32RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - true, the PCG generator is composed of a 64-bit LCG combined with !   the XSH-RS (xorshift; random shift) output transformation. <br> ! - false, the PCG generator is composed of a 64-bit LCG combined with !   the XSH-RR (xorshift; random rotate) output transformation. tLogical , INTENT ( IN ) :: UseRandShift !% optional 32-bit integer seed(s) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set algorithm flag RNG % UseRandShift = UseRandShift IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE PcgLcg32RNG_InitWithFlag !****************************************************************************** SUBROUTINE PcgLcg32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified 32-bit integer seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgLcg32RNG ), INTENT ( INOUT ) :: RNG !! 'PcgLcg32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IntSeed ( 4 ) tSInt64 :: LngSeed ( 2 ) ! FLOW ! fill 32-bit integer seeds CALL Fill_State ( Seed , IntSeed ) ! get 64-bit integer seeds LngSeed ( 1 ) = IOR ( IAND ( ToInt64 ( IntSeed ( 1 )), MaskL ), SHIFTL ( ToInt64 ( IntSeed ( 2 )), 32 )) & + GOLDEN_RATIO_64 LngSeed ( 2 ) = IOR ( IAND ( ToInt64 ( IntSeed ( 3 )), MaskL ), SHIFTL ( ToInt64 ( IntSeed ( 4 )), 32 )) & + GOLDEN_RATIO_64 ! initialize with 64-bit integer seeds CALL RNG % InitLongSeeds ( LngSeed ) RETURN END SUBROUTINE PcgLcg32RNG_BaseInit !****************************************************************************** SUBROUTINE PcgLcg32RNG_InitLongSeeds ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'PcgLcg32RNG' object with 64-bit integer seeds whose size is 2. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'PcgLcg32RNG' object CLASS ( PcgLcg32RNG ), INTENT ( INOUT ) :: RNG !% long seeds tSInt64 , INTENT ( IN ) :: Seed ( 2 ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set pointer to transformation function IF ( RNG % UseRandShift ) THEN RNG % Permute => Transform_Shift ELSE RNG % Permute => Transform_Rotate END IF ! Ensure the increment is odd to provide a maximal period LCG. RNG % Increment = IOR ( SHIFTL ( Seed ( 2 ), 1 ), 1_kInt64 ) RNG % State = Bump ( RNG , Seed ( 1 ) + RNG % Increment ) RETURN END SUBROUTINE PcgLcg32RNG_InitLongSeeds !****************************************************************************** FUNCTION PcgLcg32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgLcg32RNG ), INTENT ( INOUT ) :: RNG !! 'PcgLcg32RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: X ! FLOW X = RNG % State RNG % State = Bump ( RNG , RNG % State ) RandNum = RNG % Permute ( X ) RETURN END FUNCTION PcgLcg32RNG_NextInteger !****************************************************************************** FUNCTION PcgLcg32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgLcg32RNG ), INTENT ( IN ) :: RNG !! 'PcgLcg32RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( RNG % UseRandShift ) THEN Name = 'PcgLcg32_XSH_RS_RNG' ELSE Name = 'PcgLcg32_XSH_RR_RNG' END IF RETURN END FUNCTION PcgLcg32RNG_GetName !****************************************************************************** FUNCTION PcgLcg32RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgLcg32RNG ), INTENT ( IN ) :: RNG !! 'PcgLcg32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 4 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION PcgLcg32RNG_GetSeedSize !****************************************************************************** FUNCTION Bump ( RNG , Input ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To provide the next state of the LCG. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgLcg32RNG ), INTENT ( IN ) :: RNG !! 'PcgLcg32RNG' object tSInt64 , INTENT ( IN ) :: Input !! current state tSInt64 :: Output !! next state !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = Input * 6364136223846793005_kInt64 + RNG % Increment RETURN END FUNCTION Bump !****************************************************************************** FUNCTION Transform_Rotate ( Input ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To transform the 64-bit state of the generator to a 32-bit output !  using random rotate. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( IN ) :: Input !! current state tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Count ! FLOW Count = ToInt32 ( SHIFTR ( Input , 59 )) Output = RotateRight ( ToInt32 ( SHIFTR ( IEOR ( Input , SHIFTR ( Input , 18 )), 27 )), Count ) RETURN END FUNCTION Transform_Rotate !****************************************************************************** FUNCTION Transform_Shift ( Input ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To transform the 64-bit state of the generator to a 32-bit output !  using random shift. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( IN ) :: Input !! current state tSInt32 :: Output !! 32-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Count ! FLOW Count = ToInt32 ( SHIFTR ( Input , 61 )) Output = ToInt32 ( SHIFTR ( IEOR ( Input , SHIFTR ( Input , 22 )), 22 + Count )) RETURN END FUNCTION Transform_Shift !****************************************************************************** SUBROUTINE PcgLcg32RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'PcgLcg32RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( PcgLcg32RNG ), INTENT ( INOUT ) :: RNG !! 'PcgLcg32RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % Permute ) RETURN END SUBROUTINE PcgLcg32RNG_Finalization !****************************************************************************** END MODULE MClass_PcgLcg32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_pcglcg32rng.f90.html"},{"title":"MClass_XoShiRo512RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_XoShiRo512RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *XoShiRo512RNG* type and its related routines. !   The *XoShiRo512RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *XoShiRo512RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on algorithms from the Xor-Shift-Rotate !   family of generators by Sebastiano Vigna. <br> !   The *XoShiRo512RNG* type can represent three PRNG classes: <br> !   - the XoShiRo512StarStar RNG, which is a fast all-purpose 64-bit generator, <br> !   - the XoShiRo512Plus  RNG, which is a fast 64-bit generator suitable for !     real number generation, or <br> !   - the XoShiRo512PlusPlus RNG, which is a fast all-purpose 64-bit generator. <br> !   By default, the XoShiRo512StarStar RNG is employed.  However, other XoShiRo512 !   PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3) !   when initializing the generator.  The *XoShiRo512RNG* type has state size of !   512 bits and period of 2<sup>512</sup>-1. <br> !   In addition to common operations of a PRNG, the *XoShiRo512RNG* type provides !   the *Jump* and *LongJump* methods where a large (or very large) number of steps !   of the output sequence can be advanced in a single operation.  Each method creates !   (and also returns) a copy of the input PRNG and then advances the state of the !   specified PRNG.  The PRNG and its copy produce non-overlapping output for the !   length of the jump intendedly for use in parallel computations. <br> !   It is important to note that the *XoShiRo512* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://prng.di.unimi.it/\"> !       Xoshiro/Xoroshiro Generators and the PRNG shootout.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoShiRo512StarStar.html\"> !       Apache Commons RNG: Class XoShiRo512StarStar</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoShiRo512Plus.html\"> !       Apache Commons RNG: Class XoShiRo512Plus</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoShiRo512PlusPlus.html\"> !       Apache Commons RNG: Class XoShiRo512PlusPlus</a> !** PURPOSE OF THIS MODULE: ! This module contains a random number generator class based on the ! Xor-Shift-Rotate family of 64-bit generators with 512-bits of state. !** REFERENCES: ! [1] XorShiRo / XoRoShiro Generators.  http://xoshiro.di.unimi.it !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: XoShiRo512RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Size of the state vector tSInt32 , PARAMETER :: SEED_SIZE = 8 ! The coefficients for the jump function tSInt64 , PARAMETER :: JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '33ED89B6E7A353F9' ), ToInt64 ( Z '760083D7955323BE' ), & ToInt64 ( Z '2837F2FBB5F22FAE' ), ToInt64 ( Z '4B8C5674D309511C' ), & ToInt64 ( Z 'B11AC47A7BA28C25' ), ToInt64 ( Z 'F1BE7667092BCC1C' ), & ToInt64 ( Z '53851EFDB6DF0AAF' ), ToInt64 ( Z '1EBBC8B23EAF25DB' )] ! The coefficients for the long jump function tSInt64 , PARAMETER :: LONG_JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '11467FEF8F921D28' ), ToInt64 ( Z 'A2A819F2E79C8EA8' ), & ToInt64 ( Z 'A8299FC284B3959A' ), ToInt64 ( Z 'B4D347340CA63EE1' ), & ToInt64 ( Z '1CB0940BEDBFF6CE' ), ToInt64 ( Z 'D956C5C4FA1F8E17' ), & ToInt64 ( Z '915E38FD4EDA93BC' ), ToInt64 ( Z '5B3CCDFA5D7DACA5' )] ! Parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: XoShiRo512StarStar = 1 !! flag for XoShiRo512StarStar PRNG tSInt32 , PARAMETER , PUBLIC :: XoShiRo512Plus = 2 !! flag for XoShiRo512Plus PRNG tSInt32 , PARAMETER , PUBLIC :: XoShiRo512PlusPlus = 3 !! flag for XoShiRo512PlusPlus PRNG !** DERIVED TYPE DEFINITIONS !> The *XoShiRo512RNGRNG* type is a *Long* PRNG type based on algorithms from !  the Xor-Shift-Rotate family of generators by Sebastiano Vigna. TYPE , EXTENDS ( LongRNG ) :: XoShiRo512RNG PRIVATE ! states tSInt64 :: State ( 0 : SEED_SIZE - 1 ) ! algorithm flag tSInt32 :: XoShiRoAlgo = XoShiRo512StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoShiRo512RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoShiRo512RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoShiRo512RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoShiRo512RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoShiRo512RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoShiRo512RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoShiRo512RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoShiRo512StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoShiRo512StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoShiRo512Plus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo512Plus) <br> !   ! initialize with seed(s); use XoShiRo512PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoShiRo512PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoShiRo512RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoShiRo512RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoShiRo512RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoShiRo512RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG ) RESULT ( Output ) IMPORT CLASS ( XoShiRo512RNG ), INTENT ( IN ) :: RNG tSInt64 :: Output END FUNCTION Next END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE XoShiRo512RNG_InitWithFlag ( RNG , XoShiRoAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'XoShiRo512RNG' object CLASS ( XoShiRo512RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - 1, use XoShiRo512StarStar algorithm. <br> ! - 2, use XoShiRo512Plus algorithm. <br> ! - 3, use XoShiRo512PlusPlus algorithm. tSInt32 , INTENT ( IN ) :: XoShiRoAlgo !% optional 32-bit integer seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( XoShiRoAlgo , 1 , 3 )) THEN RNG % XoShiRoAlgo = XoShiRoAlgo ELSE RNG % XoShiRoAlgo = XoShiRo512StarStar END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE XoShiRo512RNG_InitWithFlag !****************************************************************************** SUBROUTINE XoShiRo512RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: ! To initialize the 'XoShiRo512RNG' object with optional initial seeds. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo512RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Seed0 ( 0 : SEED_SIZE - 1 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! copy seeds to states RNG % State = Seed0 ! set pointer to next output function SELECT CASE ( RNG % XoShiRoAlgo ) CASE ( XoShiRo512StarStar ) RNG % NextOutput => XoShiRo512StarStar_Next CASE ( XoShiRo512Plus ) RNG % NextOutput => XoShiRo512Plus_Next CASE ( XoShiRo512PlusPlus ) RNG % NextOutput => XoShiRo512PlusPlus_Next END SELECT RETURN END SUBROUTINE XoShiRo512RNG_BaseInit !****************************************************************************** FUNCTION XoShiRo512RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo512RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: TmpState ! FLOW ! get next integer output RandNum = RNG % NextOutput () ! update states TmpState = SHIFTL ( RNG % State ( 1 ), 11 ) RNG % State ( 2 ) = IEOR ( RNG % State ( 2 ), RNG % State ( 0 )) RNG % State ( 5 ) = IEOR ( RNG % State ( 5 ), RNG % State ( 1 )) RNG % State ( 1 ) = IEOR ( RNG % State ( 1 ), RNG % State ( 2 )) RNG % State ( 7 ) = IEOR ( RNG % State ( 7 ), RNG % State ( 3 )) RNG % State ( 3 ) = IEOR ( RNG % State ( 3 ), RNG % State ( 4 )) RNG % State ( 4 ) = IEOR ( RNG % State ( 4 ), RNG % State ( 5 )) RNG % State ( 0 ) = IEOR ( RNG % State ( 0 ), RNG % State ( 6 )) RNG % State ( 6 ) = IEOR ( RNG % State ( 6 ), RNG % State ( 7 )) RNG % State ( 6 ) = IEOR ( RNG % State ( 6 ), TmpState ) RNG % State ( 7 ) = RotateLeft ( RNG % State ( 7 ), 21 ) RETURN END FUNCTION XoShiRo512RNG_NextLong !****************************************************************************** FUNCTION XoShiRo512RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo512RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % XoShiRoAlgo ) CASE ( XoShiRo512StarStar ) Name = 'XoShiRo512StarStarRNG' CASE ( XoShiRo512Plus ) Name = 'XoShiRo512PlusRNG' CASE ( XoShiRo512PlusPlus ) Name = 'XoShiRo512PlusPlusRNG' END SELECT RETURN END FUNCTION XoShiRo512RNG_GetName !****************************************************************************** FUNCTION XoShiRo512RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo512RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = SEED_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoShiRo512RNG_GetSeedSize !****************************************************************************** FUNCTION XoShiRo512StarStar_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo512StarStar generator, which is a fast all-purpose 64-bit !  generator with memory footprint of 512 bits and the period of 2**512-1. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo512RNG' object tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( RNG % State ( 1 ) * 5 , 7 ) * 9 RETURN END FUNCTION XoShiRo512StarStar_Next !****************************************************************************** FUNCTION XoShiRo512Plus_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoShiRo512Plus generator, which is a fast 64-bit generator !  suitable for floating-point-number generation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( IN ) :: RNG !! 'XoShiRo512RNG' object tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RNG % State ( 0 ) + RNG % State ( 2 ) RETURN END FUNCTION XoShiRo512Plus_Next !****************************************************************************** FUNCTION XoShiRo512PlusPlus_Next ( RNG ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: ! To return the next integer output based on the current states of ! the XoShiRo512PlusPlus generator, which is a fast all-purpose ! 64-bit generator with memory footprint of 512 bits. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( IN ) :: RNG ! 'XoShiRo512RNG' object tSInt64 :: Output ! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( RNG % State ( 0 ) + RNG % State ( 2 ), 17 ) + RNG % State ( 2 ) RETURN END FUNCTION XoShiRo512PlusPlus_Next !****************************************************************************** SUBROUTINE XoShiRo512RNG_Perform_Jump ( RNG , JCoef ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform the jump to advance the generator state. !  Resets the cached state of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo512RNG' object tSInt64 , INTENT ( IN ) :: JCoef ( 0 :) !! jump coefficients !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S ( 0 : SEED_SIZE - 1 ), Dummy tSInt32 :: I , J , B ! FLOW S = 0_kInt64 DO I = 0 , SEED_SIZE - 1 DO B = 0 , 63 IF ( IAND ( JCoef ( I ), SHIFTL ( 1_kInt64 , B )) /= 0_kInt64 ) THEN DO J = 0 , SEED_SIZE - 1 S ( J ) = IEOR ( S ( J ), RNG % State ( J )) END DO END IF Dummy = RNG % NextLong () END DO END DO RNG % State = S RETURN END SUBROUTINE XoShiRo512RNG_Perform_Jump !****************************************************************************** FUNCTION XoShiRo512RNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy all components of the source object to the destination object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( INOUT ) :: Src !! source object TYPE ( XoShiRo512RNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! copy components Dst % State = Src % State Dst % XoShiRoAlgo = Src % XoShiRoAlgo Dst % NextOutput => Src % NextOutput CALL Src % CopySeed ( Dst ) RETURN END FUNCTION XoShiRo512RNG_Copy !****************************************************************************** FUNCTION XoShiRo512RNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>256</sup> calls to the generator's !  NextLong() method.  It can provide up to 2<sup>256</sup> non-overlapping !  subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo512RNG' object TYPE ( XoShiRo512RNG ) :: NewRNG !! new 'XoShiRo512RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( JUMP_COEFFICIENTS ) RETURN END FUNCTION XoShiRo512RNG_Jump !****************************************************************************** FUNCTION XoShiRo512RNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>384</sup> calls to the generator's !  NextLong() method.  It can provide up to 2<sup>128</sup> non-overlapping !  subsequences of length 2<sup>384</sup>; each subsequence can provide up to !  2<sup>128</sup> non-overlapping subsequences of length 2<sup>256</sup> using !  the generator's Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoShiRo512RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo512RNG' object TYPE ( XoShiRo512RNG ) :: NewRNG !! new 'XoShiRo512RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance CALL RNG % PerformJump ( LONG_JUMP_COEFFICIENTS ) RETURN END FUNCTION XoShiRo512RNG_LongJump !****************************************************************************** SUBROUTINE XoShiRo512RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'XoShiRo512RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( XoShiRo512RNG ), INTENT ( INOUT ) :: RNG !! 'XoShiRo512RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % NextOutput ) RETURN END SUBROUTINE XoShiRo512RNG_Finalization !****************************************************************************** END MODULE MClass_XoShiRo512RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_xoshiro512rng.f90.html"},{"title":"MClass_Well32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Well32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Well32RNG* type and its related routines. !   The *Well32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Well32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the Well Equidistributed !   Long-period Linear (WELL) algorithms by Francois Panneton, Pierre L'Ecuyer, !   and Makoto Matsumoto. <br> !   The *Well32RNG* type can represent six PRNG classes: <br> !   - a WELL512a PRNG, <br> !   - a WELL1024a PRNG, <br> !   - a WELL19937a PRNG, <br> !   - a WELL19937c PRNG, <br> !   - a WELL49937a PRNG, or <br> !   - a WELL49937b PRNG <br> !   where the numbers in the PRNG names give their state size in bits and the !   letter suffixes denote variants of the same size. <br> !   By default, The *WELL49937b* PRNG is employed.  However, other Well32 PRNG !   variants can be utilized by specifying an algorithm flag (between 1 to 6) !   when initializing the generator.  <br> !   It is important to note that the *Well32* PRNGs require an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  However, as exceptions, one of the *GetSeedSize* !   methods can be called  before the *Initialize* method to inquire the !   size of seeds required by a specific PRNG.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/10.1145/1132973.1132974\"> !       F. Panneton, P. L'Ecuyer, and M. Matsumoto.  2006.  Improved Long-Period !       Generators Based on Linear Recurrences Modulo 2.  ACM Transactions on !       Mathematical Software, 32(1): 1-16.</a> <br> !   [2] <a href=\"https://en.wikipedia.org/wiki/Well_equidistributed_long-period_linear\"> !       Well equidistributed long-period linear PRNG</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/AbstractWell.html\"> !       Apache Commons RNG: Class AbstractWell</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/Well512a.html\"> !       Apache Commons RNG: Class Well512a</a> <br> !   [5] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/Well1024a.html\"> !       Apache Commons RNG: Class Well1024a</a> <br> !   [6] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/Well19937a.html\"> !       Apache Commons RNG: Class Well19937a</a> <br> !   [7] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/Well19937c.html\"> !       Apache Commons RNG: Class Well19937c</a> <br> !   [8] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/Well44497a.html\"> !       Apache Commons RNG: Class Well44497a</a> <br> !   [9] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/Well44497b.html\"> !       Apache Commons RNG: Class Well44497b</a> !** USE STATEMENTS: USE MBase_Common USE MBase_MemHandlers , ONLY : MemAlloc , MemFree USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Well32RNG PUBLIC :: CalculateBlockCount PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Block size tSInt32 , PARAMETER :: BLOCK_SIZE = 32 ! parameters for WELL512a tSInt32 , PARAMETER :: K_512 = 512 tSInt32 , PARAMETER :: M1_512 = 13 tSInt32 , PARAMETER :: M2_512 = 9 tSInt32 , PARAMETER :: M3_512 = 5 ! parameters for WELL1024a tSInt32 , PARAMETER :: K_1024 = 1024 tSInt32 , PARAMETER :: M1_1024 = 3 tSInt32 , PARAMETER :: M2_1024 = 24 tSInt32 , PARAMETER :: M3_1024 = 10 ! parameters for WELL19937a and WELL19937c tSInt32 , PARAMETER :: K_19937 = 19937 tSInt32 , PARAMETER :: M1_19937 = 70 tSInt32 , PARAMETER :: M2_19937 = 179 tSInt32 , PARAMETER :: M3_19937 = 449 ! parameters for WELL49937a and WELL49937b tSInt32 , PARAMETER :: K_49937 = 49937 tSInt32 , PARAMETER :: M1_49937 = 23 tSInt32 , PARAMETER :: M2_49937 = 481 tSInt32 , PARAMETER :: M3_49937 = 229 ! parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: WELL512a = 1 !! flag for Well512a PRNG tSInt32 , PARAMETER , PUBLIC :: WELL1024a = 2 !! flag for Well1024a PRNG tSInt32 , PARAMETER , PUBLIC :: WELL19937a = 3 !! flag for Well19937a PRNG tSInt32 , PARAMETER , PUBLIC :: WELL19937c = 4 !! flag for Well19937c PRNG tSInt32 , PARAMETER , PUBLIC :: WELL49937a = 5 !! flag for Well49937a PRNG tSInt32 , PARAMETER , PUBLIC :: WELL49937b = 6 !! flag for Well49937b PRNG !** DERIVED TYPE DEFINITIONS !> The *Well32RNG* type is an *Integer* PRNG type based on the Well !  Equidistributed Long-period Linear (WELL) generators by Francois !  Panneton, Pierre L'Ecuyer, and Makoto Matsumoto. TYPE , EXTENDS ( IntegerRNG ) :: Well32RNG PRIVATE ! Current index in the bytes pool tSInt32 :: Index ! Bytes pool tSInt32 , ALLOCATABLE :: V (:) ! Index indirection table giving for each index its predecessor taking table size into account. tSInt32 , ALLOCATABLE :: IRm1 (:) ! Index indirection table giving for each index its second predecessor taking table size into account. tSInt32 , ALLOCATABLE :: IRm2 (:) ! Index indirection table giving for each index the value index + m1 taking table size into account. tSInt32 , ALLOCATABLE :: I1 (:) ! Index indirection table giving for each index the value index + m2 taking table size into account. tSInt32 , ALLOCATABLE :: I2 (:) ! Index indirection table giving for each index the value index + m3 taking table size into account. tSInt32 , ALLOCATABLE :: I3 (:) ! algorithm flag tSInt32 :: WellAlgo = WELL49937b ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- ! initialization procedures PROCEDURE , PRIVATE :: InitWithFlag => WELL32RNG_InitWithFlag ! auxiliary procedures PROCEDURE , PRIVATE :: GetIndexPred PROCEDURE , PRIVATE :: GetIndexPred2 PROCEDURE , PRIVATE :: GetIndexM1 PROCEDURE , PRIVATE :: GetIndexM2 PROCEDURE , PRIVATE :: GetIndexM3 ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Well32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Well32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Well32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator for the default algorithm (WELL49937b). <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Well32RNG_GetSeedSize_I !> **Type-Bound Function**: GetSeedSize2 <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator for a specified algorithm. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize2(WELL1024a) PROCEDURE :: GetSeedSize2 => Well32RNG_GetSeedSize_II ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use WELL49937b (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use WELL49937b (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use WELL512a algorithm <br> !   --->    CALL RNG%Initialize(WELL512a) <br> !   ! initialize with seed(s); use WELL19937c algorithm <br> !   --->    CALL RNG%Initialize(WELL19937c, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: Well32RNG_Finalization ! --------------------------------------------------------------------- END TYPE Well32RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG ) RESULT ( RandNum ) IMPORT CLASS ( Well32RNG ), INTENT ( INOUT ) :: RNG ! 'Well32RNG' object tSInt32 :: RandNum ! random number END FUNCTION END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE WELL32RNG_InitWithFlag ( RNG , WellAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'WELL32RNG' object CLASS ( WELL32RNG ), INTENT ( INOUT ) :: RNG !% algorithm flag (1-6); if out of applicable range, set it to default (WELL49937b) tSInt32 , INTENT ( IN ) :: WellAlgo !% optional seed(s) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( WellAlgo , 1 , 6 )) THEN RNG % WellAlgo = WellAlgo ELSE RNG % WellAlgo = WELL49937b END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE WELL32RNG_InitWithFlag !****************************************************************************** SUBROUTINE WELL32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( WELL32RNG ), INTENT ( INOUT ) :: RNG !! 'WELL32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! initialize the generator and set pointer to next output function ! based on the algorithm flag SELECT CASE ( RNG % WellAlgo ) CASE ( WELL512a ) CALL Init_Internal ( RNG , K_512 , M1_512 , M2_512 , M3_512 , Seed ) RNG % NextOutput => Well512RNG_NextInteger CASE ( WELL1024a ) CALL Init_Internal ( RNG , K_1024 , M1_1024 , M2_1024 , M3_1024 , Seed ) RNG % NextOutput => Well1024RNG_NextInteger CASE ( WELL19937a , WELL19937c ) CALL Init_Internal ( RNG , K_19937 , M1_19937 , M2_19937 , M3_19937 , Seed ) RNG % NextOutput => Well19937RNG_NextInteger CASE ( WELL49937a , WELL49937b ) CALL Init_Internal ( RNG , K_49937 , M1_49937 , M2_49937 , M3_49937 , Seed ) RNG % NextOutput => Well49937RNG_NextInteger END SELECT RETURN CONTAINS SUBROUTINE Init_Internal ( RNG , K , M1 , M2 , M3 , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Well32RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( INOUT ) :: RNG !! 'Well32RNG' object tSInt32 , INTENT ( IN ) :: K !! number of bits in the pool tSInt32 , INTENT ( IN ) :: M1 !! first parameter of the algorithm tSInt32 , INTENT ( IN ) :: M2 !! second parameter of the algorithm tSInt32 , INTENT ( IN ) :: M3 !! third parameter of the algorithm tSInt32 , INTENT ( IN ) :: Seed (:) !! seeds !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: N , J ! FLOW ! calculate the number of 32-bits blocks N = CalculateBlockCount ( K ) ! allocate working arrays CALL MemAlloc ( RNG % V , N , StartID = 0_kIndex ) CALL MemAlloc ( RNG % IRm1 , N , StartID = 0_kIndex ) CALL MemAlloc ( RNG % IRm2 , N , StartID = 0_kIndex ) CALL MemAlloc ( RNG % I1 , N , StartID = 0_kIndex ) CALL MemAlloc ( RNG % I2 , N , StartID = 0_kIndex ) CALL MemAlloc ( RNG % I3 , N , StartID = 0_kIndex ) ! set initial seed CALL Fill_State_Internal ( Seed , RNG % V ) ! Initial index RNG % Index = 0 ! pre-compute indirection index tables. These tables are used for optimizing access ! they allow saving computations like \"(j + r - 2) % r\" with costly modulo operations DO J = 0 , N - 1 RNG % IRm1 ( J ) = MOD ( J + N - 1 , N ) RNG % IRm2 ( J ) = MOD ( J + N - 2 , N ) RNG % I1 ( J ) = MOD ( J + M1 , N ) RNG % I2 ( J ) = MOD ( J + M2 , N ) RNG % I3 ( J ) = MOD ( J + M3 , N ) END DO RETURN END SUBROUTINE Init_Internal !************************************************************************** SUBROUTINE Fill_State_Internal ( Seed , State ) !** PURPOSE OF THIS SUBROUTINE: ! To fill State based on the given seed. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: Seed ( 0 :) tSInt32 , INTENT ( OUT ) :: State ( 0 :) !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , PARAMETER :: Mask = ToInt64 ( Z '00000000FFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: SeedSize tSInt64 :: Current tIndex :: I ! FLOW SeedSize = SIZE ( Seed ) State ( 0 : SeedSize - 1 ) = Seed ( 0 : SeedSize - 1 ) DO I = SeedSize , SIZE ( State ) - 1 Current = State ( I - SeedSize ) State ( I ) = ToInt32 ( IAND (( 1812433253_kInt64 * IEOR ( Current , SHIFTA ( Current , 30 )) + I ), Mask )) END DO RETURN END SUBROUTINE Fill_State_Internal !************************************************************************** END SUBROUTINE WELL32RNG_BaseInit !****************************************************************************** FUNCTION CalculateBlockCount ( K ) RESULT ( Count ) !** PURPOSE OF THIS SUBROUTINE: ! To calculate the number of 32-bits blocks. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: K ! Number of bits in the pool tSInt32 :: Count ! the number of 32-bits blocks !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! The bits pool contains k bits, k = r w - p where r is the number ! of w bits blocks, w is the block size (always 32 in the original paper) ! and p is the number of unused bits in the last block. Count = ( K + BLOCK_SIZE - 1 ) / BLOCK_SIZE RETURN END FUNCTION CalculateBlockCount !****************************************************************************** FUNCTION GetIndexPred ( RNG , Index ) RESULT ( IndxOut ) !** PURPOSE OF THIS SUBROUTINE: ! To return the predecessor of the given index modulo the table size !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( IN ) :: RNG ! 'Well32RNG' object tSInt32 , INTENT ( IN ) :: Index ! index the index to look at tSInt32 :: IndxOut ! (index - 1) % table size !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IndxOut = RNG % IRm1 ( Index ) RETURN END FUNCTION GetIndexPred !****************************************************************************** FUNCTION GetIndexPred2 ( RNG , Index ) RESULT ( IndxOut ) !** PURPOSE OF THIS SUBROUTINE: ! To return the second predecessor of the given index modulo the table size !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( IN ) :: RNG ! 'Well32RNG' object tSInt32 , INTENT ( IN ) :: Index ! index the index to look at tSInt32 :: IndxOut ! (index - 2) % table size !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IndxOut = RNG % IRm2 ( Index ) RETURN END FUNCTION GetIndexPred2 !****************************************************************************** FUNCTION GetIndexM1 ( RNG , Index ) RESULT ( IndxOut ) !** PURPOSE OF THIS SUBROUTINE: ! To return index + M1 modulo the table size !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( IN ) :: RNG ! 'Well32RNG' object tSInt32 , INTENT ( IN ) :: Index ! index the index to look at tSInt32 :: IndxOut ! (index + M1) % table size !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IndxOut = RNG % I1 ( Index ) RETURN END FUNCTION GetIndexM1 !****************************************************************************** FUNCTION GetIndexM2 ( RNG , Index ) RESULT ( IndxOut ) !** PURPOSE OF THIS SUBROUTINE: ! To return index + M2 modulo the table size !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( IN ) :: RNG ! 'Well32RNG' object tSInt32 , INTENT ( IN ) :: Index ! index the index to look at tSInt32 :: IndxOut ! (index + M2) % table size !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IndxOut = RNG % I2 ( Index ) RETURN END FUNCTION GetIndexM2 !****************************************************************************** FUNCTION GetIndexM3 ( RNG , Index ) RESULT ( IndxOut ) !** PURPOSE OF THIS SUBROUTINE: ! To return index + M3 modulo the table size !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( IN ) :: RNG ! 'Well32RNG' object tSInt32 , INTENT ( IN ) :: Index ! index the index to look at tSInt32 :: IndxOut ! (index + M3) % table size !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IndxOut = RNG % I3 ( Index ) RETURN END FUNCTION GetIndexM3 !****************************************************************************** FUNCTION Well512RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: ! To return the 32-bit random integer value for WELL512a !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( INOUT ) :: RNG ! 'Well32RNG' object tSInt32 :: RandNum ! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt32 , PARAMETER :: CPAR = ToInt32 ( Z 'DA442D24' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IndexRm1 , VI , VI1 , VI2 tSInt32 :: Z0 , Z1 , Z2 , Z3 , Z4 ! FLOW IndexRm1 = RNG % GetIndexPred ( RNG % Index ) VI = RNG % V ( RNG % Index ) VI1 = RNG % V ( RNG % GetIndexM1 ( RNG % Index )) VI2 = RNG % V ( RNG % GetIndexM2 ( RNG % Index )) Z0 = RNG % V ( IndexRm1 ) ! the values below include the errata of the original article Z1 = IEOR ( IEOR ( VI , SHIFTL ( VI , 16 )), IEOR ( VI1 , SHIFTL ( VI1 , 15 ))) Z2 = IEOR ( VI2 , SHIFTR ( VI2 , 11 )) Z3 = IEOR ( Z1 , Z2 ) Z4 = IEOR ( IEOR ( IEOR ( IEOR ( Z0 , SHIFTL ( Z0 , 2 )), IEOR ( Z1 , SHIFTL ( Z1 , 18 ))), & SHIFTL ( Z2 , 28 )), IEOR ( Z3 , IAND ( SHIFTL ( Z3 , 5 ), CPAR ))) RNG % V ( RNG % Index ) = Z3 RNG % V ( IndexRm1 ) = Z4 RNG % Index = IndexRm1 RandNum = Z4 RETURN END FUNCTION Well512RNG_NextInteger !****************************************************************************** FUNCTION Well1024RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: ! To return the 32-bit random integer value for WELL1024a !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( INOUT ) :: RNG ! 'Well32RNG' object tSInt32 :: RandNum ! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IndexRm1 , V0 , VM1 , VM2 , VM3 tSInt32 :: Z0 , Z1 , Z2 , Z3 , Z4 ! FLOW IndexRm1 = RNG % GetIndexPred ( RNG % Index ) V0 = RNG % V ( RNG % Index ) VM1 = RNG % V ( RNG % GetIndexM1 ( RNG % Index )) VM2 = RNG % V ( RNG % GetIndexM2 ( RNG % Index )) VM3 = RNG % V ( RNG % GetIndexM3 ( RNG % Index )) Z0 = RNG % V ( IndexRm1 ) Z1 = IEOR ( V0 , IEOR ( VM1 , SHIFTR ( VM1 , 8 ))) Z2 = IEOR ( IEOR ( VM2 , SHIFTL ( VM2 , 19 )), IEOR ( VM3 , SHIFTL ( VM3 , 14 ))) Z3 = IEOR ( Z1 , Z2 ) Z4 = IEOR ( IEOR ( IEOR ( Z0 , SHIFTL ( Z0 , 11 )), IEOR ( Z1 , SHIFTL ( Z1 , 7 ))), IEOR ( Z2 , SHIFTL ( Z2 , 13 ))) RNG % V ( RNG % Index ) = Z3 RNG % V ( IndexRm1 ) = Z4 RNG % Index = IndexRm1 RandNum = Z4 RETURN END FUNCTION Well1024RNG_NextInteger !****************************************************************************** FUNCTION Well19937RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: ! To return the 32-bit random integer value for WELL19937a and WELL19937c !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( INOUT ) :: RNG ! 'Well32RNG' object tSInt32 :: RandNum ! random number !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , PARAMETER :: MaskA = ToInt32 ( Z '7FFFFFFF' ) tSInt32 , PARAMETER :: MaskB = ToInt32 ( Z '80000000' ) tSInt32 , PARAMETER :: C1 = ToInt32 ( Z 'E46E1700' ) tSInt32 , PARAMETER :: C2 = ToInt32 ( Z '9B868000' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IndexRm1 , IndexRm2 , V0 , VM1 , VM2 , VM3 tSInt32 :: Z0 , Z1 , Z2 , Z3 , Z4 ! FLOW IndexRm1 = RNG % GetIndexPred ( RNG % Index ) IndexRm2 = RNG % GetIndexPred2 ( RNG % Index ) V0 = RNG % V ( RNG % Index ) VM1 = RNG % V ( RNG % GetIndexM1 ( RNG % Index )) VM2 = RNG % V ( RNG % GetIndexM2 ( RNG % Index )) VM3 = RNG % V ( RNG % GetIndexM3 ( RNG % Index )) Z0 = IEOR ( IAND ( MaskB , RNG % V ( IndexRm1 )), IAND ( MaskA , RNG % V ( IndexRm2 ))) Z1 = IEOR ( IEOR ( V0 , SHIFTL ( V0 , 25 )), IEOR ( VM1 , SHIFTR ( VM1 , 27 ))) Z2 = IEOR ( SHIFTR ( VM2 , 9 ), IEOR ( VM3 , SHIFTR ( VM3 , 1 ))) Z3 = IEOR ( Z1 , Z2 ) Z4 = IEOR ( IEOR ( IEOR ( Z0 , IEOR ( Z1 , SHIFTL ( Z1 , 9 ))), IEOR ( Z2 , SHIFTL ( Z2 , 21 ))), & IEOR ( Z3 , SHIFTR ( Z3 , 21 ))) RNG % V ( RNG % Index ) = Z3 RNG % V ( IndexRm1 ) = Z4 RNG % V ( IndexRm2 ) = IAND ( RNG % V ( IndexRm2 ), MaskB ) RNG % Index = IndexRm1 IF ( RNG % WellAlgo == WELL19937c ) THEN ! Matsumoto-Kurita tempering to get a maximally equidistributed generator Z4 = IEOR ( Z4 , IAND ( SHIFTL ( Z4 , 7 ), C1 )) Z4 = IEOR ( Z4 , IAND ( SHIFTL ( Z4 , 15 ), C2 )) END IF RandNum = Z4 RETURN END FUNCTION Well19937RNG_NextInteger !****************************************************************************** FUNCTION Well49937RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: ! To return the 32-bit random integer value for WELL49937a and WELL49937b !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( INOUT ) :: RNG ! 'Well32RNG' object tSInt32 :: RandNum ! random number !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , PARAMETER :: MaskA = ToInt32 ( Z '00007FFF' ) tSInt32 , PARAMETER :: MaskB = ToInt32 ( Z 'FFFF8000' ) tSInt32 , PARAMETER :: M1 = ToInt32 ( Z 'FBFFFFFF' ) tSInt32 , PARAMETER :: M2 = ToInt32 ( Z '00020000' ) tSInt32 , PARAMETER :: M3 = ToInt32 ( Z 'B729FCEC' ) tSInt32 , PARAMETER :: C1 = ToInt32 ( Z '93DD1400' ) tSInt32 , PARAMETER :: C2 = ToInt32 ( Z 'FA118000' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IndexRm1 , IndexRm2 , V0 , VM1 , VM2 , VM3 tSInt32 :: Z0 , Z1 , Z2 , Z3 , Z4 , Z2Prime , Z2Second ! FLOW IndexRm1 = RNG % GetIndexPred ( RNG % Index ) IndexRm2 = RNG % GetIndexPred2 ( RNG % Index ) V0 = RNG % V ( RNG % Index ) VM1 = RNG % V ( RNG % GetIndexM1 ( RNG % Index )) VM2 = RNG % V ( RNG % GetIndexM2 ( RNG % Index )) VM3 = RNG % V ( RNG % GetIndexM3 ( RNG % Index )) !  the values below include the errata of the original article Z0 = IEOR ( IAND ( MaskB , RNG % V ( IndexRm1 )), IAND ( MaskA , RNG % V ( IndexRm2 ))) Z1 = IEOR ( IEOR ( V0 , SHIFTL ( V0 , 24 )), IEOR ( VM1 , SHIFTR ( VM1 , 30 ))) Z2 = IEOR ( IEOR ( VM2 , SHIFTL ( VM2 , 10 )), SHIFTL ( VM3 , 26 )) Z3 = IEOR ( Z1 , Z2 ) Z2Prime = IAND ( IEOR ( SHIFTL ( Z2 , 9 ), SHIFTR ( Z2 , 23 )), M1 ) IF ( IAND ( Z2 , M2 ) == 0 ) THEN Z2Second = Z2Prime ELSE Z2Second = IEOR ( Z2Prime , M3 ) END IF Z4 = IEOR ( IEOR ( IEOR ( Z0 , IEOR ( Z1 , SHIFTR ( Z1 , 20 ))), Z2Second ), Z3 ) RNG % V ( RNG % Index ) = Z3 RNG % V ( IndexRm1 ) = Z4 RNG % V ( IndexRm2 ) = IAND ( RNG % V ( IndexRm2 ), MaskB ) RNG % Index = IndexRm1 IF ( RNG % WellAlgo == WELL49937b ) THEN ! Matsumoto-Kurita tempering to get a maximally equidistributed generator Z4 = IEOR ( Z4 , IAND ( SHIFTL ( Z4 , 7 ), C1 )) Z4 = IEOR ( Z4 , IAND ( SHIFTL ( Z4 , 15 ), C2 )) END IF RandNum = Z4 RETURN END FUNCTION Well49937RNG_NextInteger !****************************************************************************** FUNCTION Well32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: ! To return the 32-bit random integer value !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( INOUT ) :: RNG ! 'Well32RNG' object tSInt32 :: RandNum ! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = RNG % NextOutput () RETURN END FUNCTION Well32RNG_NextInteger !****************************************************************************** FUNCTION Well32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: ! To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( IN ) :: RNG ! 'Well32RNG' object tCharAlloc :: Name ! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % WellAlgo ) CASE ( WELL512a ) Name = 'Well512aRNG' CASE ( WELL1024a ) Name = 'Well1024aRNG' CASE ( WELL19937a ) Name = 'Well19937aRNG' CASE ( WELL19937c ) Name = 'Well19937cRNG' CASE ( WELL49937a ) Name = 'Well49937aRNG' CASE ( WELL49937b ) Name = 'Well49937bRNG' END SELECT RETURN END FUNCTION Well32RNG_GetName !****************************************************************************** FUNCTION Well32RNG_GetSeedSize_I ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator !  for default algorithm (WELL49937b). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Well32RNG ), INTENT ( IN ) :: RNG !! 'Well32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: K ! FLOW K = K_49937 Size = CalculateBlockCount ( K ) ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Well32RNG_GetSeedSize_I !****************************************************************************** FUNCTION Well32RNG_GetSeedSize_II ( RNG , WellAlgo ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator !  for the specified algorithm. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'Well32RNG' object CLASS ( Well32RNG ), INTENT ( IN ) :: RNG !% algorithm flag (1-6); if out of applicable range, set it to default (WELL49937b) tSInt32 , INTENT ( IN ) :: WellAlgo !% size of specified seed(s) tIndex :: Size !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: K ! FLOW SELECT CASE ( WellAlgo ) CASE ( WELL512a ) K = K_512 CASE ( WELL1024a ) K = K_1024 CASE ( WELL19937a , WELL19937c ) K = K_19937 CASE ( WELL49937a , WELL49937b ) K = K_49937 CASE DEFAULT K = K_49937 END SELECT Size = CalculateBlockCount ( K ) ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Well32RNG_GetSeedSize_II !****************************************************************************** SUBROUTINE Well32RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'Well32RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( Well32RNG ), INTENT ( INOUT ) :: RNG !! 'Well32RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW CALL MemFree ( RNG % V ) CALL MemFree ( RNG % IRm1 ) CALL MemFree ( RNG % IRm2 ) CALL MemFree ( RNG % I1 ) CALL MemFree ( RNG % I2 ) CALL MemFree ( RNG % I3 ) NULLIFY ( RNG % NextOutput ) RETURN END SUBROUTINE Well32RNG_Finalization !****************************************************************************** END MODULE MClass_Well32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_well32rng.f90.html"},{"title":"MClass_L128XMRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L128XMRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L128XMRNG* type and its related routines. !   The *L128XMRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L128XMRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L128XM* algorithms. !   The *L128XM* algorithms are specific members of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L128XMRNG* type can represent three PRNG classes:  <br> !   - the L128X128Mix RNG, <br> !   - the L128X256Mix RNG, or <br> !   - the L128X1024Mix RNG.  <br> !   The *L128X128* RNG employs a 128-bit LCG, a 128-bit XBG and a mixing function !   where its memory footprint is 384 bits and its period is roughly 2<sup>256</sup>. <br> !   The *L128X256* RNG employ a 128-bit LCG, a 256-bit XBG and a mixing function !   where its memory footprint is 512 bits and its period is roughly 2<sup>384</sup>. <br> !   The *L128X1024* RNGs employ a 128-bit LCG, a 1024-bit XBG and a mixing function !   where its memory footprint is 1312 bits and its period is roughly 2<sup>1152</sup>. <br> !   By default, The *L128X128Mix* PRNG is employed.  However, other *L128XM* PRNG !   variants can be utilized by specifying an algorithm flag (between 1 to 3) !   when initializing the generator.  <br> !   In addition to common operations of a PRNG, the *L128XMRNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform. <br> !   The *L128XMRNG* type also provides the *Jump* and *LongJump* methods where !   a large (or very large) number of steps of the output sequence can be advanced !   in a single operation.  Each method creates (and also returns) a copy of the !   input PRNG and then advances the state of the specified PRNG.  The PRNG and its !   copy produce non-overlapping output for the length of the jump intendedly for !   use in parallel computations. <br> !   It is important to note that the *L128XM* PRNG requires an explicit initialization !   by first calling the *Initialize* method before using any other methods.  Otherwise, !   the generator may produce undesirable random sequences.  Also, it should be noted !   that the implementation of this PRNG type is based on references #3-5 whereas the !   *L128X128RNG*, *L128X256RNG*, and *L128X1024RNG* types, which are based on the same !   algorithms, are based their implementation on reference #2.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/L128X128Mix.html\"> !       Apache Commons RNG: Class L128X128Mix</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/L128X256Mix.html\"> !       Apache Commons RNG: Class L128X256Mix</a> <br> !   [5] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/L128X1024Mix.html\"> !       Apache Commons RNG: L128X1024Mix</a> !** USE STATEMENTS: USE MBase_Common USE MBase_MemHandlers , ONLY : MemAlloc , MemFree USE MBase_UIntUtil , ONLY : UnsignedMultiplyHigh => UMul128_Upper64 USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L128XMRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Low half of 128-bit LCG multiplier. The upper half is 1. tSInt64 , PARAMETER :: M128L = ToInt64 ( Z 'D605BBB58C8ABBFD' ) ! High half of the jump constant {m'} for an advance of the 128-bit LCG by 2&#94;64. ! The low half is 1. Computed as: {m' = m&#94;(2&#94;64) (mod 2&#94;128)}. tSInt64 , PARAMETER :: M128PH = ToInt64 ( Z '31F179F5224754F4' ) ! High half of the jump constant for an advance of the 128-bit LCG by 2&#94;64. ! The low half is zero. Computed as: ! product_{i=0}&#94;{63} { M&#94;(2&#94;i) + 1 } (mod 2&#94;128) ! The jump is computed for the LCG with an update step of {s = m * s + c} as: ! s = m' * s + c' * c tSInt64 , PARAMETER :: C128PH = ToInt64 ( Z '61139B28883277C3' ) ! size of LCG states tIndex , PARAMETER :: LCG_STATE_SIZE = 4_kIndex ! Parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: L128X128Mix = 1 !! flag for L128X128Mix PRNG tSInt32 , PARAMETER , PUBLIC :: L128X256Mix = 2 !! flag for L128X256Mix PRNG tSInt32 , PARAMETER , PUBLIC :: L128X1024Mix = 3 !! flag for L128X1024Mix PRNG !** DERIVED TYPE DEFINITIONS !> The *L128XMRNG* type is a *Long* PRNG type based on the *L128XM* !  algorithms, which are specific members of the LXM family of !  algorithms for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L128XMRNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0 ... for the XBG. ! At least one of the fields Xs must be nonzero. tSInt64 :: SH , SL tSInt64 , ALLOCATABLE :: X (:) ! index into the X \"state\" array tSInt32 :: Indx ! algorithm flag tSInt32 :: L128XMAlgo = L128X128Mix ! pointers to Next and Update routines PROCEDURE ( Next ), POINTER :: NextOutput => NULL () PROCEDURE ( Update ), POINTER :: UpdateState => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => L128XMRNG_InitWithFlag PROCEDURE , PRIVATE :: MakeACopy => L128XMRNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128XMRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128XMRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128XMRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128XMRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use L128X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use L128X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use L128X256Mix algorithm <br> !   --->    CALL RNG%Initialize(L128X256Mix) <br> !   ! initialize with seed(s); use L128X1024Mix algorithm <br> !   --->    CALL RNG%Initialize(L128X1024Mix, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128XMRNG_Split !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => L128XMRNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => L128XMRNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: L128XMRNG_Finalization ! --------------------------------------------------------------------- END TYPE L128XMRNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG , NextIndex ) RESULT ( Output ) IMPORT CLASS ( L128XMRNG ), INTENT ( IN ) :: RNG tSInt32 , INTENT ( OUT ) :: NextIndex tSInt64 :: Output END FUNCTION Next SUBROUTINE Update ( RNG , NextIndex ) IMPORT CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG tSInt32 , INTENT ( IN ) :: NextIndex END SUBROUTINE Update END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L128XMRNG_InitWithFlag ( RNG , L128XMAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L128XMRNG' object CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !% algorithm flag (1-4); if out of applicable range, set it to default (L128X128Mix) tSInt32 , INTENT ( IN ) :: L128XMAlgo !% optional seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( L128XMAlgo , 1 , 3 )) THEN RNG % L128XMAlgo = L128XMAlgo ELSE RNG % L128XMAlgo = L128X128Mix END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE L128XMRNG_InitWithFlag !****************************************************************************** SUBROUTINE L128XMRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L128XMRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128XMRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 , ALLOCATABLE :: Seed0 (:) tIndex :: SeedSize , XBGStateSize ! FLOW ! get array sizes and allocate working arrays SELECT CASE ( RNG % L128XMAlgo ) CASE ( L128X128Mix ) XBGStateSize = 2_kIndex CASE ( L128X256Mix ) XBGStateSize = 4_kIndex CASE ( L128X1024Mix ) XBGStateSize = 16_kIndex END SELECT SeedSize = XBGStateSize + LCG_STATE_SIZE CALL MemAlloc ( Seed0 , SeedSize , StartID = 0_kIndex ) CALL MemAlloc ( RNG % X , XBGStateSize , StartID = 0_kIndex ) ! set initial seed CALL Extend_Seed ( Seed , Seed0 ) ! set states RNG % AH = Seed0 ( 0 ) RNG % AL = IOR ( Seed0 ( 1 ), 1_kInt64 ) ! Additive parameter must be odd RNG % SH = Seed0 ( 2 ) RNG % SL = Seed0 ( 3 ) RNG % X ( 0 : XBGStateSize - 1 ) = Seed0 ( 4 : SeedSize - 1 ) ! Initializing to (XBGStateSize - 1) ensures that (Indx + 1) % XBGStateSize == 0 ! and the first state picked from the XBG generator is state[0]. RNG % Indx = XBGStateSize - 1_kIndex ! set pointers to NextOutput and Update procedures SELECT CASE ( RNG % L128XMAlgo ) CASE ( L128X128Mix ) RNG % NextOutput => X128256_Next RNG % UpdateState => X128_Update CASE ( L128X256Mix ) RNG % NextOutput => X128256_Next RNG % UpdateState => X256_Update CASE ( L128X1024Mix ) RNG % NextOutput => X1024_Next RNG % UpdateState => X1024_Update END SELECT RETURN END SUBROUTINE L128XMRNG_BaseInit !****************************************************************************** FUNCTION L128XMRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128XMRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: NextIndex ! FLOW ! compute next output RandNum = RNG % NextOutput ( NextIndex ) ! update states CALL RNG % UpdateState ( NextIndex ) RETURN END FUNCTION L128XMRNG_NextLong !****************************************************************************** FUNCTION L128XMRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( IN ) :: RNG !! 'L128XMRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % L128XMAlgo ) CASE ( L128X128Mix ) Name = 'L128X128MixRNG' CASE ( L128X256Mix ) Name = 'L128X256MixRNG' CASE ( L128X1024Mix ) Name = 'L128X1024MixRNG' END SELECT RETURN END FUNCTION L128XMRNG_GetName !****************************************************************************** FUNCTION L128XMRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( IN ) :: RNG !! 'L128XMRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: XBGStateSize ! FLOW SELECT CASE ( RNG % L128XMAlgo ) CASE ( L128X128Mix ) XBGStateSize = 2_kIndex CASE ( L128X256Mix ) XBGStateSize = 4_kIndex CASE ( L128X1024Mix ) XBGStateSize = 16_kIndex END SELECT Size = XBGStateSize + LCG_STATE_SIZE RETURN END FUNCTION L128XMRNG_GetSeedSize !****************************************************************************** FUNCTION UnsignedAddHigh ( X , Y ) RESULT ( Z ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To compute upper 64 bits of addition of two 64-bit unsigned integers !  This method is computing a carry bit for a 128-bit linear congruential !  generator (LCG).  The method is not applicable to all arguments. !  Some computations can be dropped if the Y argument is assumed to !  be the LCG addition, which should be odd to ensure a full period LCG. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( IN ) :: X , Y !! Y is assumed to have the lowest bit set to 1. tSInt64 :: Z !! the carry (either 0 or 1) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na !** FLOW ! Method compiles to 13 bytes as Java byte code. ! This is below the default of 35 for code inlining. ! ! The unsigned add of left + right may have a 65-bit result. ! If both values are shifted right by 1 then the sum will be ! within a 64-bit long. The right is assumed to have a low ! bit of 1 which has been lost in the shift. The method must ! compute if a 1 was shifted off the left which would have ! triggered a carry when adding to the right's assumed 1. ! The intermediate 64-bit result is shifted ! 63 bits to obtain the most significant bit of the 65-bit result. ! Using -1 is the same as a shift of (64 - 1) as only the last 6 bits ! are used by the shift but requires 1 less byte in java byte code. ! !    01100001      left ! +  10011111      right always has low bit set to 1 ! !    0110000   1   carry last bit of left ! +  1001111   | ! +        1 <-+ ! = 10000000       carry bit generated Z = SHIFTL (( SHIFTR ( X , 1 ) + SHIFTR ( Y , 1 ) + IAND ( X , 1_kInt64 )), 1 ) RETURN END FUNCTION UnsignedAddHigh !****************************************************************************** FUNCTION X128256_Next ( RNG , NextIndex ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( IN ) :: RNG !! 'L128X128RNG' tSInt32 , INTENT ( OUT ) :: NextIndex !! dummy here tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % SH + RNG % X ( 0 )) NextIndex = 0 RETURN END FUNCTION X128256_Next !****************************************************************************** SUBROUTINE X128_Update ( RNG , NextIndex ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128X128RNG' object tSInt32 , INTENT ( IN ) :: NextIndex !! dummy here !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: U , Q0 , Q1 ! FLOW ! Update the LCG subgenerator ! The LCG is, in effect, s = ((1LL << 64) + ML) * s + a, if only we had 128-bit arithmetic. ! High half U = M128L * RNG % SL RNG % SH = ( M128L * RNG % SH ) + UnsignedMultiplyHigh ( M128L , RNG % SL ) + RNG % SL + RNG % AH & + UnsignedAddHigh ( U , RNG % AL ) ! Carry propagation ! Low half RNG % SL = U + RNG % AL ! Update the XBG subgenerator Q0 = RNG % X ( 0 ) Q1 = RNG % X ( 1 ) ! xoroshiro128v1_0 Q1 = IEOR ( Q1 , Q0 ) Q0 = RotateLeft ( Q0 , 24 ) Q0 = IEOR ( IEOR ( Q0 , Q1 ), SHIFTL ( Q1 , 16 )) Q1 = RotateLeft ( Q1 , 37 ) RNG % X ( 0 ) = Q0 RNG % X ( 1 ) = Q1 ASSOCIATE ( Dummy => NextIndex ); END ASSOCIATE RETURN END SUBROUTINE X128_Update !****************************************************************************** SUBROUTINE X256_Update ( RNG , NextIndex ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128X128RNG' object tSInt32 , INTENT ( IN ) :: NextIndex !! dummy here !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: U , Q0 , Q1 , Q2 , Q3 , T ! FLOW ! Update the LCG subgenerator ! The LCG is, in effect, s = ((1LL << 64) + ML) * s + a, if only we had 128-bit arithmetic. ! High half U = M128L * RNG % SL RNG % SH = ( M128L * RNG % SH ) + UnsignedMultiplyHigh ( M128L , RNG % SL ) + RNG % SL + RNG % AH & + UnsignedAddHigh ( U , RNG % AL ) ! Carry propagation ! Low half RNG % SL = U + RNG % AL ! Update the XBG subgenerator Q0 = RNG % X ( 0 ) Q1 = RNG % X ( 1 ) Q2 = RNG % X ( 2 ) Q3 = RNG % X ( 3 ) ! xoshiro256 1.0 T = SHIFTL ( Q1 , 17 ) Q2 = IEOR ( Q2 , Q0 ) Q3 = IEOR ( Q3 , Q1 ) Q1 = IEOR ( Q1 , Q2 ) Q0 = IEOR ( Q0 , Q3 ) Q2 = IEOR ( Q2 , T ) Q3 = RotateLeft ( Q3 , 45 ) RNG % X ( 0 ) = Q0 RNG % X ( 1 ) = Q1 RNG % X ( 2 ) = Q2 RNG % X ( 3 ) = Q3 ASSOCIATE ( Dummy => NextIndex ); END ASSOCIATE RETURN END SUBROUTINE X256_Update !****************************************************************************** FUNCTION X1024_Next ( RNG , NextIndex ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( IN ) :: RNG !! 'L128X128RNG' tSInt32 , INTENT ( OUT ) :: NextIndex !! dummy here tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NextIndex = IAND ( RNG % Indx + 1 , SIZE ( RNG % X ) - 1 ) ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % SH + RNG % X ( NextIndex )) RETURN END FUNCTION X1024_Next !****************************************************************************** SUBROUTINE X1024_Update ( RNG , NextIndex ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128X128RNG' object tSInt32 , INTENT ( IN ) :: NextIndex !! dummy here !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S15 , U tSInt32 :: Q ! FLOW ! First part of xoroshiro1024: fetch array data Q = RNG % Indx RNG % Indx = NextIndex S0 = RNG % X ( RNG % Indx ) S15 = RNG % X ( Q ) ! Update the LCG subgenerator ! The LCG is, in effect, s = ((1LL << 64) + ML) * s + a, if only we had 128-bit arithmetic. ! High half U = M128L * RNG % SL RNG % SH = ( M128L * RNG % SH ) + UnsignedMultiplyHigh ( M128L , RNG % SL ) + RNG % SL + RNG % AH & + UnsignedAddHigh ( U , RNG % AL ) ! Carry propagation ! Low half RNG % SL = U + RNG % AL ! Second part of xoroshiro1024: update array data S15 = IEOR ( S15 , S0 ) RNG % X ( Q ) = IEOR ( IEOR ( RotateLeft ( S0 , 25 ), S15 ), SHIFTL ( S15 , 27 )) RNG % X ( RNG % Indx ) = RotateLeft ( S15 , 36 ) RETURN END SUBROUTINE X1024_Update !****************************************************************************** FUNCTION L128XMRNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy all components of the source object to the destination object !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: Src !! source object TYPE ( L128XMRNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Dst % AH = Src % AH Dst % AL = Src % AL Dst % SH = Src % SH Dst % SL = Src % SL ALLOCATE ( Dst % X , SOURCE = Src % X ) Dst % Indx = Src % Indx Dst % L128XMAlgo = Src % L128XMAlgo Dst % NextOutput => Src % NextOutput Dst % UpdateState => Src % UpdateState CALL Src % CopySeed ( Dst ) RETURN END FUNCTION L128XMRNG_Copy !****************************************************************************** FUNCTION L128XMRNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The jump is performed by advancing the state of the LCG sub-generator by 1 cycle. !  The XBG state is unchanged.  <br> !  For L128X128MixRNG, the jump size is the equivalent of moving the state backwards !  by (2<sup>128</sup> - 1) positions.  It can provide up to 2<sup>128</sup> !  non-overlapping subsequences.  <br> !  For L128X256MixRNG, the jump size is the equivalent of moving the state backwards !  by (2<sup>256</sup> - 1) positions.  It can provide up to 2<sup>128</sup> !  non-overlapping subsequences.  <br> !  For L128X1024MixRNG, the jump size is the equivalent of moving the state backwards !  by (2<sup>1024</sup> - 1) positions.  It can provide up to 2<sup>128</sup> !  non-overlapping subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128XMRNG' object TYPE ( L128XMRNG ) :: NewRNG !! new 'L128XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: SH , SL , U ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! Advance the LCG 1 step ! The LCG is, in effect, \"s = m * s + a\" where m = ((1LL << 64) + ML) SH = RNG % SH SL = RNG % SL U = M128L * SL ! High half RNG % SH = M128L * SH + UnsignedMultiplyHigh ( M128L , SL ) + SL + RNG % AH + & UnsignedAddHigh ( U , RNG % AL ) ! Carry propagation ! Low half RNG % SL = U + RNG % AL RETURN END FUNCTION L128XMRNG_Jump !****************************************************************************** FUNCTION L128XMRNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The jump is performed by advancing the state of the LCG sub-generator by !  2<sup>64</sup> cycles.  The XBG state is unchanged.  <br> !  For L128X128MixRNG, the jump size is the equivalent of moving the state backwards !  by roughly 2<sup>192</sup> positions.  It can provide up to 2<sup>64</sup> !  non-overlapping subsequences of length approximately 2<sup>192</sup>; each !  subsequence can provide up to 2<sup>64</sup> non-overlapping subsequences of !  length (2<sup>128</sup> - 1) using the Jump() method.  <br> !  For L128X256MixRNG, the jump size is the equivalent of moving the state backwards !  by roughly 2<sup>320</sup> positions.  It can provide up to 2<sup>64</sup> !  non-overlapping subsequences of length approximately 2<sup>320</sup>; each !  subsequence can provide up to 2<sup>64</sup> non-overlapping subsequences of !  length (2<sup>256</sup> - 1) using the Jump() method.  <br> !  For L128X256MixRNG, the jump size is the equivalent of moving the state backwards !  by roughly 2<sup>1088</sup> positions.  It can provide up to 2<sup>64</sup> !  non-overlapping subsequences of length approximately 2<sup>1088</sup>; each !  subsequence can provide up to 2<sup>64</sup> non-overlapping subsequences of !  length (2<sup>1024</sup> - 1) using the Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128XMRNG' object TYPE ( L128XMRNG ) :: NewRNG !! new 'L128XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! Advance the LCG 2**64 steps RNG % SH = RNG % SH + M128PH * RNG % SL + C128PH * RNG % AL RETURN END FUNCTION L128XMRNG_LongJump !****************************************************************************** FUNCTION L128XMRNG_Split ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a new generator split off from the current instance. !  Use the current generator to generate an initial seed and also !  employ it as a source of randomness used to initialize the !  new generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128XMRNG' object TYPE ( L128XMRNG ) :: NewRNG !! new 'L128XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: SeedSize , I tSInt64 :: Seed , X tSInt64 , ALLOCATABLE :: S (:) ! FLOW ! allocate working variables SeedSize = RNG % GetSeedSize () CALL MemAlloc ( S , SeedSize , StartID = 0_kIndex ) Seed = RNG % NextLong () ! LCG state. The addition lower-half uses the input seed. ! The LCG addition parameter is set to odd so left-shift the seed. S ( 0 ) = RNG % NextLong () S ( 1 ) = SHIFTL ( Seed , 1 ) S ( 2 ) = RNG % NextLong () S ( 3 ) = RNG % NextLong () ! XBG state must not be all zero X = 0_kInt64 DO I = LCG_STATE_SIZE , SeedSize - 1 S ( I ) = RNG % NextLong () X = IOR ( X , S ( I )) END DO IF ( X == 0_kInt64 ) THEN !/ SplitMix style seed ensures at least one non-zero value X = S ( LCG_STATE_SIZE - 1_kIndex ) DO I = LCG_STATE_SIZE , SeedSize - 1 S ( I ) = Mix_Lea ( X ) X = X + GOLDEN_RATIO_64 END DO END IF ! initialize the new generator CALL NewRNG % Initialize ( RNG % L128XMAlgo , S ) RETURN END FUNCTION L128XMRNG_Split !****************************************************************************** SUBROUTINE L128XMRNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'L128XMRNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L128XMRNG ), INTENT ( INOUT ) :: RNG !! 'L128XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW CALL MemFree ( RNG % X ) NULLIFY ( RNG % NextOutput ) NULLIFY ( RNG % UpdateState ) RETURN END SUBROUTINE L128XMRNG_Finalization !****************************************************************************** END MODULE MClass_L128XMRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l128xmrng.f90.html"},{"title":"MClass_Taus88RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Taus88RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Taus88RNG* type and its related routines. !   The *Taus88RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Taus88RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on Tausworthe random number !   generators by Pierre L'Ecuyer. <br> !   The *TAUS88* PRNG has three 32-bit states combined by a bitwise xor. !   Its period length is approximatively 2<sup>88</sup>. <br> !   It is important to note that the *TAUS88* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  Also, it should be noted that the implementation of !   this PRNG is based on reference #2.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.ams.org/journals/mcom/1996-65-213/S0025-5718-96-00696-5/\"> !       L'Ecuyer, P. 1996. Maximally equidistributed combined Tausworthe !       generators. Mathematics of Computation, 65(213): 203-213. </a> <br> !   [2] <a href=\"https://wp.csiro.au/alanmiller/random/taus88.f90\"> !       Ecuyer_random: a Fortran 90 module implementation of the TAUS88 !       generator by Alan Miller. </a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Taus88RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *Taus88RNG* type is an *Integer* PRNG type based on a Tausworthe !  random number generator by Pierre L'Ecuyer. TYPE , EXTENDS ( IntegerRNG ) :: Taus88RNG PRIVATE tSInt32 :: State1 = 1234 tSInt32 :: State2 = - 4567 tSInt32 :: State3 = 7890 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Taus88RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Taus88RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Taus88RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Taus88RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Taus88RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): !****************************************************************************** SUBROUTINE Taus88RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Taus88RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Taus88RNG ), INTENT ( INOUT ) :: RNG !! 'Taus88RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set initial seeds SELECT CASE ( SIZE ( Seed )) CASE ( 1 ) RNG % State1 = Seed ( 1 ) CASE ( 2 ) RNG % State1 = Seed ( 1 ) RNG % State2 = Seed ( 2 ) CASE ( 3 ) RNG % State1 = Seed ( 1 ) RNG % State2 = Seed ( 2 ) RNG % State3 = Seed ( 3 ) END SELECT IF ( IAND ( RNG % State1 , - 2 ) == 0 ) RNG % State1 = RNG % State1 - 1023 IF ( IAND ( RNG % State2 , - 8 ) == 0 ) RNG % State2 = RNG % State2 - 1023 IF ( IAND ( RNG % State3 , - 16 ) == 0 ) RNG % State3 = RNG % State3 - 1023 RETURN END SUBROUTINE Taus88RNG_BaseInit !****************************************************************************** FUNCTION Taus88RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Taus88RNG ), INTENT ( INOUT ) :: RNG !! 'Taus88RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: B ! FLOW B = SHIFTR ( IEOR ( SHIFTL ( RNG % State1 , 13 ), RNG % State1 ), 19 ) RNG % State1 = IEOR ( SHIFTL ( IAND ( RNG % State1 , - 2 ), 12 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State2 , 2 ), RNG % State2 ), 25 ) RNG % State2 = IEOR ( SHIFTL ( IAND ( RNG % State2 , - 8 ), 4 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State3 , 3 ), RNG % State3 ), 11 ) RNG % State3 = IEOR ( SHIFTL ( IAND ( RNG % State3 , - 16 ), 17 ), B ) RandNum = IEOR ( IEOR ( RNG % State1 , RNG % State2 ), RNG % State3 ) RETURN END FUNCTION Taus88RNG_NextInteger !****************************************************************************** FUNCTION Taus88RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Taus88RNG ), INTENT ( IN ) :: RNG !! 'Taus88RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Taus88RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Taus88RNG_GetName !****************************************************************************** FUNCTION Taus88RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Taus88RNG ), INTENT ( IN ) :: RNG !! 'Taus88RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 3 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Taus88RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Taus88RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_taus88rng.f90.html"},{"title":"MClass_Lfsr113RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Lfsr113RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Lfsr113RNG* type and its related routines. !   The *Lfsr113RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Lfsr113RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the 32-bit *LFSR113* !   (composite linear feedback shift register) algorithm by Pierre L'Ecuyer. <br> !   The *LFSR113* PRNG has four 32-bit states combined by a bitwise xor. !   Its period length is approximatively 2<sup>113</sup>. <br> !   It is important to note that the *LFSR113* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  Also, it should be noted that the implementation of !   this PRNG is based on references #2-3. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-01039-X/\"> !       L'Ecuyer, P. 1999. Tables of maximally equidistributed combined LFSR !       generators. Mathematics of Computation, 68(225): 261-269. </a> <br> !   [2] <a href=\"https://wp.csiro.au/alanmiller/random/lfsr113.f90\"> !       Lin_Feedback_Shift_Reg: a Fortran 90 module implementation of the LFSR113 !       generator by Alan Miller. </a> <br> !   [3] <a href=\"http://umontreal-simul.github.io/ssj/docs/master/classumontreal_1_1ssj_1_1rng_1_1LFSR113.html\"> !       Package umontreal.ssj.rng: LFSR113 Class Reference. </a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Lfsr113RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! name of module tCharStar , PARAMETER :: ModName = 'MClass_Lfsr113RNG' !** DERIVED TYPE DEFINITIONS !> The *Lfsr113RNG* type is an *Integer* PRNG type based on 32-bit composite !  linear feedback shift register (LFSR) algorithm by Pierre L'Ecuyer. TYPE , EXTENDS ( IntegerRNG ) :: Lfsr113RNG PRIVATE tSInt32 :: State1 = 153587801 tSInt32 :: State2 = - 759022222 tSInt32 :: State3 = 1288503317 tSInt32 :: State4 = - 1718083407 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Lfsr113RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Lfsr113RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Lfsr113RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Lfsr113RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Lfsr113RNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Lfsr113RNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Lfsr113RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Lfsr113RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Lfsr113RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr113RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr113RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set initial seeds SELECT CASE ( SIZE ( Seed )) CASE ( 1 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) CASE ( 2 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) CASE ( 3 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) RNG % State3 = IEOR ( RNG % State3 , Seed ( 3 )) CASE ( 4 ) RNG % State1 = IEOR ( RNG % State1 , Seed ( 1 )) RNG % State2 = IEOR ( RNG % State2 , Seed ( 2 )) RNG % State3 = IEOR ( RNG % State3 , Seed ( 3 )) RNG % State4 = IEOR ( RNG % State4 , Seed ( 4 )) END SELECT IF ( IAND ( RNG % State1 , - 2 ) == 0 ) RNG % State1 = RNG % State1 - 1023 IF ( IAND ( RNG % State2 , - 8 ) == 0 ) RNG % State2 = RNG % State2 - 1023 IF ( IAND ( RNG % State3 , - 16 ) == 0 ) RNG % State3 = RNG % State3 - 1023 IF ( IAND ( RNG % State4 , - 128 ) == 0 ) RNG % State4 = RNG % State4 - 1023 RETURN END SUBROUTINE Lfsr113RNG_BaseInit !****************************************************************************** FUNCTION Lfsr113RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr113RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr113RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: B ! FLOW B = SHIFTR ( IEOR ( SHIFTL ( RNG % State1 , 6 ), RNG % State1 ), 13 ) RNG % State1 = IEOR ( SHIFTL ( IAND ( RNG % State1 , - 2 ), 18 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State2 , 2 ), RNG % State2 ), 27 ) RNG % State2 = IEOR ( SHIFTL ( IAND ( RNG % State2 , - 8 ), 2 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State3 , 13 ), RNG % State3 ), 21 ) RNG % State3 = IEOR ( SHIFTL ( IAND ( RNG % State3 , - 16 ), 7 ), B ) B = SHIFTR ( IEOR ( SHIFTL ( RNG % State4 , 3 ), RNG % State4 ), 12 ) RNG % State4 = IEOR ( SHIFTL ( IAND ( RNG % State4 , - 128 ), 13 ), B ) RandNum = IEOR ( IEOR ( IEOR ( RNG % State1 , RNG % State2 ), RNG % State3 ), RNG % State4 ) RETURN END FUNCTION Lfsr113RNG_NextInteger !****************************************************************************** FUNCTION Lfsr113RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr113RNG ), INTENT ( IN ) :: RNG !! 'Lfsr113RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Lfsr113RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Lfsr113RNG_GetName !****************************************************************************** FUNCTION Lfsr113RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr113RNG ), INTENT ( IN ) :: RNG !! 'Lfsr113RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 4 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Lfsr113RNG_GetSeedSize !****************************************************************************** FUNCTION Lfsr113RNG_NextDouble ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random floating-point value.  This routine !  overrides the default implementation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr113RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr113RNG' object tRealDP :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tRealDP , PARAMETER :: InvTwo24 = 5.9604644775390625E-8_kDouble ! 2**(-24) tRealDP , PARAMETER :: Epsilon = 5.5511151231257827E-17_kDouble ! 2**(-54) ! generator constant: make sure that double values 0 and 1 never occur tSInt64 , PARAMETER :: TwoPow32 = ToInt64 ( Z '0000000100000000' ) ! 2**32 tRealDP , PARAMETER :: DNorm = 1.0_kDouble / ( TwoPow32 + 1 ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: LongRnd ( 2 ) tIndex :: I ! FLOW DO I = 1 , 2 LongRnd ( I ) = ToInt64 ( RNG % NextInteger ()) IF ( LongRnd ( I ) <= 0_kInt64 ) LongRnd ( I ) = LongRnd ( I ) + TwoPow32 END DO ! Make sure that double values 0 and 1 never occur RandNum = LongRnd ( 1 ) * DNorm RandNum = MOD (( RandNum + ( LongRnd ( 2 ) * DNorm ) * InvTwo24 ), 1.0_kDouble ) + Epsilon RETURN END FUNCTION Lfsr113RNG_NextDouble !****************************************************************************** FUNCTION Lfsr113RNG_NextIntegerLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 32-bit-integer value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  0 and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in between the lower limit (inclusive) and the upper !  limit (exclusive). <br> !  This routine overrides the default implementation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Lfsr113RNG ), INTENT ( INOUT ) :: RNG !! 'Lfsr113RNG' object tSInt32 , INTENT ( IN ) :: Bound1 !! a required limit tSInt32 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: TwoPow32 = ToInt64 ( Z '0000000100000000' ) ! 2**32 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Lower , Diff tSInt64 :: D , Q , R , LongRnd ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN Diff = ABS ( Bound1 - Bound2 ) Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = ABS ( Bound1 ) Lower = MIN ( Bound1 , 0_kInt32 ) END IF ! return quickly if Diff is zero IF ( Diff == 0_kInt32 ) THEN RandNum = Bound1 RETURN END IF D = Diff + 1_kInt64 Q = TwoPow32 / D R = MOD ( TwoPow32 , D ) DO LongRnd = ToInt64 ( RNG % NextInteger ()) IF ( LongRnd <= 0_kInt64 ) LongRnd = LongRnd + TwoPow32 IF ( LongRnd < TwoPow32 - R ) EXIT END DO RandNum = ToInt32 ( LongRnd / Q ) + Lower RETURN END FUNCTION Lfsr113RNG_NextIntegerLimits !****************************************************************************** END MODULE MClass_Lfsr113RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_lfsr113rng.f90.html"},{"title":"MClass_L64X256RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L64X256RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L64X256RNG* type and its related routines. !   The *L64X256RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L64X256RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L64X256* algorithm.  The !   *L64X256* algorithm is a specific member of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L64X256RNG* type employs a 64-bit LCG, a 256-bit XBG and a mixing function !   where its memory footprint is 384 bits and its period is roughly 2<sup>320</sup>. <br> !   In addition to common operations of a PRNG, the *L64X256RNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform.  <br> !   It is important to note that the *L64X256* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L64X256RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *L64X256RNG* type is a *Long* PRNG type based on the *L64X256* !  algorithms, which are specific members of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L64X256RNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0, X1, X2 and X3 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: S , X0 , X1 , X2 , X3 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64X256RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64X256RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64X256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64X256RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64X256RNG_Split ! --------------------------------------------------------------------- END TYPE L64X256RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L64X256RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L64X256RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X256RNG ), INTENT ( INOUT ) :: RNG !! 'L64X256RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: InitSeed , XSeed1 , XSeed2 , XSeed3 ! FLOW ! set initial seed InitSeed = IEOR ( Seed ( 1 ), SILVER_RATIO_64 ) ! set parameters as follows: ! The seed is hashed by Mix_Murmur to produce the 'A' parameter. ! The seed is hashed by Mix_Stafford_13 to produce the initial 'X0', ! which will then be used to produce the first generated value. ! Then, the other 'X' values are filled in as if by a SplitMix PRNG ! with GOLDEN_RATIO_64 as the gamma value and Mix_Stafford_13 as the mixer. XSeed1 = InitSeed + GOLDEN_RATIO_64 XSeed2 = XSeed1 + GOLDEN_RATIO_64 XSeed3 = XSeed2 + GOLDEN_RATIO_64 CALL L64X256RNG_SetParameters ( RNG , Mix_Murmur ( InitSeed ), 1_kInt64 , & Mix_Stafford_13 ( InitSeed ), Mix_Stafford_13 ( XSeed1 ), & Mix_Stafford_13 ( XSeed2 ), Mix_Stafford_13 ( XSeed3 )) RETURN END SUBROUTINE L64X256RNG_BaseInit !****************************************************************************** FUNCTION L64X256RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X256RNG ), INTENT ( INOUT ) :: RNG !! 'L64X256RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Multiplier used in the LCG portion of the algorithm. ! Chosen based on research by Sebastiano Vigna and Guy Steele (2019). ! The spectral scores for dimensions 2 through 8 for the multiplier 0xd1342543de82ef95L ! are [0.958602, 0.937479, 0.870757, 0.822326, 0.820405, 0.813065, 0.760215]. tSInt64 , PARAMETER :: M = ToInt64 ( Z 'D1342543DE82EF95' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Q0 , Q1 , Q2 , Q3 , T ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % S + RNG % X0 ) ! Update the LCG subgenerator RNG % S = M * RNG % S + RNG % A ! Update the XBG subgenerator Q0 = RNG % X0 Q1 = RNG % X1 Q2 = RNG % X2 Q3 = RNG % X3 ! xoshiro256 1.0 T = SHIFTL ( Q1 , 17 ) Q2 = IEOR ( Q2 , Q0 ) Q3 = IEOR ( Q3 , Q1 ) Q1 = IEOR ( Q1 , Q2 ) Q0 = IEOR ( Q0 , Q3 ) Q2 = IEOR ( Q2 , T ) Q3 = RotateLeft ( Q3 , 45 ) RNG % X0 = Q0 RNG % X1 = Q1 RNG % X2 = Q2 RNG % X3 = Q3 RETURN END FUNCTION L64X256RNG_NextLong !****************************************************************************** FUNCTION L64X256RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X256RNG ), INTENT ( IN ) :: RNG !! 'L64X256RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'L64X256RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L64X256RNG_GetName !****************************************************************************** FUNCTION L64X256RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X256RNG ), INTENT ( IN ) :: RNG !! 'L64X256RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L64X256RNG_GetSeedSize !****************************************************************************** SUBROUTINE L64X256RNG_SetParameters ( RNG , A , S , X0 , X1 , X2 , X3 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To set parameters of the object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L64X256RNG ), INTENT ( INOUT ) :: RNG tSInt64 , INTENT ( IN ) :: A tSInt64 , INTENT ( IN ) :: S tSInt64 , INTENT ( IN ) :: X0 tSInt64 , INTENT ( IN ) :: X1 tSInt64 , INTENT ( IN ) :: X2 tSInt64 , INTENT ( IN ) :: X3 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: V ! FLOW ! Force a to be odd RNG % A = IOR ( A , 1_kInt64 ) RNG % S = S ! check if all Xs are zero or not IF ( IOR ( IOR ( IOR ( X0 , X1 ), X2 ), X3 ) == 0 ) THEN ! If all Xs are zero, we must choose nonzero values. V = S + GOLDEN_RATIO_64 ! At least three of the four values generated here will be nonzero. RNG % X0 = Mix_Stafford_13 ( V ) V = V + GOLDEN_RATIO_64 RNG % X1 = Mix_Stafford_13 ( V ) V = V + GOLDEN_RATIO_64 RNG % X2 = Mix_Stafford_13 ( V ) RNG % X3 = Mix_Stafford_13 ( V + GOLDEN_RATIO_64 ) ELSE RNG % X0 = X0 RNG % X1 = X1 RNG % X2 = X2 RNG % X3 = X3 END IF RETURN END SUBROUTINE L64X256RNG_SetParameters !****************************************************************************** FUNCTION L64X256RNG_Split ( RNG , Brine ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize and return a new 'L64X256RNG' object that shares no mutable !  state with this object. However, with very high probability, the set of !  values collectively generated by the two objects has the same statistical !  properties as if the same quantity of values were generated by a single !  thread using a single object.  Either or both of the two objects may be !  further split using this routine, and the same expected statistical !  properties apply to the entire set of generators constructed by such !  recursive splitting. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L64X256RNG' object CLASS ( L64X256RNG ), INTENT ( INOUT ) :: RNG !> a long value, of which the low 63 bits provide a unique id among calls !  to this routine for constructing a single series of Generator objects. tSInt64 , OPTIONAL , INTENT ( IN ) :: Brine !% new 'L64X256RNG' object TYPE ( L64X256RNG ) :: NewRNG !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Salt ! FLOW ! check optional input IF ( PRESENT ( Brine )) THEN Salt = Brine ELSE Salt = RNG % NextLong () END IF ! copy initial seeds for re-initialization CALL RNG % CopySeed ( NewRNG ) ! set parameters by picking a new object at random but use the 63 bits ! of the salt for 'A' CALL L64X256RNG_SetParameters ( NewRNG , SHIFTL ( Salt , 1 ), RNG % NextLong (), & RNG % NextLong (), RNG % NextLong (), & RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION L64X256RNG_Split !****************************************************************************** END MODULE MClass_L64X256RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l64x256rng.f90.html"},{"title":"MClass_Mrg63k3aRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Mrg63k3aRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Mrg63k3aRNG* type and its related routines. !   The *Mrg63k3aRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by n *Long* PRNG type.  <br> !   In particular, the *Mrg63k3aRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the 63-bit *MRG* (combined !   multiple recursive generator) algorithm by Pierre L'Ecuyer. <br> !   The *Mrg63k3a* PRNG has six 63-bit states stored in 64-bit integers. !   Its period length is approximatively 2<sup>377</sup>. <br> !   It is important to note that the *Mrg63k3a* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  Also, it should be noted that the implementation of !   this PRNG is based on references #2. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-01039-X/\"> !       L'Ecuyer, P. 1999. Good Parameters and Implementations for Combined Multiple !       Recursive Random Number Generators. Operations Research 47(1):159-164. </a> <br> !   [2] <a href=\"http://simul.iro.umontreal.ca/rng/MRG63k3a.c\"> !       63-bits Random number generator U(0,1): MRG63k3a - a C source code. </a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Mrg63k3aRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! name of module tCharStar , PARAMETER :: ModName = 'MClass_Mrg63k3aRNG' tSInt64 , PARAMETER :: M1 = 9223372036854769163_kInt64 tSInt64 , PARAMETER :: M2 = 9223372036854754679_kInt64 tSInt64 , PARAMETER :: A12 = 1754669720_kInt64 tSInt64 , PARAMETER :: Q12 = 5256471877_kInt64 tSInt64 , PARAMETER :: R12 = 251304723_kInt64 tSInt64 , PARAMETER :: A13N = 3182104042_kInt64 tSInt64 , PARAMETER :: Q13 = 2898513661_kInt64 tSInt64 , PARAMETER :: R13 = 394451401_kInt64 tSInt64 , PARAMETER :: A21 = 31387477935_kInt64 tSInt64 , PARAMETER :: Q21 = 293855150_kInt64 tSInt64 , PARAMETER :: R21 = 143639429_kInt64 tSInt64 , PARAMETER :: A23N = 6199136374_kInt64 tSInt64 , PARAMETER :: Q23 = 1487847900_kInt64 tSInt64 , PARAMETER :: R23 = 985240079_kInt64 tRealDP , PARAMETER :: Norm = 1.0842021724855052E-19_kDouble tSInt64 , PARAMETER :: DefaultSeed = 123456789_kInt64 !** DERIVED TYPE DEFINITIONS !> The *Mrg63k3aRNG* type is a *Long* PRNG type based on 63-bit !  combined multiple recursive generator (MRG) algorithm by Pierre L'Ecuyer. TYPE , EXTENDS ( LongRNG ) :: Mrg63k3aRNG PRIVATE ! states tSInt64 :: State ( 0 : 5 ) = DefaultSeed CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: NextValue => Mrg63k3aRNG_NextValue ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mrg63k3aRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Mrg63k3aRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mrg63k3aRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mrg63k3aRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Mrg63k3aRNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Mrg63k3aRNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Mrg63k3aRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Mrg63k3aRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Mrg63k3aRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg63k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg63k3aRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: LongSeed ( 6 ) tIndex :: I tLogical :: AreAllZero ! FLOW ! set LongSeed to default seed LongSeed = DefaultSeed ! set LongSeed to specified seeds DO I = 1 , SIZE ( Seed ) LongSeed ( I ) = IEOR ( LongSeed ( I ), Seed ( I )) IF ( I == 6 ) EXIT END DO ! check whether LongSeed are all zero or not AreAllZero = TrueVal DO I = 1 , 6 IF ( LongSeed ( I ) /= 0_kInt64 ) THEN AreAllZero = FalseVal EXIT END IF END DO ! set state for valid elements of LongSeed IF (. NOT . AreAllZero ) THEN DO I = 1 , 3 IF ( LongSeed ( I ) < M1 ) RNG % State ( I - 1 ) = LongSeed ( I ) END DO DO I = 4 , 6 IF ( LongSeed ( I ) < M2 ) RNG % State ( I - 1 ) = LongSeed ( I ) END DO END IF RETURN END SUBROUTINE Mrg63k3aRNG_BaseInit !****************************************************************************** FUNCTION Mrg63k3aRNG_NextValue ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg63k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg63k3aRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: H , P12 , P13 , P21 , P23 ! FLOW ! Component 1 H = RNG % State ( 0 ) / Q13 P13 = A13n * ( RNG % State ( 0 ) - H * Q13 ) - H * R13 H = RNG % State ( 1 ) / Q12 P12 = A12 * ( RNG % State ( 1 ) - H * Q12 ) - H * R12 IF ( P13 < 0 ) P13 = P13 + M1 IF ( P12 < 0 ) THEN P12 = P12 + M1 - P13 ELSE P12 = P12 - P13 END IF IF ( P12 < 0 ) P12 = P12 + M1 RNG % State ( 0 ) = RNG % State ( 1 ) RNG % State ( 1 ) = RNG % State ( 2 ) RNG % State ( 2 ) = P12 ! Component 2 H = RNG % State ( 3 ) / Q23 P23 = A23n * ( RNG % State ( 3 ) - H * Q23 ) - H * R23 H = RNG % State ( 5 ) / Q21 P21 = A21 * ( RNG % State ( 5 ) - H * Q21 ) - H * R21 IF ( P23 < 0 ) P23 = P23 + M2 IF ( P21 < 0 ) THEN P21 = P21 + M2 - P23 ELSE P21 = P21 - P23 END IF IF ( P21 < 0 ) P21 = P21 + M2 RNG % State ( 3 ) = RNG % State ( 4 ) RNG % State ( 4 ) = RNG % State ( 5 ) RNG % State ( 5 ) = P21 ! Combination IF ( P12 > P21 ) THEN RandNum = P12 - P21 ELSE RandNum = P12 - P21 + M1 END IF RETURN END FUNCTION Mrg63k3aRNG_NextValue !****************************************************************************** FUNCTION Mrg63k3aRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg63k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg63k3aRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: MaskL = ToInt64 ( Z '00000000FFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = IEOR ( SHIFTL ( RNG % NextValue (), 32 ), IAND ( RNG % NextValue (), MaskL )) RETURN END FUNCTION Mrg63k3aRNG_NextLong !****************************************************************************** FUNCTION Mrg63k3aRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg63k3aRNG ), INTENT ( IN ) :: RNG !! 'Mrg63k3aRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Mrg63k3aRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mrg63k3aRNG_GetName !****************************************************************************** FUNCTION Mrg63k3aRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg63k3aRNG ), INTENT ( IN ) :: RNG !! 'Mrg63k3aRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 6 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mrg63k3aRNG_GetSeedSize !****************************************************************************** FUNCTION Mrg63k3aRNG_NextDouble ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random floating-point value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg63k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg63k3aRNG' object tRealDP :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = RNG % NextValue () * Norm RETURN END FUNCTION Mrg63k3aRNG_NextDouble !****************************************************************************** FUNCTION Mrg63k3aRNG_NextIntegerLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 32-bit-integer value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  0 and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in between the lower limit (inclusive) and the upper !  limit (exclusive). <br> !  This routine overrides the default implementation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg63k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg63k3aRNG' object tSInt32 , INTENT ( IN ) :: Bound1 !! a required limit tSInt32 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Lower , Diff ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN Diff = ABS ( Bound1 - Bound2 ) Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = ABS ( Bound1 ) Lower = MIN ( Bound1 , 0_kInt32 ) END IF ! return quickly if Diff is zero IF ( Diff == 0_kInt32 ) THEN RandNum = Bound1 RETURN END IF ! This works even for an interval [0, 2&#94;31 - 1]. It would not with ! ToInt32(RNG%NextDouble*(Upper - Lower + 1)) + Lower RandNum = ToInt32 ( RNG % NextDouble () * ( Diff + 1.0_kDouble )) + Lower RETURN END FUNCTION Mrg63k3aRNG_NextIntegerLimits !****************************************************************************** END MODULE MClass_Mrg63k3aRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_mrg63k3arng.f90.html"},{"title":"MClass_SuperKiss64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_SuperKiss64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *SuperKiss64RNG* type and its related routines. !   The *SuperKiss64RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *SuperKiss64RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the 64-bit *SuperKISS* algorithm !   by George Marsaglia. <br> !   The 64-bit *SuperKiss* algorithm consists of a combination of three sub-generators: <br> !   - complementary-multiply-with-carry (CMWC) generator <br> !   - linear congruential generator, and <br> !   - xorshift generator. <br> !   The three generators are updated independently, and their states are combined !   to form a sequence of 64-bit output words. <br> !   The *SuperKiss64RNG* type has a memory footprint of 1320672 bits and a period of !   (5)(2<sup>1320480</sup>)(2<sup>64</sup>-1). <br> !   It is important to note that the *SuperKiss64* PRNG requires an explicit !   initialization by first calling the *BaseInit* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://en.wikipedia.org/wiki/KISS_(algorithm)\"> !       KISS (algorithm)</a> <br> !   [2] <a href=\"https://groups.google.com/g/sci.math/c/QiTrbq0XeyM/m/_qSRAdMaeK8J\"> !       SuperKISS for 32- and 64-bit RNGs in both C and Fortran</a> <br> !   [3] <a href=\"http://forums.silverfrost.com/viewtopic.php?p=20716&sid=ef071ed8302541d789d1e08c0fbda580\"> !       Help for a 64-bit RNG</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: SuperKiss64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: tIndex , PARAMETER :: QSIZE = 20632_kIndex tSInt64 , PARAMETER :: CMul = 6906969069_kInt64 tSInt64 , PARAMETER :: CAdd = 123_kInt64 !** DERIVED TYPE DEFINITIONS !> The *SuperKiss64RNG* type is a *Long* PRNG type based on the *SuperKISS* !  algorithm by George Marsaglia. TYPE , EXTENDS ( LongRNG ) :: SuperKiss64RNG PRIVATE !% state of CMWC generator tSInt64 :: QState ( QSIZE ) !% index into QState tIndex :: Index = QSIZE + 1_kIndex !% carry tSInt64 :: Carry = 36243678541_kInt64 !% state of the linear congruential generator tSInt64 :: CState = 12367890123456_kInt64 !% state of the xorshift generator tSInt64 :: XState = 521288629546311_kInt64 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *BaseInit* method to initialize the PRNG instead. PROCEDURE :: BaseInit => SuperKiss64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => SuperKiss64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => SuperKiss64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => SuperKiss64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE SuperKiss64RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE SuperKiss64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'SuperKiss64RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss64RNG ), INTENT ( INOUT ) :: RNG !! 'SuperKiss64RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I ! FLOW ! set initial seed(s) SELECT CASE ( SIZE ( Seed )) CASE ( 1 ) RNG % Carry = IEOR ( RNG % Carry , Seed ( 1 )) CASE ( 2 ) RNG % Carry = IEOR ( RNG % Carry , Seed ( 1 )) RNG % CState = IEOR ( RNG % CState , Seed ( 2 )) CASE ( 3 ) RNG % Carry = IEOR ( RNG % Carry , Seed ( 1 )) RNG % CState = IEOR ( RNG % CState , Seed ( 2 )) RNG % XState = IEOR ( RNG % XState , Seed ( 3 )) END SELECT ! fill QState with Congruential + Xorshift DO I = 1_kIndex , QSIZE ! Congruential generator RNG % CState = CMul * RNG % CState + CAdd ! Xorshift generator RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 13 )) RNG % XState = IEOR ( RNG % XState , SHIFTR ( RNG % XState , 17 )) RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 43 )) ! fill Q RNG % QState ( I ) = RNG % CState + RNG % XState END DO RETURN END SUBROUTINE SuperKiss64RNG_BaseInit !****************************************************************************** FUNCTION SuperKiss64RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss64RNG ), INTENT ( INOUT ) :: RNG !! 'SuperKiss64RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: QState ! FLOW ! CMWC generator IF ( RNG % Index <= QSIZE ) THEN QState = RNG % QState ( RNG % Index ) ELSE RNG % Index = 1 QState = Refill ( RNG % QState , RNG % Carry , RNG % Index ) END IF ! Congruential generator RNG % CState = CMul * RNG % CState + CAdd ! Xorshift generator RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 13 )) RNG % XState = IEOR ( RNG % XState , SHIFTR ( RNG % XState , 17 )) RNG % XState = IEOR ( RNG % XState , SHIFTL ( RNG % XState , 43 )) ! SuperKISS generator RandNum = QState + RNG % CState + RNG % XState RETURN CONTAINS FUNCTION Refill ( Q , C , ID ) RESULT ( Q1 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To refill the QState array and return the first QState. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , INTENT ( INOUT ) :: Q (:) !! QState array tSInt64 , INTENT ( INOUT ) :: C !! Carry tIndex , INTENT ( INOUT ) :: ID !! Index tSInt64 :: Q1 !! the first QState !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: I tSInt64 :: Z , H ! FLOW ! refill QState DO I = 1_kIndex , QSIZE H = IAND ( C , 1_kInt64 ) Z = SHIFTR ( SHIFTL ( Q ( I ), 41 ), 1 ) + SHIFTR ( SHIFTL ( Q ( I ), 39 ), 1 ) + SHIFTR ( C , 1 ) C = SHIFTR ( Q ( I ), 23 ) + SHIFTR ( Q ( I ), 25 ) + SHIFTR ( Z , 63 ) Q ( I ) = NOT ( SHIFTL ( Z , 1 ) + H ) END DO ! return the first QState Q1 = Q ( ID ) ! update index ID = ID + 1_kIndex RETURN END FUNCTION Refill !************************************************************************** END FUNCTION SuperKiss64RNG_NextLong !****************************************************************************** FUNCTION SuperKiss64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss64RNG ), INTENT ( IN ) :: RNG !! 'SuperKiss64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'SuperKiss64RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION SuperKiss64RNG_GetName !****************************************************************************** FUNCTION SuperKiss64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( SuperKiss64RNG ), INTENT ( IN ) :: RNG !! 'SuperKiss64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 3_kIndex ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION SuperKiss64RNG_GetSeedSize !****************************************************************************** END MODULE MClass_SuperKiss64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_superkiss64rng.f90.html"},{"title":"MClass_PcgRxsMXs64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_PcgRxsMXs64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *PcgRxsMXs64RNG* type and its related routines. !   The *PcgRxsMXs64RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *PcgRxsMXs64RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on an algorithm from the Permuted !   Congruential Generator (PCG) family that that use an internal 64-bit Linear !   Congruential Generator (LCG) combined with the RXS-M-XS (random xorshift; !   multiply; xorshift) output transformation to create 64-bit output. <br> !   The *PcgRxsMXs64RNG* type has state size of 128 bits and a period of !   2<sup>64</sup>. <br> !   It is important to note that the *PcgRxsMXs64* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.pcg-random.org/\"> !       PCG, A Family of Better Random Number Generators.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/PcgRxsMXs64.html\"> !       Apache Commons RNG: Class PcgRxsMXs64</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: PcgRxsMXs64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *PcgLcg32RNG* type is a *Long* PRNG type based on an algorithm from !  the Permuted Congruential Generator (PCG) family that use an internal 64-bit !  Linear Congruential Generator (LCG) and output 64-bits per cycle. TYPE , EXTENDS ( LongRNG ) :: PcgRxsMXs64RNG PRIVATE ! The state of the LCG tSInt64 :: State ! The increment of the LCG tSInt64 :: Increment CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => PcgRxsMXs64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => PcgRxsMXs64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => PcgRxsMXs64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => PcgRxsMXs64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE PcgRxsMXs64RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE PcgRxsMXs64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'PcgRxsMXs64RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgRxsMXs64RNG ), INTENT ( INOUT ) :: RNG !! 'PcgRxsMXs64RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Seed0 ( 2 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! Ensure the increment is odd to provide a maximal period LCG. RNG % Increment = IOR ( SHIFTL ( Seed0 ( 2 ), 1 ), 1_kInt64 ) RNG % State = Bump ( RNG , Seed0 ( 1 ) + RNG % Increment ) RETURN END SUBROUTINE PcgRxsMXs64RNG_BaseInit !****************************************************************************** FUNCTION PcgRxsMXs64RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgRxsMXs64RNG ), INTENT ( INOUT ) :: RNG !! 'PcgRxsMXs64RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: X , Word ! FLOW X = RNG % State RNG % State = Bump ( RNG , RNG % State ) Word = IEOR ( SHIFTR ( X , ( SHIFTR ( X , 59 ) + 5 )), X ) * ( - 5840758589994634535_kInt64 ) RandNum = IEOR ( SHIFTR ( Word , 43 ), Word ) RETURN END FUNCTION PcgRxsMXs64RNG_NextLong !****************************************************************************** FUNCTION PcgRxsMXs64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgRxsMXs64RNG ), INTENT ( IN ) :: RNG !! 'PcgRxsMXs64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'PcgRxsMXs64RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION PcgRxsMXs64RNG_GetName !****************************************************************************** FUNCTION PcgRxsMXs64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgRxsMXs64RNG ), INTENT ( IN ) :: RNG !! 'PcgRxsMXs64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 2 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION PcgRxsMXs64RNG_GetSeedSize !****************************************************************************** FUNCTION Bump ( RNG , Input ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To provide the next state of the LCG. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( PcgRxsMXs64RNG ), INTENT ( IN ) :: RNG !! 'PcgRxsMXs64RNG' object tSInt64 , INTENT ( IN ) :: Input !! current state tSInt64 :: Output !! next state !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = Input * 6364136223846793005_kInt64 + RNG % Increment RETURN END FUNCTION Bump !****************************************************************************** END MODULE MClass_PcgRxsMXs64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_pcgrxsmxs64rng.f90.html"},{"title":"MClass_RanLuxPpRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_RanLuxPpRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *RanLuxPpRNG* type and its related routines. !   The *RanLuxPpRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *RanLuxPpRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *RANLUX++* algorithm by !   Alexei Sibidanov. <br> !   The *RANLUX++* algorithm is equivalent to the *RANLUX* algorithm but !   employs an equivalent Linear Congruential generator (LCG) in place of !   the Subtract-With-Borrow (SWB) generator.  Unlike the *RANLUX* algorithm, !   the *RANLUX++* algorithm destroys correlations of generated numbers by fast !   skipping of numbers instead of throwing away some of generated number. !   Therefore, it is faster and can perform the decimation at a higher level !   than the highest standard level of the *RANLUX* algorithm.  <br> !   It is important to note that the *RanLux++* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://arxiv.org/abs/1705.03123\"> !       A. Sibidanov.  2017.  A revision of the subtract-with-borrow random !       number generators.  arXiv:1705.03123 [physics.comp-ph]. </a> <br> !   [2] <a href=\"https://arxiv.org/abs/1903.01247\"> !       F. James and L. Moneta.  2019.  Review of High-Quality Random Number !       Generators.  arXiv:1903.01247 [physics.comp-ph]. </a> <br> !   [3] <a href=\"https://github.com/sibidanov/ranluxpp\"> !       RANLUX++: The original implementation of Ranlux++ RNG. </a> <br> !   [4] <a href=\"https://github.com/jirka-h/ranluxpp-portable\"> !       RANLUX++: The portable version of Ranlux++ RNG. </a> !** USE STATEMENTS: USE ISO_C_BINDING , ONLY : C_LOC , C_F_POINTER , C_PTR , C_NULL_PTR USE MBase_Common USE MBase_SIntUtil , ONLY : MIN_I64 , MAX_I64 USE MBase_UIntUtil , ONLY : MAX_U64 , ToUnsignedLong , UMulBasic USE MClass_BaseRNG USE MClass_IntegerRNG , ONLY : MaskL USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: RanLuxPpRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Size of the seed required tIndex , PARAMETER :: STATE_SIZE = 9_kIndex tIndex , PARAMETER :: CACHE_SIZE = 11_kIndex ! A = M - (M-1)/B = 2&#94;576 - 2&#94;552 - 2&#94;240 + 2&#94;216 + 1 tUInt64 , PARAMETER :: InitA ( STATE_SIZE ) = [ & ToInt64 ( Z '0000000000000001' ), ToInt64 ( Z '0000000000000000' ), & ToInt64 ( Z '0000000000000000' ), ToInt64 ( Z 'FFFF000001000000' ), & ToInt64 ( Z 'FFFFFFFFFFFFFFFF' ), ToInt64 ( Z 'FFFFFFFFFFFFFFFF' ), & ToInt64 ( Z 'FFFFFFFFFFFFFFFF' ), ToInt64 ( Z 'FFFFFFFFFFFFFFFF' ), & ToInt64 ( Z 'FFFFFEFFFFFFFFFF' )] !** DERIVED TYPE DEFINITIONS !> The *RanLuxPpRNG* type is a *Long* PRNG type based on the *RANLUX++* algorithm !  by A. Sibidanov. TYPE , EXTENDS ( LongRNG ) :: RanLuxPpRNG PRIVATE !% multiplier tUInt64 :: A ( STATE_SIZE ) = InitA !% current state tUInt64 :: X ( STATE_SIZE ) = 0_kInt64 !% cached double-precision random numbers tRealDP :: D ( CACHE_SIZE ) = 0.0_kDouble !% skipping parameter tUInt64 :: P = 2048_kInt64 !% index into the cached output tIndex :: Index = CACHE_SIZE + 1_kIndex CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithSkipping => RanLuxPpRNG_InitWithSkipping PROCEDURE , PRIVATE :: Update => RanLuxPpRNG_Update ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => RanLuxPpRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => RanLuxPpRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => RanLuxPpRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => RanLuxPpRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use default skipping parameter (= 2048) <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); default skipping parameter (= 2048) <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use specified skipping parameter (= 389) <br> !   --->    CALL RNG%Initialize(389) <br> !   ! initialize with seed(s); use specified luxury level (= 1024) <br> !   --->    CALL RNG%Initialize(1024, Seeds) <br> !  **Usage**: If specified, the skipping parameter should be between 24 and 4096. GENERIC :: Initialize => InitWithSkipping ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *Default_NextDouble* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *Default_NextDouble* !  method to generate a 64-bit real number. PROCEDURE :: Default_NextDouble => RanLuxPpRNG_NextDouble ! --------------------------------------------------------------------- END TYPE RanLuxPpRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE RanLuxPpRNG_InitWithSkipping ( RNG , Skip , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified skipping (p) parameter. !  Optionally, initial Seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'RanLuxPpRNG' object CLASS ( RanLuxPpRNG ), INTENT ( INOUT ) :: RNG !> skipping (p) parameter with valid range of [24, 4096]. <br> !  If value is out of the valid range, use default value (2048). tSInt32 , INTENT ( IN ) :: Skip !% optional 64-bit integer seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set skipping (p) parameter IF ( IN_RANGE ( Skip , 24 , 4096 )) THEN RNG % P = ToInt64 ( Skip ) ELSE RNG % P = 2048_kInt64 END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE RanLuxPpRNG_InitWithSkipping !****************************************************************************** SUBROUTINE RanLuxPpRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'RanLuxPpRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxPpRNG ), INTENT ( INOUT ) :: RNG !! 'RanLuxPpRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE PARAMETER DECLARATIONS: tUInt64 , PARAMETER :: Two48 = SHIFTL ( 1_kInt64 , 48 ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 :: Seed0 tUInt64 :: A ( STATE_SIZE ) ! FLOW ! set initial seed Seed0 = Seed ( 1 ) ! set state and multiplier RNG % X ( 1 ) = 1_kInt64 RNG % X ( 2 :) = 0_kInt64 RNG % A = InitA ! set A = MOD(InitA**P, M) CALL PowMod ( RNG % A , RNG % P , RNG % A ) ! initialize with the initial seed CALL PowMod ( RNG % A , Two48 , A ) CALL PowMod ( A , Two48 , A ) ! skip 2**96 states CALL PowMod ( A , Seed0 , A ) ! skip (2**96)*Seed0 states CALL MulMod ( A , RNG % X ) ! set index RNG % Index = CACHE_SIZE + 1_kIndex RETURN END SUBROUTINE RanLuxPpRNG_BaseInit !****************************************************************************** FUNCTION RanLuxPpRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxPpRNG ), INTENT ( INOUT ) :: RNG !! 'RanLuxPpRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tRealDP , PARAMETER :: Diff = ToRealDP ( MAX_I64 ) - ToRealDP ( MIN_I64 ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = ToInt64 ( RNG % NextDouble () * Diff ) + MIN_I64 RETURN END FUNCTION RanLuxPpRNG_NextLong !****************************************************************************** FUNCTION RanLuxPpRNG_NextDouble ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random real value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxPpRNG ), INTENT ( INOUT ) :: RNG !! 'RanLuxPpRNG' object tRealDP :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! update current state if necessary IF ( RNG % Index > CACHE_SIZE ) CALL RNG % Update () ! get random number RandNum = RNG % D ( RNG % Index ) ! update index RNG % Index = RNG % Index + 1_kIndex RETURN END FUNCTION RanLuxPpRNG_NextDouble !****************************************************************************** SUBROUTINE RanLuxPpRNG_Update ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the current state as well as the cached values. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxPpRNG ), INTENT ( INOUT ) :: RNG !! 'RanLuxPpRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na !** FLOW ! compute next state: the core of LCG -- modular multiplication CALL MulMod ( RNG % A , RNG % X ) ! unpack state into cached values CALL UnpackState ( RNG % X , RNG % D ) ! reset index RNG % Index = 1_kIndex RETURN CONTAINS SUBROUTINE UnpackState ( X , D ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To unpack 64-bit integer state into double-precision real cached values. !  52 bits out of possible 53 bits are random. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: X ( 0 :) ! state (9 elements) tRealDP , TARGET , INTENT ( OUT ) :: D ( 0 :) ! cached values (11 elements) !** SUBROUTINE PARAMETER DECLARATIONS: tUInt64 , PARAMETER :: E = ToInt64 ( Z '3FF0000000000000' ) ! exponent tUInt64 , PARAMETER :: M = ToInt64 ( Z '000FFFFFFFFFFFFF' ) ! mantissa !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 , POINTER :: ID (:) ! Fortran pointer to cached values TYPE ( C_PTR ) :: CPtr ! C pointer to cached values !** FLOW ! get a C pointer to data content CPtr = C_LOC ( D ) ! associate a Fortran data pointer with the C pointer CALL C_F_POINTER ( cPtr , ID , [ CACHE_SIZE ]) ! unpack state into cached values ID ( 0 ) = IOR ( E , IAND ( M , X ( 0 ))) ID ( 1 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 0 ), 52 ), SHIFTL ( X ( 1 ), 12 )))) ID ( 2 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 1 ), 40 ), SHIFTL ( X ( 2 ), 24 )))) ID ( 3 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 2 ), 28 ), SHIFTL ( X ( 3 ), 36 )))) ID ( 4 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 3 ), 16 ), SHIFTL ( X ( 4 ), 48 )))) ID ( 5 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 4 ), 4 ), SHIFTL ( X ( 5 ), 60 )))) ID ( 6 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 4 ), 56 ), SHIFTL ( X ( 5 ), 8 )))) ID ( 7 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 5 ), 44 ), SHIFTL ( X ( 6 ), 20 )))) ID ( 8 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 6 ), 32 ), SHIFTL ( X ( 7 ), 32 )))) ID ( 9 ) = IOR ( E , IAND ( M , IOR ( SHIFTR ( X ( 7 ), 20 ), SHIFTL ( X ( 8 ), 44 )))) ID ( 10 ) = IOR ( E , IAND ( M , SHIFTR ( X ( 8 ), 8 ))) ! subtract D by 1 D = D - 1.0_kDouble ! nullify pointers NULLIFY ( ID ) cPtr = C_NULL_PTR RETURN END SUBROUTINE UnpackState !****************************************************************************** END SUBROUTINE RanLuxPpRNG_Update !****************************************************************************** FUNCTION RanLuxPpRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxPpRNG ), INTENT ( IN ) :: RNG !! 'RanLuxPpRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'RanLuxPpRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION RanLuxPpRNG_GetName !****************************************************************************** FUNCTION RanLuxPpRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( RanLuxPpRNG ), INTENT ( IN ) :: RNG !! 'RanLuxPpRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION RanLuxPpRNG_GetSeedSize !****************************************************************************** FUNCTION AddOverflow ( A , B , Overflow ) RESULT ( C ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To compute C = A + B and set Overflow accordingly. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: A , B tUInt64 , INTENT ( OUT ) :: Overflow tUInt64 :: C !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW C = A + B IF ( C < A ) THEN Overflow = 1_kInt64 ELSE Overflow = 0_kInt64 END IF RETURN END FUNCTION AddOverflow !****************************************************************************** FUNCTION AddCarry ( A , B , Carry ) RESULT ( C ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To compute C = A + B and increment Carry if there was an overflow. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: A , B tUInt64 , INTENT ( INOUT ) :: Carry tUInt64 :: C !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 :: Overflow ! FLOW C = AddOverflow ( A , B , Overflow ) Carry = Carry + Overflow RETURN END FUNCTION AddCarry !****************************************************************************** FUNCTION SubOverflow ( A , B , Overflow ) RESULT ( C ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To compute C = A - B and set Overflow accordingly. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: A , B tUInt64 , INTENT ( OUT ) :: Overflow tUInt64 :: C !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW C = A + B IF ( C > A ) THEN Overflow = 1_kInt64 ELSE Overflow = 0_kInt64 END IF RETURN END FUNCTION SubOverflow !****************************************************************************** FUNCTION SubCarry ( A , B , Carry ) RESULT ( C ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To compute C = A + B and increment Carry if there was an overflow. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: A , B tUInt64 , INTENT ( INOUT ) :: Carry tUInt64 :: C !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 :: Overflow ! FLOW C = SubOverflow ( A , B , Overflow ) Carry = Carry + Overflow RETURN END FUNCTION SubCarry !****************************************************************************** FUNCTION ComputeR ( Upper , R ) RESULT ( C ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the remainder: r = r - (t1 + t2) + (t3 + t2) * b ** 10. !  This function also yields cbar = floor(r / m) as its return value. !  With an initial value of r = t0, this can be used for computing !  the remainder after division by m (see the function ModM). !  The function to_ranlux passes r = 0 and uses only the return value !  to obtain the decimal expansion after division by m. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: Upper ( 0 :) tUInt64 , INTENT ( INOUT ) :: R ( 0 :) tSInt64 :: C !** SUBROUTINE PARAMETER DECLARATIONS: tUInt64 , PARAMETER :: Mask = ToInt64 ( Z '0000FFFFFFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 :: RI , T1 , T2 , T3 tUInt64 :: Carry , Overflow tIndex :: I tLogical :: GreaterM ! FLOW ! Subtract t1 (24 * 24 = 576 bits) Carry = 0_kInt64 DO I = 0 , 8 RI = SubOverflow ( R ( I ), Carry , Overflow ) T1 = Upper ( I ) R ( I ) = SubCarry ( RI , T1 , Overflow ) Carry = Overflow END DO C = - Carry ! Subtract t2 (only 240 bits, so need to extend) Carry = 0_kInt64 DO I = 0 , 8 RI = SubOverflow ( R ( I ), Carry , Overflow ) T2 = 0_kInt64 IF ( I < 4 ) THEN T2 = T2 + SHIFTR ( Upper ( I + 5 ), 16 ) IF ( I < 3 ) THEN T2 = T2 + SHIFTR ( Upper ( I + 6 ), 48 ) END IF END IF R ( I ) = SubCarry ( RI , T2 , Overflow ) Carry = Overflow END DO C = C - Carry ! r = r + (t3 + t2) * 2 ** 240 Carry = 0_kInt64 T2 = SHIFTL ( SHIFTR ( Upper ( 5 ), 16 ), 48 ) T3 = SHIFTL ( Upper ( 0 ), 48 ) RI = AddCarry ( R ( 3 ), T2 , Carry ) R ( 3 ) = AddCarry ( RI , T3 , Carry ) DO I = 0 , 2 RI = AddOverflow ( R ( I + 4 ), Carry , Overflow ) T2 = SHIFTR ( Upper ( I + 5 ), 32 ) + SHIFTL ( Upper ( I + 6 ), 32 ) T3 = SHIFTR ( Upper ( I ), 16 ) + SHIFTL ( Upper ( I + 1 ), 48 ) R ( I + 4 ) = RI RI = AddCarry ( R ( I + 4 ), T2 , Overflow ) R ( I + 4 ) = AddCarry ( RI , T3 , Overflow ) Carry = Overflow END DO RI = AddOverflow ( R ( 7 ), Carry , Overflow ) T2 = SHIFTR ( Upper ( 8 ), 32 ) T3 = SHIFTR ( Upper ( 3 ), 16 ) + SHIFTL ( Upper ( 4 ), 48 ) R ( 7 ) = RI RI = AddCarry ( R ( 7 ), T2 , Overflow ) R ( 7 ) = AddCarry ( RI , T3 , Overflow ) Carry = Overflow RI = AddOverflow ( R ( 8 ), Carry , Overflow ) T3 = SHIFTR ( Upper ( 4 ), 16 ) + SHIFTL ( Upper ( 5 ), 48 ) R ( 8 ) = AddCarry ( RI , T3 , Overflow ) Carry = Overflow C = C + Carry ! c = floor(r / 2 ** 576) has been computed along the way via the carry ! flags. Now if c = 0 and the value currently stored in r is greater or ! equal to m, we need cbar = 1 and subtract m, otherwise cbar = c. The ! value currently in r is greater or equal to m, if and only if one of ! the last 240 bits is set and the upper bits are all set. GreaterM = ( IOR ( IOR ( IOR ( R ( 0 ), R ( 1 )), R ( 2 )), IAND ( R ( 3 ), Mask )) > 0_kInt64 ) GreaterM = ( GreaterM . AND . ( SHIFTR ( R ( 3 ), 48 ) == ToInt64 ( Z '000000000000FFFF' ))) DO I = 4 , 8 GreaterM = ( GreaterM . AND . ( R ( I ) == MAX_U64 )) END DO IF (( C == 0_kInt64 ). AND . GreaterM ) C = C + 1_kInt64 RETURN END FUNCTION ComputeR !****************************************************************************** SUBROUTINE ModM ( Mul , Res ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To compute a value congruent to Mul modulo M less than 2 ** 576 !  where M = 2**256 - 2**240 + 1.  The result is guaranteed to be !  smaller than the modulus. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt64 , INTENT ( IN ) :: Mul ( 0 :) !! multiplication product of 18 elements tUInt64 , INTENT ( INOUT ) :: Res ( 0 :) !! result with 9 elements !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 :: R ( 0 : 8 ) tUInt64 :: RI , Carry , Overflow tSInt64 :: C , T0 , T1 , T2 tIndex :: I ! FLOW ! assign r = t0 R ( 0 : 8 ) = Mul ( 0 : 8 ) ! compute remainder C = ComputeR ( Mul ( 9 :), R ) ! To update r = r - c * m, it suffices to know c * (-2 ** 240 + 1) ! because the 2 ** 576 will cancel out.  Also note that c may be zero, but ! the operation is still performed to avoid branching. ! c * (-2 ** 240 + 1) in 576 bits looks as follows, depending on c: !  - if c = 0, the number is zero. !  - if c = 1: bits 576 to 240 are set, !              bits 239 to 1 are zero, and !              the last one is set !  - if c = -1, which corresponds to all bits set (signed int64_t): !              bits 576 to 240 are zero and the rest is set. ! Note that all bits except the last are exactly complimentary (unless c = 0) ! and the last byte is conveniently represented by c already. ! Now construct the three bit patterns from c. ! --------------------------------------------------------------- ! Note:  C, T0, T1 and T2 are all treated as signed integers in !        the following three statements but after that all Ts !        are treated as unsigned integers. ! --------------------------------------------------------------- T0 = SHIFTA ( C , 1 ) T2 = T0 - SHIFTL ( C , 48 ) T1 = SHIFTA ( T2 , 48 ) ! alternative implementation of the above three statements !IF (C = 0_kInt64) THEN !    T0 = 0_kInt64 !    T1 = 0_kInt64 !    T2 = 0_kInt64 !ELSEIF (C = 1_kInt64) THEN !    T0 = 0_kInt64 !    T1 = ToInt64(Z'FFFFFFFFFFFFFFFF') !    T2 = ToInt64(Z'FFFF000000000000') !ELSE !    T0 = ToInt64(Z'FFFFFFFFFFFFFFFF') !    T1 = 0_kInt64 !    T2 = ToInt64(Z'0000FFFFFFFFFFFF') !END IF Carry = 0_kInt64 Res ( 0 ) = SubCarry ( R ( 0 ), C , Carry ) DO I = 1 , 2 RI = SubOverflow ( R ( I ), Carry , Overflow ) Res ( I ) = SubCarry ( RI , T0 , Overflow ) Carry = Overflow END DO RI = SubOverflow ( R ( 3 ), Carry , Overflow ) Res ( 3 ) = SubCarry ( RI , T2 , Overflow ) Carry = Overflow DO I = 4 , 8 RI = SubOverflow ( R ( I ), Carry , Overflow ) Res ( I ) = SubCarry ( RI , T1 , Overflow ) Carry = Overflow END DO RETURN END SUBROUTINE ModM !****************************************************************************** SUBROUTINE MulMod ( Inp , InpOut ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform multiplication and then compute the product modulo M. !** SUBROUTINE ARGUMENT DECLARATIONS: !% first factor of multiplication with 9 elements tUInt64 , INTENT ( IN ) :: Inp (:) !> on entry, second factor with 9 elements <br> !  on exit, the result guaranteed to be smaller than the modulus tUInt64 , INTENT ( INOUT ) :: InpOut (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 :: Mul ( 2 * STATE_SIZE ) ! product of multiplication ! FLOW ! initialize to zero Mul = 0_kInt64 ! perform multiplication CALL UMulBasic ( Inp , STATE_SIZE , InpOut , STATE_SIZE , Mul ) ! compute the product modulo M CALL ModM ( Mul , InpOut ) RETURN END SUBROUTINE MulMod !****************************************************************************** SUBROUTINE PowMod ( Base , N , Res ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To compute Base to the N modulo M. !  (To perform modular exponentiation: Res = Base**N mod M where !   M = 2**576 - 2**240 + 1). !** SUBROUTINE ARGUMENT DECLARATIONS: !% the base with 9 elements tUInt64 , INTENT ( IN ) :: Base (:) !% the exponent tUInt64 , INTENT ( IN ) :: N !% the output with 9 elements tUInt64 , INTENT ( INOUT ) :: Res (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tUInt64 :: Factor ( STATE_SIZE ) ! working array tUInt64 :: Mul ( 2 * STATE_SIZE ) ! working array tUInt64 :: Exp ! FLOW ! initialize Factor ( 1 : STATE_SIZE ) = Base ( 1 : STATE_SIZE ) Res ( 1 ) = 1_kInt64 Res ( 2 :) = 0_kInt64 Mul = 0_kInt64 Exp = N ! perform modular exponentiation DO WHILE ( Exp /= 0_kInt64 ) IF ( IAND ( Exp , 1_kInt64 ) /= 0_kInt64 ) THEN CALL UMulBasic ( Res , STATE_SIZE , Factor , STATE_SIZE , Mul ) CALL ModM ( Mul , Res ) END IF Exp = SHIFTR ( Exp , 1 ) IF ( Exp == 0_kInt64 ) EXIT CALL UMulBasic ( Factor , STATE_SIZE , Factor , STATE_SIZE , Mul ) CALL ModM ( Mul , Factor ) END DO RETURN END SUBROUTINE PowMod !****************************************************************************** END MODULE MClass_RanLuxPpRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_ranluxpprng.f90.html"},{"title":"MClass_L32X64MRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L32X64MRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L32X64MRNG* type and its related routines. !   The *L32X64MRNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type. <br> !   In particular, the *L32X64MRNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the *L32X64* algorithm. !   The *L32X64* algorithm is a specific member of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L32X64MRNG* type employs a 32-bit LCG, a 64-bit XBG and a mixing function !   where its memory footprint is 128 bits and its period is roughly 2<sup>96</sup>. <br> !   In addition to common operations of a PRNG, the *L32X64MRNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform. <br> !   The *L32X64MRNG* type also provides the *Jump* and *LongJump* methods where !   a large (or very large) number of steps of the output sequence can be advanced !   in a single operation.  Each method creates (and also returns) a copy of the !   input PRNG and then advances the state of the specified PRNG.  The PRNG and its !   copy produce non-overlapping output for the length of the jump intendedly for !   use in parallel computations. <br> !   It is important to note that the *L32X64* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  Also, it should be noted that the implementation of !   this PRNG type is based on reference #3 where the *L32X64RNG* type, !   which is based on the same algorithm, is based its implementation on !   reference #2. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/L32X64Mix.html\"> !       Apache Commons RNG: Class L32X64Mix</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L32X64MRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! 32-bit LCG multiplier. Note: (M % 8) = 5. tSInt32 , PARAMETER :: M = ToInt32 ( Z 'ADB4A92D' ) ! Jump constant {m'} for an advance of the 32-bit LCG by 2&#94;16. ! Computed as: {m' = m&#94;(2&#94;16) (mod 2&#94;32)}. tSInt32 , PARAMETER :: M32P = ToInt32 ( Z '65640001' ) ! Jump constant precursor for {c'} for an advance of the 32-bit LCG by 2&#94;16. ! Computed as: ! product_{i=0}&#94;{15} { M&#94;(2&#94;i) + 1 } (mod 2&#94;32) ! The jump is computed for the LCG with an update step of {s = m * s + c} as: ! s = m' * s + c' * c tSInt32 , PARAMETER :: C32P = ToInt32 ( Z '046B0000' ) !** DERIVED TYPE DEFINITIONS !> The *L32X64MRNG* type is an *Integer* PRNG type based on the *L32X64* !  algorithm, which is a specific member of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( IntegerRNG ) :: L32X64MRNG PRIVATE !  The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt32 :: A ! The per-instance state: S for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt32 :: S , X0 , X1 CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: MakeACopy => L32X64MRNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L32X64MRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => L32X64MRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L32X64MRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L32X64MRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L32X64MRNG_Split !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => L32X64MRNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => L32X64MRNG_LongJump ! --------------------------------------------------------------------- END TYPE L32X64MRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L32X64MRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L32X64MRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( INOUT ) :: RNG !! 'L32X64MRNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 4 ) ! FLOW ! set initial seed CALL Extend_Seed ( Seed , Seed0 ) ! Additive parameter must be odd RNG % A = IOR ( Seed0 ( 1 ), 1 ) RNG % S = Seed0 ( 2 ) RNG % X0 = Seed0 ( 3 ) RNG % X1 = Seed0 ( 4 ) RETURN END SUBROUTINE L32X64MRNG_BaseInit !****************************************************************************** FUNCTION L32X64MRNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( INOUT ) :: RNG !! 'L32X64MRNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Q0 , Q1 ! FLOW ! +++ Mix +++ RandNum = Mix_Lea ( RNG % S + RNG % X0 ) ! +++ LCG Update +++ RNG % S = M * RNG % S + RNG % A ! +++ XBG Update +++ Q0 = RNG % X0 Q1 = RNG % X1 ! xoroshiro64 Q1 = IEOR ( Q1 , Q0 ) Q0 = IEOR ( IEOR ( RotateLeft ( Q0 , 26 ), Q1 ), SHIFTL ( Q1 , 9 )) ! a, b Q1 = RotateLeft ( Q1 , 13 ) ! c RNG % X0 = Q0 RNG % X1 = Q1 RETURN END FUNCTION L32X64MRNG_NextInteger !****************************************************************************** FUNCTION L32X64MRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( IN ) :: RNG !! 'L32X64MRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'L32X64MRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L32X64MRNG_GetName !****************************************************************************** FUNCTION L32X64MRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( IN ) :: RNG !! 'L32X64MRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 4 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L32X64MRNG_GetSeedSize !****************************************************************************** FUNCTION L32X64MRNG_Split ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a new generator split off from the current instance. !  Use the current generator to generate an initial seed and also !  employ it as a source of randomness used to initialize the !  new generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( INOUT ) :: RNG !! 'L32X64MRNG' object TYPE ( L32X64MRNG ) :: NewRNG !! new 'L32X64MRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: LongSeed tSInt32 :: Seed0 ( 4 ) ! FLOW ! The upper half of the long seed is discarded so use nextInt LongSeed = RNG % NextInteger () ! LCG state. The addition uses the input seed. ! The LCG addition parameter is set to odd so left-shift the seed. Seed0 ( 1 ) = ToInt32 ( SHIFTL ( LongSeed , 1 )) Seed0 ( 2 ) = RNG % NextInteger () ! XBG state must not be all zero Seed0 ( 3 ) = RNG % NextInteger () Seed0 ( 4 ) = RNG % NextInteger () IF ( IOR ( Seed0 ( 3 ), Seed0 ( 4 )) == 0 ) THEN ! SplitMix style seed ensures at least one non-zero value Seed0 ( 3 ) = Mix_Lea ( Seed0 ( 2 )) Seed0 ( 4 ) = Mix_Lea ( Seed0 ( 2 ) + GOLDEN_RATIO_32 ) END IF ! initialize the New PRNG with initial seeds CALL NewRNG % Initialize ( Seed0 ) RETURN END FUNCTION L32X64MRNG_Split !****************************************************************************** FUNCTION L32X64MRNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !> To copy all components of the source object to the destination object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( IN ) :: Src !! source object TYPE ( L32X64MRNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! copy states Dst % A = Src % A Dst % S = Src % S Dst % X0 = Src % X0 Dst % X1 = Src % X1 ! copy initial seeds for re-initialization CALL Src % CopySeed ( Dst ) RETURN END FUNCTION L32X64MRNG_Copy !****************************************************************************** FUNCTION L32X64MRNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  one.  The new generator is returned.  <br> !  The jump is performed by advancing the state of the LCG sub-generator by 1 cycle. !  The XBG state is unchanged.  The jump size is the equivalent of moving the state !  backwards by (2<sup>64</sup> - 1) positions. It can provide up to 2<sup>32</sup> !  non-overlapping subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( INOUT ) :: RNG !! 'L32X64MRNG' object TYPE ( L32X64MRNG ) :: NewRNG !! new 'L32X64MRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! Advance the LCG 1 step RNG % S = M * RNG % S + RNG % A RETURN END FUNCTION L32X64MRNG_Jump !****************************************************************************** FUNCTION L32X64MRNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  one.  The new generator is returned.  <br> !  The jump is performed by advancing the state of the LCG sub-generator by !  2<sup>16</sup> cycles.  The XBG state is unchanged.  The jump size is the !  equivalent of moving the state backwards by roughly 2<sup>80</sup> positions. !  It can provide up to 2<sup>16</sup> non-overlapping subsequences of length !  about 2<sup>80</sup>; each subsequence can provide up to 2<sup>16</sup> !  non-overlapping subsequences of length (2<sup>64</sup> - 1) using the !  Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64MRNG ), INTENT ( INOUT ) :: RNG !! 'L32X64MRNG' object TYPE ( L32X64MRNG ) :: NewRNG !! new 'L32X64MRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! Advance the LCG 2**16 steps RNG % S = M32P * RNG % S + C32P * RNG % A RETURN END FUNCTION L32X64MRNG_LongJump !****************************************************************************** END MODULE MClass_L32X64MRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l32x64mrng.f90.html"},{"title":"MClass_L32X64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L32X64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L32X64RNG* type and its related routines. !   The *L32X64RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type. <br> !   In particular, the *L32X64RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the *L32X64* algorithm. !   The *L32X64* algorithm is a specific member of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L32X64RNG* type employs a 32-bit LCG, a 64-bit XBG and a mixing function !   where its memory footprint is 128 bits and its period is roughly 2<sup>96</sup>. <br> !   In addition to common operations of a PRNG, the *L32X64RNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform.  <br> !   It is important to note that the *L32X64* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  Also, it should be noted that the implementation of !   this PRNG is based on reference #2 where the *LXM3264RNG* type, which is !   based on the same algorithm, is based its implementation on reference #3. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/L32X64Mix.html\"> !       Apache Commons RNG: Class L32X64Mix</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L32X64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *L32X64RNG* type is an *Integer* PRNG type based on the *L32X64* !  algorithm, which is a specific member of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( IntegerRNG ) :: L32X64RNG PRIVATE !  The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt32 :: A ! The per-instance state: S for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt32 :: S , X0 , X1 CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: SetParameters => L32X64RNG_SetParameters ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L32X64RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => L32X64RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L32X64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L32X64RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L32X64RNG_Split ! --------------------------------------------------------------------- END TYPE L32X64RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L32X64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L32X64RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64RNG ), INTENT ( INOUT ) :: RNG !! 'L32X64RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seeds !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: IntSeeds ( 2 ) tSInt64 :: InitSeed ! FLOW ! extend integer seeds CALL Extend_Seed ( Seed , IntSeeds ) ! set initial long seed InitSeed = IOR ( IAND ( ToInt64 ( IntSeeds ( 1 )), MaskL ), SHIFTL ( ToInt64 ( IntSeeds ( 2 )), 32 )) & + GOLDEN_RATIO_64 InitSeed = IEOR ( InitSeed , SILVER_RATIO_64 ) ! set parameters as follows: ! The high half of the seed is hashed by Mix_Murmur to produce the 'A' parameter. ! The low half of the seed is hashed by Mix_Lea to produce the initial 'X0', ! which will then be used to produce the first generated value. ! Then 'X1' is filled in as if by a SplitMix PRNG with GOLDEN_RATIO_32 ! as the gamma value and Mix_Lea as the mixer. CALL RNG % SetParameters ( Mix_Murmur ( ToInt32 ( SHIFTR ( InitSeed , 32 ))), & 1 , Mix_Lea ( ToInt32 ( InitSeed )), & Mix_Lea ( ToInt32 ( InitSeed ) + GOLDEN_RATIO_32 )) RETURN END SUBROUTINE L32X64RNG_BaseInit !****************************************************************************** FUNCTION L32X64RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64RNG ), INTENT ( INOUT ) :: RNG !! 'L32X64RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Multiplier used in the LCG portion of the algorithm. ! Chosen based on research by Sebastiano Vigna and Guy Steele (2019). ! The spectral scores for dimensions 2 through 8 for the multiplier 0xadb4a92d ! are [0.975884, 0.936244, 0.755793, 0.877642, 0.751300, 0.789333, 0.728869]. tSInt32 , PARAMETER :: M = ToInt32 ( Z 'ADB4A92D' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Q0 , Q1 ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % S + RNG % X0 ) ! Update the LCG subgenerator RNG % S = M * RNG % S + RNG % A ! Update the XBG subgenerator Q0 = RNG % X0 Q1 = RNG % X1 ! xoroshiro64 Q1 = IEOR ( Q1 , Q0 ) Q0 = RotateLeft ( Q0 , 26 ) Q0 = IEOR ( IEOR ( Q0 , Q1 ), SHIFTL ( Q1 , 9 )) Q1 = RotateLeft ( Q1 , 13 ) RNG % X0 = Q0 RNG % X1 = Q1 RETURN END FUNCTION L32X64RNG_NextInteger !****************************************************************************** FUNCTION L32X64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64RNG ), INTENT ( IN ) :: RNG !! 'L32X64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'L32X64RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L32X64RNG_GetName !****************************************************************************** FUNCTION L32X64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64RNG ), INTENT ( IN ) :: RNG !! 'L32X64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 2 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L32X64RNG_GetSeedSize !****************************************************************************** SUBROUTINE L32X64RNG_SetParameters ( RNG , A , S , X0 , X1 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To set parameters of the object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L32X64RNG ), INTENT ( INOUT ) :: RNG tSInt32 , INTENT ( IN ) :: A tSInt32 , INTENT ( IN ) :: S tSInt32 , INTENT ( IN ) :: X0 tSInt32 , INTENT ( IN ) :: X1 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: V ! FLOW ! Force a to be odd RNG % A = IOR ( A , 1 ) RNG % S = S ! check if X0 and X1 are both zero or not IF ( IOR ( X0 , X1 ) == 0 ) THEN ! If X0 and X1 are both zero, we must choose nonzero values. V = S + GOLDEN_RATIO_32 ! At least one of the two values generated here will be nonzero. RNG % X0 = Mix_Murmur ( V ) RNG % X1 = Mix_Murmur ( V + GOLDEN_RATIO_32 ) ELSE RNG % X0 = X0 RNG % X1 = X1 END IF RETURN END SUBROUTINE L32X64RNG_SetParameters !****************************************************************************** FUNCTION L32X64RNG_Split ( RNG , Brine ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a new generator split off from the current instance. !  The new generator is initialized and returned where it shares !  no mutable state with the current generator.  However, with very !  high probability, the set of values collectively generated by !  the two generators has the same statistical properties as if the !  same quantity of values were generated by a single thread using !  a single generator.  Either or both of the two generators may be !  further split using this routine, and the same expected statistical !  properties apply to the entire set of generators constructed by !  such recursive splitting. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L32X64RNG' object CLASS ( L32X64RNG ), INTENT ( INOUT ) :: RNG !> a long value, of which the low 63 bits provide a unique id among calls !  to this routine for constructing a single series of Generator objects. tSInt64 , OPTIONAL , INTENT ( IN ) :: Brine !% new 'L32X64RNG' object TYPE ( L32X64RNG ) :: NewRNG !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Salt ! FLOW ! check optional input IF ( PRESENT ( Brine )) THEN Salt = Brine ELSE Salt = RNG % NextLong () END IF ! copy initial seeds for re-initialization CALL RNG % CopySeed ( NewRNG ) ! set parameters by picking a new object at random but use the low 31 bits ! of the salt for 'A' CALL L32X64RNG_SetParameters ( NewRNG , SHIFTL ( ToInt32 ( Salt ), 1 ), RNG % NextInteger (), & RNG % NextInteger (), RNG % NextInteger ()) RETURN END FUNCTION L32X64RNG_Split !****************************************************************************** END MODULE MClass_L32X64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l32x64rng.f90.html"},{"title":"MClass_L128X1024RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L128X1024RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L128X1024RNG* type and its related routines. !   The *L128X1024RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L128X1024RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L128X1024* algorithm.  The !   *L128X1024* algorithm is a specific member of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L128X1024RNG* type employs a 128-bit LCG, a 1024-bit XBG and a mixing function !   where its memory footprint is 1312 bits and its period is roughly 2<sup>1152</sup>. <br> !   In addition to common operations of a PRNG, the *L128X1024RNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform.  <br> !   It is important to note that the *L128X1024* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : OPERATOR (. ULT .), U128_Multiply_High => UMul128_Upper64 USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L128X1024RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: tSInt32 , PARAMETER :: N = 16 ! length of array X !** DERIVED TYPE DEFINITIONS !> The *L128X1024RNG* type is a *Long* PRNG type based on the *L128X1024* !  algorithms, which are specific members of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L128X1024RNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0 ... X15 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: SH , SL tSInt64 :: X ( 0 : N - 1 ) tSInt32 :: P CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128X1024RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128X1024RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128X1024RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128X1024RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128X1024RNG_Split ! --------------------------------------------------------------------- END TYPE L128X1024RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L128X1024RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L128X1024RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X1024RNG ), INTENT ( INOUT ) :: RNG !! 'L128X1024RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: InitSeed1 , InitSeed2 , X ( 0 : 15 ), XSeed tIndex :: I ! FLOW ! set initial seed InitSeed1 = IEOR ( Seed ( 1 ), SILVER_RATIO_64 ) InitSeed2 = InitSeed1 + GOLDEN_RATIO_64 ! set parameters as follows: ! The seed is hashed by Mix_Murmur to produce the 'A' parameter. ! The seed is hashed by Mix_Stafford_13 to produce the initial 'X0', ! which will then be used to produce the first generated value. ! Then 'X1' is filled in as if by a SplitMix PRNG with GOLDEN_RATIO_64 ! as the gamma value and Mix_Stafford_13 as the mixer. XSeed = InitSeed2 DO I = 0 , 15 X ( I ) = Mix_Stafford_13 ( XSeed ) XSeed = XSeed + GOLDEN_RATIO_64 END DO CALL L128X1024RNG_SetParameters ( RNG , Mix_Murmur ( InitSeed1 ), Mix_Murmur ( InitSeed2 ), & 0_kInt64 , 1_kInt64 , X ) RETURN END SUBROUTINE L128X1024RNG_BaseInit !****************************************************************************** FUNCTION L128X1024RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X1024RNG ), INTENT ( INOUT ) :: RNG !! 'L128X1024RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Low half of multiplier used in the LCG portion of the algorithm; ! the overall multiplier is (2**64 + ML). ! Chosen based on research by Sebastiano Vigna and Guy Steele (2019). ! The spectral scores for dimensions 2 through 8 for the multiplier 0x1d605bbb58c8abbfdLL ! are [0.991889, 0.907938, 0.830964, 0.837980, 0.780378, 0.797464, 0.761493]. tSInt64 , PARAMETER :: ML = ToInt64 ( Z 'D605BBB58C8ABBFD' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S15 , U tSInt32 :: Q ! FLOW ! First part of xoroshiro1024: fetch array data Q = RNG % P RNG % P = IAND ( RNG % P + 1 , N - 1 ) S0 = RNG % X ( RNG % P ) S15 = RNG % X ( Q ) ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % SH + S0 ) ! Update the LCG subgenerator ! The LCG is, in effect, s = ((1LL << 64) + ML) * s + a, if only we had 128-bit arithmetic. U = ML * RNG % SL RNG % SH = ( ML * RNG % SH ) + U128_Multiply_High ( ML , RNG % SL ) + RNG % SL + RNG % AH RNG % SL = U + RNG % AL ! Handle the carry propagation from low half to high half. IF ( RNG % SL . ULT . U ) RNG % SH = RNG % SH + 1_kInt64 ! Second part of xoroshiro1024: update array data S15 = IEOR ( S15 , S0 ) RNG % X ( Q ) = IEOR ( IEOR ( RotateLeft ( S0 , 25 ), S15 ), SHIFTL ( S15 , 27 )) RNG % X ( RNG % P ) = RotateLeft ( S15 , 36 ) RETURN END FUNCTION L128X1024RNG_NextLong !****************************************************************************** FUNCTION L128X1024RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X1024RNG ), INTENT ( IN ) :: RNG !! 'L128X1024RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'L128X1024RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L128X1024RNG_GetName !****************************************************************************** FUNCTION L128X1024RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X1024RNG ), INTENT ( IN ) :: RNG !! 'L128X1024RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L128X1024RNG_GetSeedSize !****************************************************************************** SUBROUTINE L128X1024RNG_SetParameters ( RNG , AH , AL , SH , SL , X ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To set parameters of the object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L128X1024RNG ), INTENT ( INOUT ) :: RNG tSInt64 , INTENT ( IN ) :: AH , AL tSInt64 , INTENT ( IN ) :: SH , SL tSInt64 , INTENT ( IN ) :: X ( 0 : 15 ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: V , Cond tIndex :: I ! FLOW ! initialize P RNG % P = N - 1 ! Force a to be odd RNG % AH = AH RNG % AL = IOR ( AL , 1_kInt64 ) RNG % SH = SH RNG % SL = SL ! check if all Xs are zero or not Cond = IOR ( X ( 0 ), X ( 1 )) DO I = 2 , 15 Cond = IOR ( Cond , X ( I )) END DO IF ( Cond == 0 ) THEN ! If all Xs are zero, we must choose nonzero values. V = SH + GOLDEN_RATIO_64 ! At least 15 of the 16 values generated here will be nonzero. RNG % X ( 0 ) = Mix_Stafford_13 ( V ) DO I = 1 , 15 V = V + GOLDEN_RATIO_64 RNG % X ( I ) = Mix_Stafford_13 ( V ) END DO ELSE RNG % X ( 0 : 15 ) = X ( 0 : 15 ) END IF RETURN END SUBROUTINE L128X1024RNG_SetParameters !****************************************************************************** FUNCTION L128X1024RNG_Split ( RNG , Brine ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize and return a new 'L128X1024RNG' object that shares no mutable !  state with this object. However, with very high probability, the set of !  values collectively generated by the two objects has the same statistical !  properties as if the same quantity of values were generated by a single !  thread using a single object.  Either or both of the two objects may be !  further split using this routine, and the same expected statistical !  properties apply to the entire set of generators constructed by such !  recursive splitting. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L128X1024RNG' object CLASS ( L128X1024RNG ), INTENT ( INOUT ) :: RNG !> a long value, of which the low 63 bits provide a unique id among calls !  to this routine for constructing a single series of Generator objects. tSInt64 , OPTIONAL , INTENT ( IN ) :: Brine !% new 'L128X1024RNG' object TYPE ( L128X1024RNG ) :: NewRNG !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Salt , AH , SH , SL , X ( 0 : 15 ) tIndex :: I ! FLOW ! check optional input IF ( PRESENT ( Brine )) THEN Salt = Brine ELSE Salt = RNG % NextLong () END IF ! copy initial seeds for re-initialization CALL RNG % CopySeed ( NewRNG ) ! set parameters by picking a new object at random but use the 63 bits ! of the salt for (the low half of) 'A' AH = RNG % NextLong () SH = RNG % NextLong () SL = RNG % NextLong () DO I = 0 , 15 X ( I ) = RNG % NextLong () END DO CALL L128X1024RNG_SetParameters ( NewRNG , AH , SHIFTL ( Salt , 1 ), SH , SL , X ) RETURN END FUNCTION L128X1024RNG_Split !****************************************************************************** END MODULE MClass_L128X1024RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l128x1024rng.f90.html"},{"title":"MClass_Sfc64RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Sfc64RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Sfc64RNG* type and its related routines. !   The *Sfc64RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *Sfc64RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the Small, Fast, Counting !   (SFC) 64-bit generator by Chris Doty-Humphrey.  It has a state size of !   256-bits. The period is a minimum of 2<sup>64</sup> and an average of !   approximately 2<sup>255</sup>. <br> !   It is important to note that the *Sfc64* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://pracrand.sourceforge.net/\">PractRand Test Suite</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/DotyHumphreySmallFastCounting64.html\"> !       Apache Commons RNG: Class DotyHumphreySmallFastCounting64</a> !** PURPOSE OF THIS MODULE: ! This module contains a random number generator class based on the Small, Fast, ! Counting (SFC) 32-bit generator of Chris Doty-Humphrey. ! The state size is 128-bits.  The period is a minimum of 2**32 and an ! average of approximately 2**127. !** REFERENCES: ! [1] PractRand test suite.  http://pracrand.sourceforge.net !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Sfc64RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *Sfc64RNG* type is a *Long* PRNG type based on the Small, !  Fast, Counting (SFC) 64-bit generator by Chris Doty-Humphrey. TYPE , EXTENDS ( LongRNG ) :: Sfc64RNG PRIVATE ! the working states tSInt64 :: A , B , C ! the counter tSInt64 :: Counter CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Sfc64RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => Sfc64RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Sfc64RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Sfc64RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Sfc64RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Sfc64RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Sfc64RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc64RNG ), INTENT ( INOUT ) :: RNG ! 'Sfc64RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I tSInt64 :: Seed0 ( 3 ), RandNum ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) RNG % A = Seed0 ( 1 ) RNG % B = Seed0 ( 2 ) RNG % C = Seed0 ( 3 ) RNG % Counter = 1_kInt64 ! warming up before using the output DO I = 1 , 18 RandNum = RNG % NextLong () END DO RETURN END SUBROUTINE Sfc64RNG_BaseInit !****************************************************************************** FUNCTION Sfc64RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc64RNG ), INTENT ( INOUT ) :: RNG !! 'Sfc64RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = RNG % A + RNG % B + RNG % Counter RNG % Counter = RNG % Counter + 1 RNG % A = IEOR ( RNG % B , SHIFTR ( RNG % B , 11 )) RNG % B = RNG % C + SHIFTL ( RNG % C , 3 ) RNG % C = RotateLeft ( RNG % C , 24 ) + RandNum RETURN END FUNCTION Sfc64RNG_NextLong !****************************************************************************** FUNCTION Sfc64RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc64RNG ), INTENT ( IN ) :: RNG !! 'Sfc64RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Sfc64RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Sfc64RNG_GetName !****************************************************************************** FUNCTION Sfc64RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc64RNG ), INTENT ( IN ) :: RNG !! 'Sfc64RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 3 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Sfc64RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Sfc64RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_sfc64rng.f90.html"},{"title":"MClass_Mrg32k3aRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Mrg32k3aRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Mrg32k3aRNG* type and its related routines. !   The *Mrg32k3aRNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Mrg32k3aRNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the 32-bit *MRG* (combined !   multiple recursive generator) algorithm by Pierre L'Ecuyer. <br> !   The *Mrg32k3a* PRNG has six 32-bit states stored in 64-bit integers. !   Its period length is approximatively 2<sup>191</sup>. <br> !   It is important to note that the *Mrg32k3a* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  Also, it should be noted that the implementation of !   this PRNG is based on references #2-3. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-01039-X/\"> !       L'Ecuyer, P. 1999. Good Parameters and Implementations for Combined Multiple !       Recursive Random Number Generators. Operations Research 47(1):159-164. </a> <br> !   [2] <a href=\"http://umontreal-simul.github.io/ssj/docs/master/classumontreal_1_1ssj_1_1rng_1_1MRG32k3aL.html\"> !       Package umontreal.ssj.rng: MRG32k3aL Class Reference. </a> <br> !   [3] <a href=\"http://simul.iro.umontreal.ca/rng/MRG32k3a.c\"> !       32-bits Random number generator U(0,1): MRG32k3a - a C source code. </a> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Mrg32k3aRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! name of module tCharStar , PARAMETER :: ModName = 'MClass_Mrg32k3aRNG' tSInt64 , PARAMETER :: M1 = 4294967087_kInt64 tSInt64 , PARAMETER :: M2 = 4294944443_kInt64 tSInt64 , PARAMETER :: A12 = 1403580_kInt64 tSInt64 , PARAMETER :: A13N = 810728_kInt64 tSInt64 , PARAMETER :: A21 = 527612_kInt64 tSInt64 , PARAMETER :: A23N = 1370589_kInt64 tRealDP , PARAMETER :: Norm = 2.328306549295727688E-10_kDouble tSInt64 , PARAMETER :: DefaultSeed = 12345_kInt64 !** DERIVED TYPE DEFINITIONS !> The *Mrg32k3aRNG* type is an *Integer* PRNG type based on 32-bit !  combined multiple recursive generator (MRG) algorithm by Pierre L'Ecuyer. TYPE , EXTENDS ( IntegerRNG ) :: Mrg32k3aRNG PRIVATE ! states tSInt64 :: State ( 0 : 5 ) = DefaultSeed CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: NextValue => Mrg32k3aRNG_NextValue ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mrg32k3aRNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Mrg32k3aRNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mrg32k3aRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mrg32k3aRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Overridden Procedures                     ----- ! --------------------------------------------------------------------- !> *NextDoubleImpl* is an overridden procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Mrg32k3aRNG_NextDouble !> *Default_NextIntegerLimits* is an overridden procedure. <br> !  Use the *NextInteger* method in place of the *Default_NextIntegerLimits* !  method to generate a 32-bit integer number between the given bound. PROCEDURE :: Default_NextIntegerLimits => Mrg32k3aRNG_NextIntegerLimits ! --------------------------------------------------------------------- END TYPE Mrg32k3aRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Mrg32k3aRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Mrg32k3aRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg32k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg32k3aRNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: LongSeed ( 6 ) tIndex :: I tLogical :: AreAllZero ! FLOW ! set LongSeed to default seed LongSeed = DefaultSeed ! set LongSeed to specified seeds DO I = 1 , SIZE ( Seed ) LongSeed ( I ) = IEOR ( LongSeed ( I ), ToUnsignedLong ( Seed ( I ))) IF ( I == 6 ) EXIT END DO ! check whether LongSeed are all zero or not AreAllZero = TrueVal DO I = 1 , 6 IF ( LongSeed ( I ) /= 0_kInt64 ) THEN AreAllZero = FalseVal EXIT END IF END DO ! set state for valid elements of LongSeed IF (. NOT . AreAllZero ) THEN DO I = 1 , 3 IF ( LongSeed ( I ) < M1 ) RNG % State ( I - 1 ) = LongSeed ( I ) END DO DO I = 4 , 6 IF ( LongSeed ( I ) < M2 ) RNG % State ( I - 1 ) = LongSeed ( I ) END DO END IF RETURN END SUBROUTINE Mrg32k3aRNG_BaseInit !****************************************************************************** FUNCTION Mrg32k3aRNG_NextValue ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value with 32-bit accuracy. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg32k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg32k3aRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: P1 , P2 ! FLOW ! Component 1 P1 = MOD (( A12 * RNG % State ( 1 ) - A13N * RNG % State ( 0 )), M1 ) IF ( P1 < 0_kInt64 ) P1 = P1 + M1 RNG % State ( 0 ) = RNG % State ( 1 ) RNG % State ( 1 ) = RNG % State ( 2 ) RNG % State ( 2 ) = P1 ! Component 2 P2 = MOD (( A21 * RNG % State ( 5 ) - A23N * RNG % State ( 3 )), M2 ) IF ( P2 < 0_kInt64 ) P2 = P2 + M2 RNG % State ( 3 ) = RNG % State ( 4 ) RNG % State ( 4 ) = RNG % State ( 5 ) RNG % State ( 5 ) = P2 ! Combination IF ( P1 > P2 ) THEN RandNum = P1 - P2 ELSE RandNum = P1 - P2 + M1 END IF RETURN END FUNCTION Mrg32k3aRNG_NextValue !****************************************************************************** FUNCTION Mrg32k3aRNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg32k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg32k3aRNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt64 , PARAMETER :: MaskL = ToInt64 ( Z '00000000FFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = ToInt32 ( IAND ( RNG % NextValue (), MaskL )) RETURN END FUNCTION Mrg32k3aRNG_NextInteger !****************************************************************************** FUNCTION Mrg32k3aRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg32k3aRNG ), INTENT ( IN ) :: RNG !! 'Mrg32k3aRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Mrg32k3aRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mrg32k3aRNG_GetName !****************************************************************************** FUNCTION Mrg32k3aRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg32k3aRNG ), INTENT ( IN ) :: RNG !! 'Mrg32k3aRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 6 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mrg32k3aRNG_GetSeedSize !****************************************************************************** FUNCTION Mrg32k3aRNG_NextDouble ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random floating-point value.  This routine !  overrides the default implementation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg32k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg32k3aRNG' object tRealDP :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tRealDP , PARAMETER :: InvTwo24 = 5.9604644775390625E-8_kDouble ! 2**(-24) tRealDP , PARAMETER :: Epsilon = 5.5511151231257827E-17_kDouble ! 2**(-54) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tRealDP :: U ( 2 ) ! FLOW U ( 1 ) = RNG % NextValue () * Norm U ( 2 ) = RNG % NextValue () * Norm RandNum = MOD (( U ( 1 ) + U ( 2 ) * InvTwo24 ), 1.0_kDouble ) + Epsilon RETURN END FUNCTION Mrg32k3aRNG_NextDouble !****************************************************************************** FUNCTION Mrg32k3aRNG_NextIntegerLimits ( RNG , Bound1 , Bound2 ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To generate a random 32-bit-integer value in the specified range. !  If *Bound2* is not specified, the value is in the range between !  0 and *Bound1*.  Otherwise, the value is in the range between !  *Bound1* and *Bound2*. <br> !  It should be noted that both *Bound1* and *Bound2* arguments can !  have either a positive or a negative value.  The returned value !  is always in between the lower limit (inclusive) and the upper !  limit (exclusive). <br> !  This routine overrides the default implementation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mrg32k3aRNG ), INTENT ( INOUT ) :: RNG !! 'Mrg32k3aRNG' object tSInt32 , INTENT ( IN ) :: Bound1 !! a required limit tSInt32 , OPTIONAL , INTENT ( IN ) :: Bound2 !! an optional limit tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Lower , Diff ! FLOW ! check specified input and set Diff and Lower values IF ( PRESENT ( Bound2 )) THEN Diff = ABS ( Bound1 - Bound2 ) Lower = MIN ( Bound1 , Bound2 ) ELSE Diff = ABS ( Bound1 ) Lower = MIN ( Bound1 , 0_kInt32 ) END IF ! return quickly if Diff is zero IF ( Diff == 0_kInt32 ) THEN RandNum = Bound1 RETURN END IF ! This works even for an interval [0, 2**31 - 1]. It would not with ! ToInt32(RNG%NextDouble*(Upper - Lower + 1)) + Lower RandNum = ToInt32 ( RNG % NextDouble () * ( Diff + 1.0_kDouble )) + Lower RETURN END FUNCTION Mrg32k3aRNG_NextIntegerLimits !****************************************************************************** END MODULE MClass_Mrg32k3aRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_mrg32k3arng.f90.html"},{"title":"MClass_L128X256RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L128X256RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L128X256RNG* type and its related routines. !   The *L128X256RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L128X256RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L128X256* algorithm.  The !   *L128X256* algorithm is a specific member of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L128X256RNG* type employs a 128-bit LCG, a 256-bit XBG and a mixing function !   where its memory footprint is 512 bits and its period is roughly 2<sup>384</sup>. <br> !   In addition to common operations of a PRNG, the *L128X256RNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform.  <br> !   It is important to note that the *L128X256* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : OPERATOR (. ULT .), U128_Multiply_High => UMul128_Upper64 USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L128X256RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *L128X256RNG* type is a *Long* PRNG type based on the *L128X256* !  algorithms, which are specific members of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L128X256RNG PRIVATE ! The parameters that are used as additive constants for the LCG.  AL must be odd. tSInt64 :: AH , AL ! The per-instance state: SH and SL for the LCG, and X0, X1, X2 and X3 for the XBG. ! At least one of the four fields Xs must be nonzero. tSInt64 :: SH , SL , X0 , X1 , X2 , X3 CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L128X256RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L128X256RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L128X256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L128X256RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L128X256RNG_Split ! --------------------------------------------------------------------- END TYPE L128X256RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L128X256RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L128X256RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X256RNG ), INTENT ( INOUT ) :: RNG !! 'L128X256RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: InitSeed1 , InitSeed2 , XSeed1 , XSeed2 , XSeed3 ! FLOW ! set initial seed InitSeed1 = IEOR ( Seed ( 1 ), SILVER_RATIO_64 ) InitSeed2 = InitSeed1 + GOLDEN_RATIO_64 XSeed1 = InitSeed2 + GOLDEN_RATIO_64 XSeed2 = XSeed1 + GOLDEN_RATIO_64 XSeed3 = XSeed2 + GOLDEN_RATIO_64 ! set parameters as follows: ! The seed is hashed by Mix_Murmur to produce the 'A' parameter. ! The seed is hashed by Mix_Stafford_13 to produce the initial 'X0', ! which will then be used to produce the first generated value. ! Then 'X1' is filled in as if by a SplitMix PRNG with GOLDEN_RATIO_64 ! as the gamma value and Mix_Stafford_13 as the mixer. CALL L128X256RNG_SetParameters ( RNG , Mix_Murmur ( InitSeed1 ), Mix_Murmur ( InitSeed2 ), & 0_kInt64 , 1_kInt64 , Mix_Stafford_13 ( InitSeed2 ), & Mix_Stafford_13 ( XSeed1 ), Mix_Stafford_13 ( XSeed2 ), & Mix_Stafford_13 ( XSeed3 )) RETURN END SUBROUTINE L128X256RNG_BaseInit !****************************************************************************** FUNCTION L128X256RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X256RNG ), INTENT ( INOUT ) :: RNG !! 'L128X256RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Low half of multiplier used in the LCG portion of the algorithm; ! the overall multiplier is (2**64 + ML). ! Chosen based on research by Sebastiano Vigna and Guy Steele (2019). ! The spectral scores for dimensions 2 through 8 for the multiplier 0x1d605bbb58c8abbfdLL ! are [0.991889, 0.907938, 0.830964, 0.837980, 0.780378, 0.797464, 0.761493]. tSInt64 , PARAMETER :: ML = ToInt64 ( Z 'D605BBB58C8ABBFD' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: U , Q0 , Q1 , Q2 , Q3 , T ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % SH + RNG % X0 ) ! Update the LCG subgenerator ! The LCG is, in effect, s = ((1LL << 64) + ML) * s + a, if only we had 128-bit arithmetic. U = ML * RNG % SL RNG % SH = ( ML * RNG % SH ) + U128_Multiply_High ( ML , RNG % SL ) + RNG % SL + RNG % AH RNG % SL = U + RNG % AL ! Handle the carry propagation from low half to high half. IF ( RNG % SL . ULT . U ) RNG % SH = RNG % SH + 1_kInt64 ! Update the XBG subgenerator Q0 = RNG % X0 Q1 = RNG % X1 Q2 = RNG % X2 Q3 = RNG % X3 ! xoshiro256 1.0 T = SHIFTL ( Q1 , 17 ) Q2 = IEOR ( Q2 , Q0 ) Q3 = IEOR ( Q3 , Q1 ) Q1 = IEOR ( Q1 , Q2 ) Q0 = IEOR ( Q0 , Q3 ) Q2 = IEOR ( Q2 , T ) Q3 = RotateLeft ( Q3 , 45 ) RNG % X0 = Q0 RNG % X1 = Q1 RNG % X2 = Q2 RNG % X3 = Q3 RETURN END FUNCTION L128X256RNG_NextLong !****************************************************************************** FUNCTION L128X256RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X256RNG ), INTENT ( IN ) :: RNG !! 'L128X256RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'L128X256RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L128X256RNG_GetName !****************************************************************************** FUNCTION L128X256RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L128X256RNG ), INTENT ( IN ) :: RNG !! 'L128X256RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L128X256RNG_GetSeedSize !****************************************************************************** SUBROUTINE L128X256RNG_SetParameters ( RNG , AH , AL , SH , SL , X0 , X1 , X2 , X3 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To set parameters of the object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L128X256RNG ), INTENT ( INOUT ) :: RNG tSInt64 , INTENT ( IN ) :: AH , AL tSInt64 , INTENT ( IN ) :: SH , SL tSInt64 , INTENT ( IN ) :: X0 , X1 tSInt64 , INTENT ( IN ) :: X2 , X3 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: V ! FLOW ! Force a to be odd RNG % AH = AH RNG % AL = IOR ( AL , 1_kInt64 ) RNG % SH = SH RNG % SL = SL ! check if all Xs are zero or not IF ( IOR ( IOR ( IOR ( X0 , X1 ), X2 ), X3 ) == 0 ) THEN ! If all Xs are zero, we must choose nonzero values. V = SH + GOLDEN_RATIO_64 ! At least three of the four values generated here will be nonzero. RNG % X0 = Mix_Stafford_13 ( V ) V = V + GOLDEN_RATIO_64 RNG % X1 = Mix_Stafford_13 ( V ) V = V + GOLDEN_RATIO_64 RNG % X2 = Mix_Stafford_13 ( V ) RNG % X3 = Mix_Stafford_13 ( V + GOLDEN_RATIO_64 ) ELSE RNG % X0 = X0 RNG % X1 = X1 RNG % X2 = X2 RNG % X3 = X3 END IF RETURN END SUBROUTINE L128X256RNG_SetParameters !****************************************************************************** FUNCTION L128X256RNG_Split ( RNG , Brine ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize and return a new 'L128X256RNG' object that shares no mutable !  state with this object. However, with very high probability, the set of !  values collectively generated by the two objects has the same statistical !  properties as if the same quantity of values were generated by a single !  thread using a single object.  Either or both of the two objects may be !  further split using this routine, and the same expected statistical !  properties apply to the entire set of generators constructed by such !  recursive splitting. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L128X256RNG' object CLASS ( L128X256RNG ), INTENT ( INOUT ) :: RNG !> a long value, of which the low 63 bits provide a unique id among calls !  to this routine for constructing a single series of Generator objects. tSInt64 , OPTIONAL , INTENT ( IN ) :: Brine !% new 'L128X256RNG' object TYPE ( L128X256RNG ) :: NewRNG !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Salt ! FLOW ! check optional input IF ( PRESENT ( Brine )) THEN Salt = Brine ELSE Salt = RNG % NextLong () END IF ! copy initial seeds for re-initialization CALL RNG % CopySeed ( NewRNG ) ! set parameters by picking a new object at random but use the 63 bits ! of the salt for (the low half of) 'A' CALL L128X256RNG_SetParameters ( NewRNG , RNG % NextLong (), SHIFTL ( Salt , 1 ), RNG % NextLong (), & RNG % NextLong (), RNG % NextLong (), RNG % NextLong (), & RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION L128X256RNG_Split !****************************************************************************** END MODULE MClass_L128X256RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l128x256rng.f90.html"},{"title":"MClass_L64X128RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L64X128RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L64X128RNG* type and its related routines. !   The *L64X128RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L64X128RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L64X128* algorithms. !   The *L64X128* algorithms are specific members of the LXM family of !   algorithms for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L64X128RNG* type can represent two PRNG classes: <br> !   - the L64X128Mix RNG, or <br> !   - the L64X128StarStar RNG. <br> !   Both PRNG classes employ a 64-bit LCG, a 128-bit XBG and a mixing function !   where its memory footprint is 256 bits and its period is roughly 2<sup>192</sup>. <br> !   By default, the *L64X128Mix* RNG is employed.  However, the *L64X128StarStar* !   PRNG can be utilized by specifying an algorithm flag to true when initializing !   the generator. <br> !   In addition to common operations of a PRNG, the *L64X128RNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform.  <br> !   It is important to note that the *L64X128* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences. <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L64X128RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *L64X128RNG* type is a *Long* PRNG type based on the *L64X128* !  algorithms, which are specific members of the LXM family of algorithms !  for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L64X128RNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0 and X1 for the XBG. ! At least one of X0 and X1 must be nonzero. tSInt64 :: S , X0 , X1 ! algorithm flag tLogical :: UseStarStar = FalseVal CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => L64X128RNG_InitWithFlag ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64X128RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64X128RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64X128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64X128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use L64X128 (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use L64X128 (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use L64X128StarStar algorithm <br> !   --->    CALL RNG%Initialize(.TRUE.) <br> !   ! initialize with seed(s); use L64X128StarStar algorithm <br> !   --->    CALL RNG%Initialize(.TRUE., Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64X128RNG_Split ! --------------------------------------------------------------------- END TYPE L64X128RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L64X128RNG_InitWithFlag ( RNG , Seed , UseStarStar ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L64X128RNG' object CLASS ( L64X128RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - true, use L64X128StarStar algorithm. <br> ! - false, use L64X128 algorithm. tLogical , INTENT ( IN ) :: UseStarStar !% optional 64-bit integer seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set algorithm flag RNG % UseStarStar = UseStarStar IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE L64X128RNG_InitWithFlag !****************************************************************************** SUBROUTINE L64X128RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L64X128RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X128RNG ), INTENT ( INOUT ) :: RNG !! 'L64X128RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: InitSeed ! FLOW ! set initial seed InitSeed = IEOR ( Seed ( 1 ), SILVER_RATIO_64 ) ! set parameters as follows: ! The seed is hashed by Mix_Murmur to produce the 'A' parameter. ! The seed is hashed by Mix_Stafford_13 to produce the initial 'X0', ! which will then be used to produce the first generated value. ! Then 'X1' is filled in as if by a SplitMix PRNG with GOLDEN_RATIO_64 ! as the gamma value and Mix_Stafford_13 as the mixer. CALL L64X128RNG_SetParameters ( RNG , Mix_Murmur ( InitSeed ), 1_kInt64 , Mix_Stafford_13 ( InitSeed ), & Mix_Stafford_13 ( InitSeed + GOLDEN_RATIO_64 )) RETURN END SUBROUTINE L64X128RNG_BaseInit !****************************************************************************** FUNCTION L64X128RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X128RNG ), INTENT ( INOUT ) :: RNG !! 'L64X128RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Multiplier used in the LCG portion of the algorithm. ! Chosen based on research by Sebastiano Vigna and Guy Steele (2019). ! The spectral scores for dimensions 2 through 8 for the multiplier 0xd1342543de82ef95L ! are [0.958602, 0.937479, 0.870757, 0.822326, 0.820405, 0.813065, 0.760215]. tSInt64 , PARAMETER :: M = ToInt64 ( Z 'D1342543DE82EF95' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Q0 , Q1 ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). IF ( RNG % UseStarStar ) THEN ! use 'L64X128StarStar' algorithm RandNum = RotateLeft (( RNG % S + RNG % X0 ) * 5_kInt64 , 7 ) * 9_kInt64 ! \"starstar\" scrambler ELSE ! use 'L64X128' algorithm RandNum = Mix_Lea ( RNG % S + RNG % X0 ) END IF ! Update the LCG subgenerator RNG % S = M * RNG % S + RNG % A ! Update the XBG subgenerator Q0 = RNG % X0 Q1 = RNG % X1 ! xoroshiro128v1_0 Q1 = IEOR ( Q1 , Q0 ) Q0 = RotateLeft ( Q0 , 24 ) Q0 = IEOR ( IEOR ( Q0 , Q1 ), SHIFTL ( Q1 , 16 )) Q1 = RotateLeft ( Q1 , 37 ) RNG % X0 = Q0 RNG % X1 = Q1 RETURN END FUNCTION L64X128RNG_NextLong !****************************************************************************** FUNCTION L64X128RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X128RNG ), INTENT ( IN ) :: RNG !! 'L64X128RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( RNG % UseStarStar ) THEN Name = 'L64X128StarStarRNG' ELSE Name = 'L64X128RNG' END IF ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L64X128RNG_GetName !****************************************************************************** FUNCTION L64X128RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64X128RNG ), INTENT ( IN ) :: RNG !! 'L64X128RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION L64X128RNG_GetSeedSize !****************************************************************************** SUBROUTINE L64X128RNG_SetParameters ( RNG , A , S , X0 , X1 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To set parameters of the object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L64X128RNG ), INTENT ( INOUT ) :: RNG tSInt64 , INTENT ( IN ) :: A tSInt64 , INTENT ( IN ) :: S tSInt64 , INTENT ( IN ) :: X0 tSInt64 , INTENT ( IN ) :: X1 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: V ! FLOW ! Force a to be odd RNG % A = IOR ( A , 1_kInt64 ) RNG % S = S ! check if X0 and X1 are both zero or not IF ( IOR ( X0 , X1 ) == 0 ) THEN ! If X0 and X1 are both zero, we must choose nonzero values. V = S + GOLDEN_RATIO_64 ! At least one of the two values generated here will be nonzero. RNG % X0 = Mix_Stafford_13 ( V ) RNG % X1 = Mix_Stafford_13 ( V + GOLDEN_RATIO_64 ) ELSE RNG % X0 = X0 RNG % X1 = X1 END IF RETURN END SUBROUTINE L64X128RNG_SetParameters !****************************************************************************** FUNCTION L64X128RNG_Split ( RNG , Brine ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize and return a new 'L64X128RNG' object that shares no mutable !  state with this object. However, with very high probability, the set of !  values collectively generated by the two objects has the same statistical !  properties as if the same quantity of values were generated by a single !  thread using a single object.  Either or both of the two objects may be !  further split using this routine, and the same expected statistical !  properties apply to the entire set of generators constructed by such !  recursive splitting. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L64X128RNG' object CLASS ( L64X128RNG ), INTENT ( INOUT ) :: RNG !> a long value, of which the low 63 bits provide a unique id among calls !  to this routine for constructing a single series of Generator objects. tSInt64 , OPTIONAL , INTENT ( IN ) :: Brine !% new 'L64X128RNG' object TYPE ( L64X128RNG ) :: NewRNG !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Salt ! FLOW ! check optional input IF ( PRESENT ( Brine )) THEN Salt = Brine ELSE Salt = RNG % NextLong () END IF ! copy initial seeds for re-initialization CALL RNG % CopySeed ( NewRNG ) ! set parameters by picking a new object at random but use the 63 bits ! of the salt for 'A' CALL L64X128RNG_SetParameters ( NewRNG , SHIFTL ( Salt , 1 ), RNG % NextLong (), & RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION L64X128RNG_Split !****************************************************************************** END MODULE MClass_L64X128RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l64x128rng.f90.html"},{"title":"MClass_XoRoShiRo128RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_XoRoShiRo128RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *XoRoShiRo128RNG* type and its related routines. !   The *XoRoShiRo128RNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *XoRoShiRo128RNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on algorithms from the Xor-Shift-Rotate !   family of generators by Sebastiano Vigna. <br> !   The *XoRoShiRo128RNG* type can represent three PRNG classes: <br> !   - the XoRoShiRo128StarStar RNG, which is a fast all-purpose 64-bit generator, <br> !   - the XoRoShiRo128Plus  RNG, which is a fast 64-bit generator suitable for !     real number generation, or <br> !   - the XoRoShiRo128PlusPlus RNG, which is a fast all-purpose 64-bit generator. <br> !   By default, the XoRoShiRo128StarStar RNG is employed.  However, other XoRoShiRo128 !   PRNG variants can be utilized by specifying an algorithm flag (between 1 to 3) !   when initializing the generator.  The *XoRoShiRo128RNG* type has state size of !   128 bits and period of 2<sup>128</sup>-1. <br> !   In addition to common operations of a PRNG, the *XoRoShiRo128RNG* type provides !   the *Jump* and *LongJump* methods where a large (or very large) number of steps !   of the output sequence can be advanced in a single operation.  Each method creates !   (and also returns) a copy of the input PRNG and then advances the state of the !   specified PRNG.  The PRNG and its copy produce non-overlapping output for the !   length of the jump intendedly for use in parallel computations. <br> !   It is important to note that the *XoRoShiRo128* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://prng.di.unimi.it/\"> !       Xoshiro/Xoroshiro Generators and the PRNG shootout.</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoRoShiRo128StarStar.html\"> !       Apache Commons RNG: Class XoRoShiRo128StarStar</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoRoShiRo128Plus.html\"> !       Apache Commons RNG: Class XoRoShiRo128Plus</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/XoRoShiRo128PlusPlus.html\"> !       Apache Commons RNG: Class XoRoShiRo128PlusPlus</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: XoRoShiRo128RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! Size of the state vector tSInt32 , PARAMETER :: SEED_SIZE = 2 ! The coefficients for the jump function tSInt64 , PARAMETER :: JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z 'DF900294D8F554A5' ), ToInt64 ( Z '170865DF4B3201FC' )] ! The coefficients for the long jump function tSInt64 , PARAMETER :: LONG_JUMP_COEFFICIENTS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z 'D2A98B26625EEE7B' ), ToInt64 ( Z 'DDDF9B1090AA7AC1' )] ! The coefficients for the jump function for XoRoShiRo128PlusPlus tSInt64 , PARAMETER :: JUMP_COEF_PLUSPLUS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '2BD7A6A6E99C2DDC' ), ToInt64 ( Z '0992CCAF6A6FCA05' )] ! The coefficients for the long jump function for XoRoShiRo128PlusPlus tSInt64 , PARAMETER :: LONG_JUMP_COEF_PLUSPLUS ( 0 : SEED_SIZE - 1 ) = [ & ToInt64 ( Z '360FD5F2CF8D5D99' ), ToInt64 ( Z '9C6E6877736C46E3' )] ! Parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: XoRoShiRo128StarStar = 1 !! flag for XoRoShiRo128StarStar PRNG tSInt32 , PARAMETER , PUBLIC :: XoRoShiRo128Plus = 2 !! flag for XoRoShiRo128Plus PRNG tSInt32 , PARAMETER , PUBLIC :: XoRoShiRo128PlusPlus = 3 !! flag for XoRoShiRo128PlusPlus PRNG !** DERIVED TYPE DEFINITIONS !> The *XoRoShiRo128RNG* type is a *Long* PRNG type based on algorithms from !  the Xor-Shift-Rotate family of generators by Sebastiano Vigna. TYPE , EXTENDS ( LongRNG ) :: XoRoShiRo128RNG PRIVATE ! states tSInt64 :: State0 , State1 ! algorithm flag tSInt32 :: XoRoShiRoAlgo = XoRoShiRo128StarStar ! function to return the next integer output PROCEDURE ( Next ), POINTER :: NextOutput => NULL () PROCEDURE ( Update ), POINTER :: UpdateState => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => XoRoShiRo128RNG_InitWithFlag PROCEDURE , PRIVATE :: PerformJump => XoRoShiRo128RNG_Perform_Jump PROCEDURE , PRIVATE :: MakeACopy => XoRoShiRo128RNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => XoRoShiRo128RNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => XoRoShiRo128RNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => XoRoShiRo128RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => XoRoShiRo128RNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use XoRoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use XoRoShiRo128StarStar (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use XoRoShiRo128Plus algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo128Plus) <br> !   ! initialize with seed(s); use XoRoShiRo128PlusPlus algorithm <br> !   --->    CALL RNG%Initialize(XoRoShiRo128PlusPlus, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => XoRoShiRo128RNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => XoRoShiRo128RNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: XoRoShiRo128RNG_Finalization ! --------------------------------------------------------------------- END TYPE XoRoShiRo128RNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG , S0 , S1 ) RESULT ( Output ) IMPORT CLASS ( XoRoShiRo128RNG ), INTENT ( IN ) :: RNG tSInt64 , INTENT ( IN ) :: S0 , S1 tSInt64 :: Output END FUNCTION Next SUBROUTINE Update ( RNG , S0 , S1 ) IMPORT CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG tSInt64 , INTENT ( IN ) :: S0 , S1 END SUBROUTINE Update END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE XoRoShiRo128RNG_InitWithFlag ( RNG , XoRoShiRoAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'XoRoShiRo128RNG' object CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !> algorithm flag <br> ! - 1, use XoRoShiRo128StarStar algorithm. <br> ! - 2, use XoRoShiRo128Plus algorithm. <br> ! - 3, use XoRoShiRo128PlusPlus algorithm. tSInt32 , INTENT ( IN ) :: XoRoShiRoAlgo !% optional 32-bit integer seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( XoRoShiRoAlgo , 1 , 3 )) THEN RNG % XoRoShiRoAlgo = XoRoShiRoAlgo ELSE RNG % XoRoShiRoAlgo = XoRoShiRo128StarStar END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE XoRoShiRo128RNG_InitWithFlag !****************************************************************************** SUBROUTINE XoRoShiRo128RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Seed0 ( 0 : SEED_SIZE - 1 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! copy seeds to states RNG % State0 = Seed0 ( 0 ) RNG % State1 = Seed0 ( 1 ) ! set pointer to next output function SELECT CASE ( RNG % XoRoShiRoAlgo ) CASE ( XoRoShiRo128StarStar ) RNG % NextOutput => XoRoShiRo128StarStar_Next RNG % UpdateState => XoRoShiRo128_Update CASE ( XoRoShiRo128Plus ) RNG % NextOutput => XoRoShiRo128Plus_Next RNG % UpdateState => XoRoShiRo128_Update CASE ( XoRoShiRo128PlusPlus ) RNG % NextOutput => XoRoShiRo128PlusPlus_Next RNG % UpdateState => XoRoShiRo128PlusPlus_Update END SELECT RETURN END SUBROUTINE XoRoShiRo128RNG_BaseInit !****************************************************************************** FUNCTION XoRoShiRo128RNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S1 ! FLOW ! get current states S0 = RNG % State0 S1 = RNG % State1 ! update states CALL RNG % UpdateState ( S0 , S1 ) ! get next integer output RandNum = RNG % NextOutput ( S0 , S1 ) RETURN END FUNCTION XoRoShiRo128RNG_NextLong !****************************************************************************** FUNCTION XoRoShiRo128RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo128RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % XoRoShiRoAlgo ) CASE ( XoRoShiRo128StarStar ) Name = 'XoRoShiRo128StarStarRNG' CASE ( XoRoShiRo128Plus ) Name = 'XoRoShiRo128PlusRNG' CASE ( XoRoShiRo128PlusPlus ) Name = 'XoRoShiRo128PlusPlusRNG' END SELECT RETURN END FUNCTION XoRoShiRo128RNG_GetName !****************************************************************************** FUNCTION XoRoShiRo128RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo128RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = SEED_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo128RNG_GetSeedSize !****************************************************************************** FUNCTION XoRoShiRo128StarStar_Next ( RNG , S0 , S1 ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo128StarStar generator, which is a fast all-purpose !  64-bit generator with memory footprint of 128 bits and the period !  of 2**128-1. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 , INTENT ( IN ) :: S0 , S1 tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( S0 * 5 , 7 ) * 9 ASSOCIATE ( Dummy => RNG , Dummy2 => S1 ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo128StarStar_Next !****************************************************************************** FUNCTION XoRoShiRo128Plus_Next ( RNG , S0 , S1 ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo128Plus generator, which is a fast 64-bit generator !  suitable for floating-point-number generation. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 , INTENT ( IN ) :: S0 , S1 tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = S0 + S1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo128Plus_Next !****************************************************************************** FUNCTION XoRoShiRo128PlusPlus_Next ( RNG , S0 , S1 ) RESULT ( Output ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the next integer output based on the current states of !  the XoRoShiRo128PlusPlus generator, which is a fast all-purpose !  64-bit generator with memory footprint of 128 bits. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( IN ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 , INTENT ( IN ) :: S0 , S1 tSInt64 :: Output !! 64-bit output !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Output = RotateLeft ( S0 + S1 , 17 ) + S0 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION XoRoShiRo128PlusPlus_Next !****************************************************************************** SUBROUTINE XoRoShiRo128_Update ( RNG , S0 , S1 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the XoRoShiRo128Plus and XoRoShiRo128StarStar generators. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 , INTENT ( IN ) :: S0 , S1 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S11 ! FLOW S11 = IEOR ( S1 , S0 ) RNG % State0 = IEOR ( IEOR ( RotateLeft ( S0 , 24 ), S11 ), SHIFTL ( S11 , 16 )) ! a, b RNG % State1 = RotateLeft ( S11 , 37 ) ! c RETURN END SUBROUTINE XoRoShiRo128_Update !****************************************************************************** SUBROUTINE XoRoShiRo128PlusPlus_Update ( RNG , S0 , S1 ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the XoRoShiRo128PlusPlus generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 , INTENT ( IN ) :: S0 , S1 !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S11 ! FLOW S11 = IEOR ( S1 , S0 ) RNG % State0 = IEOR ( IEOR ( RotateLeft ( S0 , 49 ), S11 ), SHIFTL ( S11 , 21 )) ! a, b RNG % State1 = RotateLeft ( S11 , 28 ) ! c RETURN END SUBROUTINE XoRoShiRo128PlusPlus_Update !****************************************************************************** SUBROUTINE XoRoShiRo128RNG_Perform_Jump ( RNG , JCoef ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform the jump to advance the generator state. !  Resets the cached state of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object tSInt64 , INTENT ( IN ) :: JCoef ( 0 :) !! jump coefficients !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S1 , Dummy tSInt32 :: I , B ! FLOW S0 = 0_kInt64 S1 = 0_kInt64 DO I = 0 , SEED_SIZE - 1 DO B = 0 , 63 IF ( IAND ( JCoef ( I ), SHIFTL ( 1_kInt64 , B )) /= 0_kInt64 ) THEN S0 = IEOR ( S0 , RNG % State0 ) S1 = IEOR ( S1 , RNG % State1 ) END IF Dummy = RNG % NextLong () END DO END DO RNG % State0 = S0 RNG % State1 = S1 RETURN END SUBROUTINE XoRoShiRo128RNG_Perform_Jump !****************************************************************************** FUNCTION XoRoShiRo128RNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy all components of the source object to the destination object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: Src !! source object TYPE ( XoRoShiRo128RNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! copy components Dst % State0 = Src % State0 Dst % State1 = Src % State1 Dst % XoRoShiRoAlgo = Src % XoRoShiRoAlgo Dst % NextOutput => Src % NextOutput Dst % UpdateState => Src % UpdateState CALL Src % CopySeed ( Dst ) RETURN END FUNCTION XoRoShiRo128RNG_Copy !****************************************************************************** FUNCTION XoRoShiRo128RNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent !  of a number of sequential calls to a method that updates the state of the !  generator.  The jump size is the equivalent of 2<sup>64</sup> calls to the !  generator's NextLong() method.  It can provide up to 2<sup>64</sup> !  non-overlapping subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object TYPE ( XoRoShiRo128RNG ) :: NewRNG !! new 'XoRoShiRo128RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance IF ( RNG % XoRoShiRoAlgo == XoRoShiRo128PlusPlus ) THEN CALL RNG % PerformJump ( JUMP_COEF_PLUSPLUS ) ELSE CALL RNG % PerformJump ( JUMP_COEFFICIENTS ) END IF RETURN END FUNCTION XoRoShiRo128RNG_Jump !****************************************************************************** FUNCTION XoRoShiRo128RNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The current state will be advanced in a single operation by the equivalent of !  a number of sequential calls to a method that updates the state of the generator. !  The jump size is the equivalent of 2<sup>96</sup> calls to the generator's !  NextLong() method.  It can provide up to 2<sup>32</sup> non-overlapping !  subsequences of length 2<sup>96</sup>; each subsequence can provide up to !  2<sup>32</sup> non-overlapping subsequences of length 2<sup>64</sup> !  using the generator's Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object TYPE ( XoRoShiRo128RNG ) :: NewRNG !! new 'XoRoShiRo128RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! advance states of the current instance IF ( RNG % XoRoShiRoAlgo == XoRoShiRo128PlusPlus ) THEN CALL RNG % PerformJump ( LONG_JUMP_COEF_PLUSPLUS ) ELSE CALL RNG % PerformJump ( LONG_JUMP_COEFFICIENTS ) END IF RETURN END FUNCTION XoRoShiRo128RNG_LongJump !****************************************************************************** SUBROUTINE XoRoShiRo128RNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'XoRoShiRo128RNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( XoRoShiRo128RNG ), INTENT ( INOUT ) :: RNG !! 'XoRoShiRo128RNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NULLIFY ( RNG % NextOutput ) NULLIFY ( RNG % UpdateState ) RETURN END SUBROUTINE XoRoShiRo128RNG_Finalization !****************************************************************************** END MODULE MClass_XoRoShiRo128RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_xoroshiro128rng.f90.html"},{"title":"MClass_Jsf32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Jsf32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Jsf32RNG* type and its related routines. !   The *Jsf32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Jsf32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on Bob Jenkins's small fast !   non-cryptographic (32-bit variant) PRNG.  It has a state size of 128-bits. !   The shortest period is expected to be about 2<sup>94</sup> and it is expected !   that about one seed will run into another seed within 2<sup>64</sup> values. <br> !   It is important to note that the *Jsf32* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://burtleburtle.net/bob/rand/smallprng.html\"> !       A small non-cryptographic PRNG</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/JenkinsSmallFast32.html\"> !       Apache Commons RNG: Class JenkinsSmallFast32</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Jsf32RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *Jsf32RNG* type is an *Integer* PRNG type based on the small !  fast non-cryptographic PRNG by Bob Jenkins. TYPE , EXTENDS ( IntegerRNG ) :: Jsf32RNG PRIVATE ! the working states tSInt32 :: A , B , C , D CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Jsf32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Jsf32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Jsf32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Jsf32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Jsf32RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Jsf32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Jsf32RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf32RNG ), INTENT ( INOUT ) :: RNG !! 'Jsf32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , PARAMETER :: K = ToInt32 ( Z 'F1EA5EED' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I tSInt32 :: RandNum ! FLOW ! set initial seed RNG % B = Seed ( 1 ) RNG % A = K RNG % C = RNG % B RNG % D = RNG % B ! warming up before using the output DO I = 1 , 20 RandNum = RNG % NextInteger () END DO RETURN END SUBROUTINE Jsf32RNG_BaseInit !****************************************************************************** FUNCTION Jsf32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf32RNG ), INTENT ( INOUT ) :: RNG !! 'Jsf32RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: E ! FLOW E = RNG % A - RotateLeft ( RNG % B , 27 ) RNG % A = IEOR ( RNG % B , RotateLeft ( RNG % C , 17 )) RNG % B = RNG % C + RNG % D RNG % C = RNG % D + E RNG % D = E + RNG % A RandNum = RNG % D RETURN END FUNCTION Jsf32RNG_NextInteger !****************************************************************************** FUNCTION Jsf32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf32RNG ), INTENT ( IN ) :: RNG !! 'Jsf32RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Jsf32RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Jsf32RNG_GetName !****************************************************************************** FUNCTION Jsf32RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Jsf32RNG ), INTENT ( IN ) :: RNG !! 'Jsf32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 1 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Jsf32RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Jsf32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_jsf32rng.f90.html"},{"title":"MClass_Mwc256RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Mwc256RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Mwc256RNG* type and its related routines. !   The *Mwc256RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Mwc256RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the *Multiply-With-Carry* !   (MWC) algorithm by George Marsaglia.  Its memory footprint is 8224 bits !   and its period is roughly 2<sup>8222</sup>. !   It is important to note that the *MWC* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://en.wikipedia.org/wiki/Multiply-with-carry_pseudorandom_number_generator\"> !       Multiply-with-carry pseudorandom number generator</a> <br> !   [2] <a href=\"https://crypto.stackexchange.com/questions/10359/what-stops-the-multiply-with-carry-rng-from-being-a-cryptographically-secure-prn\"> !       What stops the Multiply-With-Carry RNG from being a Cryptographically Secure PRNG?</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/MultiplyWithCarry256.html\"> !       Apache Commons RNG: Class MultiplyWithCarry256</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Mwc256RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Length of the state array tIndex , PARAMETER :: Q_SIZE = 256_kIndex ! Multiply tSInt64 , PARAMETER :: A = 809430660_kInt64 !** DERIVED TYPE DEFINITIONS !> The *Mwc256RNG* type is an *Integer* PRNG type based on the *MWC* !  (Multiply-With-Carry) algorithm by George Marsaglia. TYPE , EXTENDS ( IntegerRNG ) :: Mwc256RNG PRIVATE ! the working states tSInt32 :: State ( 0 : Q_SIZE - 1 ) ! current index in \"state\" array tSInt32 :: Index ! carry tSInt32 :: Carry CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mwc256RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Mwc256RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mwc256RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mwc256RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Mwc256RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Mwc256RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Mwc256RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mwc256RNG ), INTENT ( INOUT ) :: RNG !! 'Mwc256RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 0 : Q_SIZE ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! initial state RNG % State ( 0 : Q_SIZE - 1 ) = Seed0 ( 0 : Q_SIZE - 1 ) ! last element of the \"seed\" is the initial \"carry\" ! Marsaglia's recommendation: 0 <= carry < A RNG % Carry = ToInt32 ( MOD ( ABS ( ToInt64 ( Seed0 ( Q_SIZE ))), A )) ! initial index RNG % Index = Q_SIZE RETURN END SUBROUTINE Mwc256RNG_BaseInit !****************************************************************************** FUNCTION Mwc256RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mwc256RNG ), INTENT ( INOUT ) :: RNG !! 'Mwc256RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: tSInt32 , PARAMETER :: MaskB = ToInt32 ( Z '000000FF' ) tSInt64 , PARAMETER :: MaskL = ToInt64 ( Z '00000000FFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: T ! FLOW ! produce an index in the range 0-255 RNG % Index = IAND ( RNG % Index , MaskB ) ! compute next random number T = A * IAND ( ToInt64 ( RNG % State ( RNG % Index )), MaskL ) + RNG % Carry RandNum = ToInt32 ( T ) ! update state, carry and index RNG % Carry = ToInt32 ( SHIFTR ( T , 32 )) RNG % State ( RNG % Index ) = RandNum RNG % Index = RNG % Index + 1 RETURN END FUNCTION Mwc256RNG_NextInteger !****************************************************************************** FUNCTION Mwc256RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mwc256RNG ), INTENT ( IN ) :: RNG !! 'Mwc256RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Mwc256RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mwc256RNG_GetName !****************************************************************************** FUNCTION Mwc256RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mwc256RNG ), INTENT ( IN ) :: RNG !! 'Mwc256RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = Q_SIZE + 1_kIndex ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mwc256RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Mwc256RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_mwc256rng.f90.html"},{"title":"MClass_ChaChaRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_ChaChaRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *ChaChaRNG* type and its related routines. !   The *ChaChaRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type.  <br> !   In particular, the *ChaChaRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *ChaCha* algorithm. !   The *ChaCha* algorithm is a member of the ChaCha family of stream ciphers !   (a variant of the Salsa20 family of stream ciphers) designed by D.J. !   Bernstein.  As a result, the *ChaCha* PRNG is a cryptographic-level PRNG !   as the stream cypher on which it is based. <br> !   It is important to note that the *ChaCha* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://cr.yp.to/chacha.html\">The ChaCha family of stream ciphers</a> <br> !   [2] <a href=\"https://github.com/vnmakarov/mum-hash/blob/master/src/chacha-prng.h\"> !       Pseudo Random Number Generator (PRNG) based on ChaCha stream cipher.</a> !** USE STATEMENTS: USE MBase_Common USE MBase_UIntUtil , ONLY : ToUnsignedLong USE MClass_BaseRNG USE MClass_IntegerRNG , ONLY : MaskL USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: ChaChaRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Size of the seed required tSInt32 , PARAMETER :: SEED_SIZE = 5 tSInt32 , PARAMETER :: STATE_SIZE = 16 !** DERIVED TYPE DEFINITIONS !> The *ChaChaRNG* type is a *Long* PRNG type based on the *ChaCha* algorithm !  by D.J. Bernstein. TYPE , EXTENDS ( LongRNG ) :: ChaChaRNG PRIVATE !% current state and parts of the recently generated numbers. tUInt32 :: Input ( STATE_SIZE ) tUInt32 :: Output ( STATE_SIZE ) !% index into the output tIndex :: Index CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: Update => ChaChaRNG_Update ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => ChaChaRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 64-bit integer number. PROCEDURE :: NextLongImpl => ChaChaRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => ChaChaRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => ChaChaRNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE ChaChaRNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE ChaChaRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'ChaChaRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( ChaChaRNG ), INTENT ( INOUT ) :: RNG !! 'ChaChaRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE PARAMETER DECLARATIONS: ! random prime numbers tSInt32 , PARAMETER :: Primes ( 4 ) = [ ToInt32 ( Z 'FA835867' ), & ToInt32 ( Z '2086CA69' ), & ToInt32 ( Z '1467C0FB' ), & ToInt32 ( Z '638E2B99' )] !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Seed0 ( SEED_SIZE ) tUInt32 :: Key ( 8 ), IV ( 2 ) tIndex :: I , J ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! set Key and IV J = 1 DO I = 1 , 4 Key ( J ) = ToInt32 ( IAND ( Seed0 ( I ), MaskL )) J = J + 1 Key ( J ) = ToInt32 ( SHIFTR ( Seed0 ( I ), 32 )) J = J + 1 END DO IV ( 1 ) = ToInt32 ( IAND ( Seed0 ( 5 ), MaskL )) IV ( 2 ) = ToInt32 ( SHIFTR ( Seed0 ( 5 ), 32 )) ! set initial state RNG % Input ( 1 : 4 ) = Primes ( 1 : 4 ) DO I = 1 , 8 RNG % Input ( I + 4 ) = Key ( I ) END DO RNG % Input ( 13 : 14 ) = 0_kInt32 RNG % Input ( 15 : 16 ) = IV ( 1 : 2 ) ! set index and counter RNG % Index = 17_kIndex RETURN END SUBROUTINE ChaChaRNG_BaseInit !****************************************************************************** FUNCTION ChaChaRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( ChaChaRNG ), INTENT ( INOUT ) :: RNG !! 'ChaChaRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( RNG % Index > 16_kIndex ) THEN ! reset index RNG % Index = 1_kIndex ! update current state CALL RNG % Update () END IF ! get random number RandNum = IOR ( SHIFTL ( ToUnsignedLong ( RNG % Output ( RNG % Index )), 32 ), & ToUnsignedLong ( RNG % Output ( RNG % Index + 1 ))) ! update index RNG % Index = RNG % Index + 2_kIndex RETURN END FUNCTION ChaChaRNG_NextLong !****************************************************************************** SUBROUTINE ChaChaRNG_Update ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the current state of the PRNG. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( ChaChaRNG ), INTENT ( INOUT ) :: RNG !! 'ChaChaRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na !** FLOW ! set output RNG % Output = RNG % Input ! transform output CALL ChaChaRNG_Salsa20 ( RNG % Output ) ! add input to output RNG % Output = RNG % Output + RNG % Input ! update input RNG % Input ( 13 ) = RNG % Input ( 13 ) + 1 IF ( RNG % Input ( 13 ) == 0_kInt32 ) THEN ! If it is becoming zero we produced too many numbers by current PRNG. RNG % Input ( 14 ) = RNG % Input ( 14 ) + 1 END IF RETURN CONTAINS SUBROUTINE ChaChaRNG_Salsa20 ( State ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform ChaCha state transformation. !** SUBROUTINE ARGUMENT DECLARATIONS: tUInt32 , INTENT ( INOUT ) :: State ( 0 :) !** SUBROUTINE MACRO DEFINITIONS: #define RotateLeft(V,P)     ISHFTC(V,  P) #define ChachaQuaterRound(A,B,C,D) \\ A = A + B ; \\ D = RotateLeft ( IEOR ( D , A ), 16 ); \\ C = C + D ; \\ B = RotateLeft ( IEOR ( B , C ), 12 ); \\ A = A + B ; \\ D = RotateLeft ( IEOR ( D , A ), 8 ); \\ C = C + D ; \\ B = RotateLeft ( IEOR ( B , C ), 7 ); !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: I !** FLOW DO I = 8 , 1 , - 2 ChachaQuaterRound ( State ( 0 ), State ( 4 ), State ( 8 ), State ( 12 )) ChachaQuaterRound ( State ( 1 ), State ( 5 ), State ( 9 ), State ( 13 )) ChachaQuaterRound ( State ( 2 ), State ( 6 ), State ( 10 ), State ( 14 )) ChachaQuaterRound ( State ( 3 ), State ( 7 ), State ( 11 ), State ( 15 )) ChachaQuaterRound ( State ( 0 ), State ( 5 ), State ( 10 ), State ( 15 )) ChachaQuaterRound ( State ( 1 ), State ( 6 ), State ( 11 ), State ( 12 )) ChachaQuaterRound ( State ( 2 ), State ( 7 ), State ( 8 ), State ( 13 )) ChachaQuaterRound ( State ( 3 ), State ( 4 ), State ( 9 ), State ( 14 )) END DO RETURN #undef RotateLeft #undef ChachaQuaterRound END SUBROUTINE ChaChaRNG_Salsa20 !****************************************************************************** END SUBROUTINE ChaChaRNG_Update !****************************************************************************** FUNCTION ChaChaRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( ChaChaRNG ), INTENT ( IN ) :: RNG !! 'ChaChaRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'ChaChaRNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION ChaChaRNG_GetName !****************************************************************************** FUNCTION ChaChaRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( ChaChaRNG ), INTENT ( IN ) :: RNG !! 'ChaChaRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = SEED_SIZE ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION ChaChaRNG_GetSeedSize !****************************************************************************** END MODULE MClass_ChaChaRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_chacharng.f90.html"},{"title":"MClass_Mt32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Mt32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Mt32RNG* type and its related routines. !   The *Mt32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Mt32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the 32-bit Mersenne Twister !   algorithm by Makoto Matsumoto and Takuji Nishimura.  The *Mt32* PRNG !   features an extremely long period (2<sup>19937</sup> - 1) and !   623-dimensional equidistribution up to 32 bits accuracy. <br> !   It is important to note that the *Mt32* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf\"> !       M. Matsumoto and T. Nishimura.  1998.  Mersenne Twister: A 623-Dimensionally !       Equidistributed Uniform Pseudo-Random Number Generator.  ACM Transactions on !       Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.</a> <br> !   [2] <a href=\"http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/MT2002/emt19937ar.html\"> !       Mersenne Twister with improved initialization.</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/MersenneTwister.html\"> !       Apache Commons RNG: Class MersenneTwister</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Mt32RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! Mask 32 most significant bits. tSInt64 , PARAMETER :: INT_MASK_LONG = ToInt64 ( Z '00000000FFFFFFFF' ) ! Most significant w-r bits. tSInt64 , PARAMETER :: UPPER_MASK_LONG = ToInt64 ( Z '0000000080000000' ) ! Least significant r bits. tSInt64 , PARAMETER :: LOWER_MASK_LONG = ToInt64 ( Z '000000007FFFFFFF' ) ! Most significant w-r bits. tSInt32 , PARAMETER :: UPPER_MASK = ToInt32 ( Z '80000000' ) ! Least significant r bits. tSInt32 , PARAMETER :: LOWER_MASK = ToInt32 ( Z '7FFFFFFF' ) ! Size of the bytes pool. tSInt32 , PARAMETER :: N = 624 ! Period second parameter. tSInt32 , PARAMETER :: M = 397 ! X * MATRIX_A for X = {0, 1}. tSInt32 , PARAMETER :: MAG01 ( 0 : 1 ) = [ 0 , ToInt32 ( Z '9908B0DF' )] !** DERIVED TYPE DEFINITIONS !> The *Mt32RNG* type is an *Integer* PRNG type based on the Mersenne !  Twister algorithm by Makoto Matsumoto and Takuji Nishimura. TYPE , EXTENDS ( IntegerRNG ) :: Mt32RNG PRIVATE ! bytes pool tSInt32 :: MT ( 0 : N - 1 ) ! current index in the bytes pool tSInt32 :: MTI CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Mt32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Mt32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Mt32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Mt32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Mt32RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): !****************************************************************************** SUBROUTINE Mt32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Mt32RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt32RNG ), INTENT ( INOUT ) :: RNG !! 'Mt32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! set initial states IF ( SIZE ( Seed ) < N ) THEN CALL FillStateVariable ( Seed , RNG % MT ) ELSE RNG % MT ( 0 : N - 1 ) = Seed ( 1 : N ) END IF ! initial index RNG % MTI = N RETURN CONTAINS SUBROUTINE FillStateVariable ( Seed , State ) !** PURPOSE OF THIS SUBROUTINE: ! To fill the state variable based on the given seed. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: Seed ( 0 :) tSInt32 , INTENT ( OUT ) :: State ( 0 :) !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt64 , PARAMETER :: Mask = ToInt64 ( Z '00000000FFFFFFFF' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: NextIndex ! FLOW CALL Initialize_State ( State ) NextIndex = Mix_Seed_N_State ( Seed , State ) CALL Mix_State ( State , NextIndex ) ! MSB is 1, ensuring non-zero initial array State ( 0 ) = ToInt32 ( UPPER_MASK_LONG ) RETURN END SUBROUTINE FillStateVariable !****************************************************************************** SUBROUTINE Initialize_State ( State ) !** PURPOSE OF THIS SUBROUTINE: ! To fill the State using a defined pseudo-random sequence. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( OUT ) :: State ( 0 :) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: MT tIndex :: I ! FLOW MT = IAND ( 19650218_kInt64 , INT_MASK_LONG ) State ( 0 ) = ToInt32 ( MT ) DO I = 1 , SIZE ( State ) - 1 MT = IAND (( 1812433253_kInt64 * IEOR ( MT , SHIFTA ( MT , 30 )) + I ), INT_MASK_LONG ) State ( I ) = ToInt32 ( MT ) END DO RETURN END SUBROUTINE Initialize_State !****************************************************************************** FUNCTION Mix_Seed_N_State ( Seed , State ) RESULT ( NextID ) !** PURPOSE OF THIS SUBROUTINE: ! To mix the seed into the state using a non-linear combination.  The procedure ! uses K steps where {K = MAX(SIZE(State), SIZE(Seed))}.  If the seed is smaller ! than the state it is wrapped to obtain enough values.  If the seed is larger ! than the state then the procedure visits entries in the state multiple times. ! Also, to return the index immediately after the most recently visited position ! in the state array. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( INOUT ) :: State ( 0 :) tSInt32 , INTENT ( IN ) :: Seed ( 0 :) tSInt32 :: NextID !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: StateSize , SeedSize , MaxSize tSInt32 :: I , J , K tSInt64 :: A , B , C ! FLOW StateSize = SIZE ( State ) SeedSize = SIZE ( Seed ) MaxSize = MAX ( StateSize , SeedSize ) I = 1 J = 0 DO K = MaxSize , 1 , - 1 IF ( State ( I ) < 0 ) THEN A = IOR ( IAND ( ToInt64 ( State ( I )), LOWER_MASK_LONG ), UPPER_MASK_LONG ) ELSE A = IOR ( IAND ( ToInt64 ( State ( I )), LOWER_MASK_LONG ), 0_kInt64 ) END IF IF ( State ( I - 1 ) < 0 ) THEN B = IOR ( IAND ( ToInt64 ( State ( I - 1 )), LOWER_MASK_LONG ), UPPER_MASK_LONG ) ELSE B = IOR ( IAND ( ToInt64 ( State ( I - 1 )), LOWER_MASK_LONG ), 0_kInt64 ) END IF ! Non linear C = IEOR ( A , ( IEOR ( B , SHIFTA ( B , 30 )) * 1664525_kInt64 )) + Seed ( J ) + J State ( I ) = ToInt32 ( IAND ( C , INT_MASK_LONG )) I = I + 1 J = J + 1 IF ( I >= StateSize ) THEN State ( 0 ) = State ( StateSize - 1 ) I = 1 END IF IF ( J >= SeedSize ) THEN J = 0 END IF END DO ! return the next index NextID = I RETURN END FUNCTION Mix_Seed_N_State !****************************************************************************** SUBROUTINE Mix_State ( State , StartID ) !** PURPOSE OF THIS SUBROUTINE: ! To mix each position of the state using a non-linear combination. The ! procedure starts from the specified index in the state array and wraps ! iteration through the array if required. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( INOUT ) :: State ( 0 :) tSInt32 , INTENT ( IN ) :: StartID !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: StateSize tSInt32 :: I , K tSInt64 :: A , B , C ! FLOW StateSize = SIZE ( State ) I = StartID DO K = StateSize , 1 , - 1 IF ( State ( I ) < 0 ) THEN A = IOR ( IAND ( ToInt64 ( State ( I )), LOWER_MASK_LONG ), UPPER_MASK_LONG ) ELSE A = IOR ( IAND ( ToInt64 ( State ( I )), LOWER_MASK_LONG ), 0_kInt64 ) END IF IF ( State ( I - 1 ) < 0 ) THEN B = IOR ( IAND ( ToInt64 ( State ( I - 1 )), LOWER_MASK_LONG ), UPPER_MASK_LONG ) ELSE B = IOR ( IAND ( ToInt64 ( State ( I - 1 )), LOWER_MASK_LONG ), 0_kInt64 ) END IF ! Non linear C = IEOR ( A , ( IEOR ( B , SHIFTA ( B , 30 )) * 1566083941_kInt64 )) - I State ( I ) = ToInt32 ( IAND ( C , INT_MASK_LONG )) I = I + 1 IF ( I >= StateSize ) THEN State ( 0 ) = State ( StateSize - 1 ) I = 1 END IF END DO RETURN END SUBROUTINE Mix_State !****************************************************************************** END SUBROUTINE Mt32RNG_BaseInit !****************************************************************************** FUNCTION Mt32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt32RNG ), INTENT ( INOUT ) :: RNG !! 'Mt32RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! Tempering parameters tSInt32 , PARAMETER :: TMaskB = ToInt32 ( Z '9D2C5680' ) tSInt32 , PARAMETER :: TMaskC = ToInt32 ( Z 'EFC60000' ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Y , MTCurr , MTNext , K ! FLOW IF ( RNG % MTI >= N ) THEN ! Generate N words at one time MTNext = RNG % MT ( 0 ) DO K = 0 , N - M - 1 MTCurr = MTNext MTNext = RNG % MT ( K + 1 ) Y = IOR ( IAND ( MTCurr , UPPER_MASK ), IAND ( MTNext , LOWER_MASK )) RNG % MT ( K ) = IEOR ( IEOR ( RNG % MT ( K + M ), SHIFTR ( Y , 1 )), MAG01 ( IAND ( Y , 1 ))) END DO DO K = N - M , N - 2 MTCurr = MTNext MTNext = RNG % MT ( K + 1 ) Y = IOR ( IAND ( MTCurr , UPPER_MASK ), IAND ( MTNext , LOWER_MASK )) RNG % MT ( K ) = IEOR ( IEOR ( RNG % MT ( K + ( M - N )), SHIFTR ( Y , 1 )), MAG01 ( IAND ( Y , 1 ))) END DO Y = IOR ( IAND ( MTNext , UPPER_MASK ), IAND ( RNG % MT ( 0 ), LOWER_MASK )) RNG % MT ( N - 1 ) = IEOR ( IEOR ( RNG % MT ( M - 1 ), SHIFTR ( Y , 1 )), MAG01 ( IAND ( Y , 1 ))) RNG % MTI = 0 END IF Y = RNG % MT ( RNG % MTI ) RNG % MTI = RNG % MTI + 1 ! Tempering Y = IEOR ( Y , SHIFTR ( Y , 11 )) Y = IEOR ( Y , IAND ( SHIFTL ( Y , 7 ), TMaskB )) Y = IEOR ( Y , IAND ( SHIFTL ( Y , 15 ), TMaskC )) Y = IEOR ( Y , SHIFTR ( Y , 18 )) RandNum = Y RETURN END FUNCTION Mt32RNG_NextInteger !****************************************************************************** FUNCTION Mt32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt32RNG ), INTENT ( IN ) :: RNG !! 'Mt32RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Mt32RNG' ! to prevent warning of unused variable(s) ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mt32RNG_GetName !****************************************************************************** FUNCTION Mt32RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Mt32RNG ), INTENT ( IN ) :: RNG !! 'Mt32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = N ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Mt32RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Mt32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_mt32rng.f90.html"},{"title":"MBase_PrngBuilder.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MBase_PrgnBuilder !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module provides access to random number generator classes and two groups of !   general routines that perform the following tasks: <br> !   - Construct a random-number generator class based on the specified algorithm. <br> !   - Return a number of seeds required to construct the specified generator. !** USE STATEMENTS: USE MBase_Common ! base classes USE MClass_BaseRNG USE MClass_IntegerRNG USE MClass_LongRNG ! integer classes USE MClass_Cmwc4096RNG USE MClass_IsaccRNG USE MClass_Jsf32RNG USE MClass_Kiss32RNG USE MClass_L32X64MRNG USE MClass_L32X64RNG USE MClass_Lfsr113RNG USE MClass_Mrg32k3aRNG USE MClass_Mt32RNG USE MClass_Mwc256RNG USE MClass_PcgLcg32RNG USE MClass_PcgMcg32RNG USE MClass_RanLuxRNG USE MClass_Sfc32RNG USE MClass_SuperKiss32RNG USE MClass_Taus88RNG USE MClass_Well32RNG USE MClass_XoRoShiRo64RNG USE MClass_XoShiRo128RNG ! long classes USE MClass_ChaChaRNG USE MClass_Jsf64RNG USE MClass_Kiss64RNG USE MClass_KomiRNG USE MClass_L64X128RNG USE MClass_L64X256RNG USE MClass_L64X1024RNG USE MClass_L64XMRNG USE MClass_L128X128RNG USE MClass_L128X256RNG USE MClass_L128X1024RNG USE MClass_L128XMRNG USE MClass_Lfsr258RNG USE MClass_Mrg63k3aRNG USE MClass_MswsRNG USE MClass_Mt64RNG USE MClass_PcgRxsMXs64RNG USE MClass_RanLuxPpRNG USE MClass_Sfc64RNG USE MClass_Sip24RNG USE MClass_SplitMixRNG USE MClass_SuperKiss64RNG USE MClass_WyRNG USE MClass_XoRoShiRo128RNG USE MClass_XoRoShiRo1024RNG USE MClass_XoShiRo256RNG USE MClass_XoShiRo512RNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS ! base classes PUBLIC :: BaseRNG , IntegerRNG , LongRNG ! integer classes PUBLIC :: Cmwc4096RNG , IsaccRNG , Jsf32RNG , Kiss32RNG PUBLIC :: L32X64MRNG , L32X64RNG , Lfsr113RNG , Mrg32k3aRNG PUBLIC :: Mt32RNG , Mwc256RNG , PcgLcg32RNG , PcgMcg32RNG PUBLIC :: RanLuxRNG , Sfc32RNG , SuperKiss32RNG , Taus88RNG PUBLIC :: Well32RNG , XoRoShiRo64RNG , XoShiRo128RNG ! long classes PUBLIC :: ChaChaRNG , Jsf64RNG , Kiss64RNG , KomiRNG PUBLIC :: L64X128RNG , L64X256RNG , L64X1024RNG , L64XMRNG PUBLIC :: L128X128RNG , L128X256RNG , L128X1024RNG , L128XMRNG PUBLIC :: Lfsr258RNG , Mrg63k3aRNG , MswsRNG , Mt64RNG PUBLIC :: PcgRxsMXs64RNG , RanLuxPpRNG , Sfc64RNG , Sip24RNG PUBLIC :: SplitMixRNG , SuperKiss64RNG , WyRNG , XoRoShiRo128RNG PUBLIC :: XoRoShiRo1024RNG , XoShiRo256RNG , XoShiRo512RNG ! builder procedures PUBLIC :: CreateIntegerRng PUBLIC :: CreateLongRng PUBLIC :: GetSeedSizeIntegerRng PUBLIC :: GetSeedSizeLongRng PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../MacroDef/Macro - Basic Definitions.f90\" #define     PublicParam     tSInt32,  PARAMETER, PUBLIC !** MODULE PARAMETERS: ! name of module tCharStar , PARAMETER :: ModName = 'MBase_PrgnBuilder' ! ------------------------------------------------------------------------- ! -----     Parameters for Integer Pseudo-Random Number Generators    ----- ! ------------------------------------------------------------------------- !% CMWC (Complimentary-Multiply-With-Carry) PublicParam :: I32_CMWC = 1 !% ISAAC (Indirection, Shift, Accumulate, Add, and Count) PublicParam :: I32_ISACC = 2 !% Jenkins's small fast non-cryptographic (32-bit variant) PublicParam :: I32_JSF = 3 !% Marsaglia's 32-bit KISS (Keep it Simple Stupid) PublicParam :: I32_KISS = 4 !% L32-X64-Mix based on Java's JDK.Random PublicParam :: I32_L32_X64_M1 = 5 !% L32-X64-Mix based on Apache Commons RNG PublicParam :: I32_L32_X64_M2 = 6 !% L'Ecuyer's 1999 32-bit Composite LFSR PublicParam :: I32_LFSR113 = 7 !% L'Ecuyer's 32-bit combined Multiple Recursive Generator (cMRG) PublicParam :: I32_MRG32K3A = 8 !% 32-bit Mersenne Twister (MT) PublicParam :: I32_MT = 9 !% Marsaglia's Multiply-With-Carry (MWC) PublicParam :: I32_MWC = 10 !% 32-bit PCG's LCG-XorShift-RandomShift PublicParam :: I32_PCG_LCG_XRS = 11 !% 32-bit PCG's LCG-XorShift-RandomRotate PublicParam :: I32_PCG_LCG_XRR = 12 !% 32-bit PCG's MCG-XorShift-RandomShift PublicParam :: I32_PCG_MCG_XRS = 13 !% 32-bit PCG's MCG-XorShift-RandomRotate PublicParam :: I32_PCG_MCG_XRR = 14 !% 32-bit RANLUX PublicParam :: I32_RANLUX = 15 !% Doty-Humphrey's 32-bit Small, Fast, Counting (SFC) PublicParam :: I32_SFC = 16 !% Marsaglia's 32-bit SuperKISS PublicParam :: I32_SUPERKISS = 17 !% L'Ecuyer's 1996 Three-Component Tausworthe PublicParam :: I32_TUAS88 = 18 !% Well Equidistributed Long-period Linear (WELL) 512a PublicParam :: I32_WELL512A = 19 !% Well Equidistributed Long-period Linear (WELL) 1024a PublicParam :: I32_WELL1024A = 20 !% Well Equidistributed Long-period Linear (WELL) 19937a PublicParam :: I32_WELL19937A = 21 !% Well Equidistributed Long-period Linear (WELL) 19937c PublicParam :: I32_WELL19937C = 22 !% Well Equidistributed Long-period Linear (WELL) 49937a PublicParam :: I32_WELL49937A = 23 !% Well Equidistributed Long-period Linear (WELL) 49937b PublicParam :: I32_WELL49937B = 24 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 64Star PublicParam :: I32_XOROSHIRO64S = 25 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 64StarStar PublicParam :: I32_XOROSHIRO64SS = 26 !% XOR_Shift_Rotate (XoShiRo) 128StarStar PublicParam :: I32_XOSHIRO128SS = 27 !% XOR_Shift_Rotate (XoShiRo) 128Plus PublicParam :: I32_XOSHIRO128P = 28 !% XOR_Shift_Rotate (XoShiRo) 128PlusPlus PublicParam :: I32_XOSHIRO128PP = 29 ! ------------------------------------------------------------------------- ! -----     Parameters for Long Pseudo-Random Number Generators       ----- ! ------------------------------------------------------------------------- !% Chacha cipher PublicParam :: I64_CHACHA = 1 !% Jenkins's small fast non-cryptographic (64-bit variant) PublicParam :: I64_JSF = 2 !% Marsaglia's 64-bit KISS (Keep it Simple Stupid) PublicParam :: I64_KISS = 3 !% Vaneev's KomiRand PublicParam :: I64_KOMI = 4 !% L64-X128-Mix based on Java's JDK.Random PublicParam :: I64_L64_X128_M1 = 5 !% L64-X128-StarStar based on Java's JDK.Random PublicParam :: I64_L64_X128_SS1 = 6 !% L64-X256-Mix based on Java's JDK.Random PublicParam :: I64_L64_X256_M1 = 7 !% L64-X1024-Mix based on Java's JDK.Random PublicParam :: I64_L64_X1024_M1 = 8 !% L128-X128-Mix based on Java's JDK.Random PublicParam :: I64_L128_X128_M1 = 9 !% L128-X256-Mix based on Java's JDK.Random PublicParam :: I64_L128_X256_M1 = 10 !% L128-X1024-Mix based on Java's JDK.Random PublicParam :: I64_L128_X1024_M1 = 11 !% L64-X128-Mix based on Apache Commons RNG PublicParam :: I64_L64_X128_M2 = 12 !% L64-X128-StarStar based on Apache Commons RNG PublicParam :: I64_L64_X128_SS2 = 13 !% L64-X256-Mix based on Apache Commons RNG PublicParam :: I64_L64_X256_M2 = 14 !% L64-X1024-Mix based on Apache Commons RNG PublicParam :: I64_L64_X1024_M2 = 15 !% L128-X128-Mix based on Apache Commons RNG PublicParam :: I64_L128_X128_M2 = 16 !% L128-X256-Mix based on Apache Commons RNG PublicParam :: I64_L128_X256_M2 = 17 !% L128-X1024-Mix based on Apache Commons RNG PublicParam :: I64_L128_X1024_M2 = 18 !% L'Ecuyer's 1999 64-bit Composite LFSR PublicParam :: I64_LFSR258 = 19 !% L'Ecuyer's 63-bit combined Multiple Recursive Generator (cMRG) PublicParam :: I64_MRG63K3A = 20 !% Middle-Square Weyl Sequence (MSWS) PublicParam :: I64_MSWS = 21 !% 64-bit Mersenne Twister (MT) PublicParam :: I64_MT = 22 !% 64-bit PCG's LCG-RandomXorshift-Multiply-Xorshift PublicParam :: I64_PCG_RXS_M_XS = 23 !% 64-bit RANLUX++ PublicParam :: I64_RANLUXPP = 24 !% Doty-Humphrey's 64-bit Small, Fast, Counting (SFC) PublicParam :: I64_SFC = 25 !% SipHash24 PublicParam :: I64_SIP24 = 26 !% SplitMix PublicParam :: I64_SPLITMIX = 27 !% Marsaglia's 64-bit SuperKISS PublicParam :: I64_SUPERKISS = 28 !% Wang Yi's WyRand PublicParam :: I64_WY = 29 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 128StarStar PublicParam :: I64_XOROSHIRO128SS = 30 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 128Plus PublicParam :: I64_XOROSHIRO128P = 31 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 128PlusPlus PublicParam :: I64_XOROSHIRO128PP = 32 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 1024Star PublicParam :: I64_XOROSHIRO1024S = 33 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 1024StarStar PublicParam :: I64_XOROSHIRO1024SS = 34 !% XOR_Rotate_Shift_Rotate (XoRoShiRo) 1024PlusPlus PublicParam :: I64_XOROSHIRO1024PP = 35 !% XOR_Shift_Rotate (XoShiRo) 256StarStar PublicParam :: I64_XOSHIRO256SS = 36 !% XOR_Shift_Rotate (XoShiRo) 256Plus PublicParam :: I64_XOSHIRO256P = 37 !% XOR_Shift_Rotate (XoShiRo) 256PlusPlus PublicParam :: I64_XOSHIRO256PP = 38 !% XOR_Shift_Rotate (XoShiRo) 512StarStar PublicParam :: I64_XOSHIRO512SS = 39 !% XOR_Shift_Rotate (XoShiRo) 512Plus PublicParam :: I64_XOSHIRO512P = 40 !% XOR_Shift_Rotate (XoShiRo) 512PlusPlus PublicParam :: I64_XOSHIRO512PP = 41 !** DERIVED TYPE DEFINITIONS ! na !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): FUNCTION CreateIntegerRng ( RngAlgo , Seed ) RESULT ( NewRng ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create an instance of the specified *Integer* random number generator !  as well as to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-29) tSInt32 , OPTIONAL , INTENT ( IN ) :: Seed (:) !! seed(s) CLASS ( BaseRNG ), ALLOCATABLE :: NewRng !! 'BaseRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I32_CMWC ) ALLOCATE ( Cmwc4096RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Cmwc4096RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_ISACC ) ALLOCATE ( IsaccRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( IsaccRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_JSF ) ALLOCATE ( Jsf32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Jsf32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_KISS ) ALLOCATE ( Kiss32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Kiss32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_L32_X64_M1 ) ALLOCATE ( L32X64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L32X64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_L32_X64_M2 ) ALLOCATE ( L32X64MRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L32X64MRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_LFSR113 ) ALLOCATE ( Lfsr113RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Lfsr113RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_MRG32K3A ) ALLOCATE ( Mrg32k3aRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mrg32k3aRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_MT ) ALLOCATE ( Mt32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_MWC ) ALLOCATE ( Mwc256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mwc256RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_PCG_LCG_XRS , I32_PCG_LCG_XRR ) ALLOCATE ( PcgLcg32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( PcgLcg32RNG ) IF ( RngAlgo == I32_PCG_LCG_XRS ) THEN CALL NewRng % Initialize ( TrueVal , Seed ) ELSE CALL NewRng % Initialize ( FalseVal , Seed ) END IF END SELECT CASE ( I32_PCG_MCG_XRS , I32_PCG_MCG_XRR ) ALLOCATE ( PcgMcg32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( PcgMcg32RNG ) IF ( RngAlgo == I32_PCG_MCG_XRS ) THEN CALL NewRng % Initialize ( TrueVal , Seed ) ELSE CALL NewRng % Initialize ( FalseVal , Seed ) END IF END SELECT CASE ( I32_RANLUX ) ALLOCATE ( RanLuxRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( RanLuxRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_SFC ) ALLOCATE ( Sfc32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Sfc32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_SUPERKISS ) ALLOCATE ( SuperKiss32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( SuperKiss32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_TUAS88 ) ALLOCATE ( Taus88RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Taus88RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I32_WELL512A , I32_WELL1024A , I32_WELL19937A , & I32_WELL19937C , I32_WELL49937A , I32_WELL49937B ) ALLOCATE ( Well32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Well32RNG ) SELECT CASE ( RngAlgo ) CASE ( I32_WELL512A ) CALL NewRng % Initialize ( WELL512a , Seed ) CASE ( I32_WELL1024A ) CALL NewRng % Initialize ( WELL1024a , Seed ) CASE ( I32_WELL19937A ) CALL NewRng % Initialize ( WELL19937a , Seed ) CASE ( I32_WELL19937C ) CALL NewRng % Initialize ( WELL19937C , Seed ) CASE ( I32_WELL49937A ) CALL NewRng % Initialize ( WELL49937a , Seed ) CASE ( I32_WELL49937B ) CALL NewRng % Initialize ( WELL49937b , Seed ) END SELECT END SELECT CASE ( I32_XOROSHIRO64S , I32_XOROSHIRO64SS ) ALLOCATE ( XoRoShiRo64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoRoShiRo64RNG ) IF ( RngAlgo == I32_XOROSHIRO64S ) THEN CALL NewRng % Initialize ( TrueVal , Seed ) ELSE CALL NewRng % Initialize ( FalseVal , Seed ) END IF END SELECT CASE ( I32_XOSHIRO128SS , I32_XOSHIRO128P , I32_XOSHIRO128PP ) ALLOCATE ( XoShiRo128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoShiRo128RNG ) SELECT CASE ( RngAlgo ) CASE ( I32_XOSHIRO128SS ) CALL NewRng % Initialize ( XoShiRo128StarStar , Seed ) CASE ( I32_XOSHIRO128P ) CALL NewRng % Initialize ( XoShiRo128Plus , Seed ) CASE ( I32_XOSHIRO128PP ) CALL NewRng % Initialize ( XoShiRo128PlusPlus , Seed ) END SELECT END SELECT CASE DEFAULT ALLOCATE ( Mt32RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt32RNG ) CALL NewRng % Initialize ( Seed ) END SELECT END SELECT RETURN END FUNCTION CreateIntegerRng !****************************************************************************** FUNCTION CreateLongRng ( RngAlgo , Seed ) RESULT ( NewRng ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create an instance of the specified *Long* random number generator !  as well as to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-41) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !! seed(s) CLASS ( BaseRNG ), ALLOCATABLE :: NewRng !! 'BaseRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I64_CHACHA ) ALLOCATE ( ChaChaRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( ChaChaRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_JSF ) ALLOCATE ( Jsf64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Jsf64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_KISS ) ALLOCATE ( Kiss64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Kiss64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_KOMI ) ALLOCATE ( KomiRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( KomiRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L64_X128_M1 , I64_L64_X128_SS1 ) ALLOCATE ( L64X128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64X128RNG ) IF ( RngAlgo == I64_L64_X128_SS1 ) THEN CALL NewRng % Initialize ( Seed , UseStarStar = TrueVal ) ELSE CALL NewRng % Initialize ( Seed , UseStarStar = FalseVal ) END IF END SELECT CASE ( I64_L64_X256_M1 ) ALLOCATE ( L64X256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64X256RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L64_X1024_M1 ) ALLOCATE ( L64X1024RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64X1024RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L128_X128_M1 ) ALLOCATE ( L128X128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128X128RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L128_X256_M1 ) ALLOCATE ( L128X256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128X256RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L128_X1024_M1 ) ALLOCATE ( L128X1024RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128X1024RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_L64_X128_M2 , I64_L64_X128_SS2 , I64_L64_X256_M2 , I64_L64_X1024_M2 ) ALLOCATE ( L64XMRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L64XMRNG ) SELECT CASE ( RngAlgo ) CASE ( I64_L64_X128_M2 ) CALL NewRng % Initialize ( L64X128Mix , Seed ) CASE ( I64_L64_X128_SS2 ) CALL NewRng % Initialize ( L64X128StarStar , Seed ) CASE ( I64_L64_X256_M2 ) CALL NewRng % Initialize ( L64X256Mix , Seed ) CASE ( I64_L64_X1024_M2 ) CALL NewRng % Initialize ( L64X1024Mix , Seed ) END SELECT END SELECT CASE ( I64_L128_X128_M2 , I64_L128_X256_M2 , I64_L128_X1024_M2 ) ALLOCATE ( L128XMRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( L128XMRNG ) SELECT CASE ( RngAlgo ) CASE ( I64_L128_X128_M2 ) CALL NewRng % Initialize ( L128X128Mix , Seed ) CASE ( I64_L128_X256_M2 ) CALL NewRng % Initialize ( L128X256Mix , Seed ) CASE ( I64_L128_X1024_M2 ) CALL NewRng % Initialize ( L128X1024Mix , Seed ) END SELECT END SELECT CASE ( I64_LFSR258 ) ALLOCATE ( Lfsr258RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Lfsr258RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_MRG63K3A ) ALLOCATE ( Mrg63k3aRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mrg63k3aRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_MSWS ) ALLOCATE ( MswsRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( MswsRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_MT ) ALLOCATE ( Mt64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_PCG_RXS_M_XS ) ALLOCATE ( PcgRxsMXs64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( PcgRxsMXs64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_RANLUXPP ) ALLOCATE ( RanLuxPpRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( RanLuxPpRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SFC ) ALLOCATE ( Sfc64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Sfc64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SIP24 ) ALLOCATE ( Sip24RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Sip24RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SPLITMIX ) ALLOCATE ( SplitMixRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( SplitMixRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_SUPERKISS ) ALLOCATE ( SuperKiss64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( SuperKiss64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_WY ) ALLOCATE ( WyRNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( WyRNG ) CALL NewRng % Initialize ( Seed ) END SELECT CASE ( I64_XOROSHIRO128SS , I64_XOROSHIRO128P , I64_XOROSHIRO128PP ) ALLOCATE ( XoRoShiRo128RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoRoShiRo128RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOROSHIRO128SS ) CALL NewRng % Initialize ( XoRoShiRo128StarStar , Seed ) CASE ( I64_XOROSHIRO128P ) CALL NewRng % Initialize ( XoRoShiRo128Plus , Seed ) CASE ( I64_XOROSHIRO128PP ) CALL NewRng % Initialize ( XoRoShiRo128PlusPlus , Seed ) END SELECT END SELECT CASE ( I64_XOROSHIRO1024S , I64_XOROSHIRO1024SS , I64_XOROSHIRO1024PP ) ALLOCATE ( XoRoShiRo1024RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoRoShiRo1024RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOROSHIRO1024S ) CALL NewRng % Initialize ( XoRoShiRo1024Star , Seed ) CASE ( I64_XOROSHIRO1024SS ) CALL NewRng % Initialize ( XoRoShiRo1024StarStar , Seed ) CASE ( I64_XOROSHIRO1024PP ) CALL NewRng % Initialize ( XoRoShiRo1024PlusPlus , Seed ) END SELECT END SELECT CASE ( I64_XOSHIRO256SS , I64_XOSHIRO256P , I64_XOSHIRO256PP ) ALLOCATE ( XoShiRo256RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoShiRo256RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOSHIRO256SS ) CALL NewRng % Initialize ( XoShiRo256StarStar , Seed ) CASE ( I64_XOSHIRO256P ) CALL NewRng % Initialize ( XoShiRo256Plus , Seed ) CASE ( I64_XOSHIRO256PP ) CALL NewRng % Initialize ( XoShiRo256PlusPlus , Seed ) END SELECT END SELECT CASE ( I64_XOSHIRO512SS , I64_XOSHIRO512P , I64_XOSHIRO512PP ) ALLOCATE ( XoShiRo512RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( XoShiRo512RNG ) SELECT CASE ( RngAlgo ) CASE ( I64_XOSHIRO512SS ) CALL NewRng % Initialize ( XoShiRo512StarStar , Seed ) CASE ( I64_XOSHIRO512P ) CALL NewRng % Initialize ( XoShiRo512Plus , Seed ) CASE ( I64_XOSHIRO512PP ) CALL NewRng % Initialize ( XoShiRo512PlusPlus , Seed ) END SELECT END SELECT CASE DEFAULT ALLOCATE ( Mt64RNG :: NewRng ) SELECT TYPE ( NewRng ) TYPE IS ( Mt64RNG ) CALL NewRng % Initialize ( Seed ) END SELECT END SELECT RETURN END FUNCTION CreateLongRng !****************************************************************************** FUNCTION GetSeedSizeIntegerRng ( RngAlgo ) RESULT ( Number ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the number of seeds required by the specified algorithm. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-29) tIndex :: Number !! number of seeds required by the specified algorithm !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I32_CMWC ) Number = 4097_kIndex CASE ( I32_ISACC ) Number = SHIFTL ( 1_kIndex , 8 ) CASE ( I32_JSF ) Number = 1_kIndex CASE ( I32_KISS ) Number = 4_kIndex CASE ( I32_L32_X64_M1 ) Number = 2_kIndex CASE ( I32_L32_X64_M2 ) Number = 4_kIndex CASE ( I32_LFSR113 ) Number = 4_kIndex CASE ( I32_MRG32K3A ) Number = 6_kIndex CASE ( I32_MT ) Number = 624_kIndex CASE ( I32_MWC ) Number = 257_kIndex CASE ( I32_PCG_LCG_XRS , I32_PCG_LCG_XRR ) Number = 4_kIndex CASE ( I32_PCG_MCG_XRS , I32_PCG_MCG_XRR ) Number = 2_kIndex CASE ( I32_RANLUX ) Number = 1_kIndex CASE ( I32_SFC ) Number = 3_kIndex CASE ( I32_SUPERKISS ) Number = 3_kIndex CASE ( I32_TUAS88 ) Number = 3_kIndex CASE ( I32_WELL512A ) Number = CalculateBlockCount ( 512 ) CASE ( I32_WELL1024A ) Number = CalculateBlockCount ( 1024 ) CASE ( I32_WELL19937A ) Number = CalculateBlockCount ( 19937 ) CASE ( I32_WELL19937C ) Number = CalculateBlockCount ( 19937 ) CASE ( I32_WELL49937A ) Number = CalculateBlockCount ( 49937 ) CASE ( I32_WELL49937B ) Number = CalculateBlockCount ( 49937 ) CASE ( I32_XOROSHIRO64S , I32_XOROSHIRO64SS ) Number = 2_kIndex CASE ( I32_XOSHIRO128SS , I32_XOSHIRO128P , I32_XOSHIRO128PP ) Number = 4_kIndex CASE DEFAULT Number = 624_kIndex END SELECT RETURN END FUNCTION GetSeedSizeIntegerRng !****************************************************************************** FUNCTION GetSeedSizeLongRng ( RngAlgo ) RESULT ( Number ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the number of seeds required by the specified algorithm. !** SUBROUTINE ARGUMENT DECLARATIONS: tSInt32 , INTENT ( IN ) :: RngAlgo !! flag indicating algorithm (1-41) tIndex :: Number !! number of seeds required by the specified algorithm !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RngAlgo ) CASE ( I64_CHACHA ) Number = 5_kIndex CASE ( I64_JSF ) Number = 1_kIndex CASE ( I64_KISS ) Number = 4_kIndex CASE ( I64_KOMI ) Number = 1_kIndex CASE ( I64_L64_X128_M1 , I64_L64_X128_SS1 , I64_L64_X256_M1 , I64_L64_X1024_M1 ) Number = 1_kIndex CASE ( I64_L128_X128_M1 , I64_L128_X256_M1 , I64_L128_X1024_M1 ) Number = 1_kIndex CASE ( I64_L64_X128_M2 , I64_L64_X128_SS2 ) Number = 4_kIndex CASE ( I64_L64_X256_M2 ) Number = 6_kIndex CASE ( I64_L64_X1024_M2 ) Number = 18_kIndex CASE ( I64_L128_X128_M2 ) Number = 6_kIndex CASE ( I64_L128_X256_M2 ) Number = 8_kIndex CASE ( I64_L128_X1024_M2 ) Number = 20_kIndex CASE ( I64_LFSR258 ) Number = 5_kIndex CASE ( I64_MRG63K3A ) Number = 6_kIndex CASE ( I64_MSWS ) Number = 6_kIndex CASE ( I64_MT ) Number = 312_kIndex CASE ( I64_PCG_RXS_M_XS ) Number = 2_kIndex CASE ( I64_RANLUXPP ) Number = 1_kIndex CASE ( I64_SFC ) Number = 3_kIndex CASE ( I64_SIP24 ) Number = 4_kIndex CASE ( I64_SPLITMIX ) Number = 1_kIndex CASE ( I64_SUPERKISS ) Number = 3_kIndex CASE ( I64_WY ) Number = 1_kIndex CASE ( I64_XOROSHIRO128SS , I64_XOROSHIRO128P , I64_XOROSHIRO128PP ) Number = 2_kIndex CASE ( I64_XOROSHIRO1024S , I64_XOROSHIRO1024SS , I64_XOROSHIRO1024PP ) Number = 16_kIndex CASE ( I64_XOSHIRO256SS , I64_XOSHIRO256P , I64_XOSHIRO256PP ) Number = 4_kIndex CASE ( I64_XOSHIRO512SS , I64_XOSHIRO512P , I64_XOSHIRO512PP ) Number = 8_kIndex CASE DEFAULT Number = 312_kIndex END SELECT RETURN END FUNCTION GetSeedSizeLongRng !****************************************************************************** END MODULE MBase_PrgnBuilder !******************************************************************************","tags":"","loc":"sourcefile\\mbase_prngbuilder.f90.html"},{"title":"MClass_LongRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_LongRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *LongRNG* type and its related routines. !   The *LongRNG* type is an abstract PRNG type that directly extends !   the *BaseRNG* type.   It defines additional methods for a so-called !   *Long* PRNG.  It also provides default implementations of some deferred !   procedures required by a PRNG where other deferred procedures must be !   implemented by its subtypes.  <br> !   By design, the *LongRNG* type is provided as a base type for a *Long* !   PRNG whose main purpose is to produce a 64-bit integer random number. !   Therefore, all so-called *Long* PRNGs are particularly required to !   implement the *NextLongImpl* deferred procedure. !** USE STATEMENTS: USE ISO_C_BINDING , ONLY : C_LOC , C_F_POINTER USE MBase_Common USE MBase_MemHandlers , ONLY : MemAlloc USE MClass_BaseRNG USE MBase_SInt128 USE MBase_UInt128 USE MClass_IntegerRNG , ONLY : I128_To_R128 IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS ! derived type PUBLIC :: LongRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *LongRNG* type is an abstract PRNG type that directly extends !  the *BaseRNG* type.  It is provided to aid the implementation of an !  *Long* PRNG whose main purpose is to produce a 64-bit integer random !  number.  Therefore, all so-called *Long* PRNGs should extend from !  this base type. TYPE , ABSTRACT , EXTENDS ( BaseRNG ) :: LongRNG PRIVATE ! initial seed used to re-initialize the PRNG tSInt64 , ALLOCATABLE :: InitSeed (:) CONTAINS ! --------------------------------------------------------------------- ! -----               Additional Deferred Procedure               ----- ! --------------------------------------------------------------------- !> *BaseInit* is a binding name of the *InitBase* deferred procedure. <br> !  This procedure is intentionally employed as a base initialization that !  all other initialization procedures should call this procedure.  Also, !  it is intended to be used internally by an implementor, not a user. PROCEDURE ( InitBase ), DEFERRED :: BaseInit ! --------------------------------------------------------------------- ! -----               Deferred Procedures Implemented             ----- ! --------------------------------------------------------------------- !> *InitWOSeedImpl* is a deferred procedure. <br> !  Use the *Initialize* method in place of the *InitWOSeedImpl* method to !  initialize the PRNG without specifying any seed(s). PROCEDURE :: InitWOSeedImpl => Default_InitNoSeed !> *ReInit* is a deferred procedure. <br> !  **Type-Bound Subroutine**: ReInit <br> !  **Purpose**:  To reset the PRNG to its initial state. <br> !  **Usage**: <br> !   --->    CALL PRNG%ReInit() PROCEDURE :: ReInit => Default_ReInitialize !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Default_NextInteger !> *NextI128Impl* is a deferred procedure. <br> !  Use the *NextI128* method in place of the *NextI128Impl* method !  to generate a signed 128-bit integer number. PROCEDURE :: NextI128Impl => Default_NextI128 !> *NextU128Impl* is a deferred procedure. <br> !  Use the *NextU128* method in place of the *NextU128Impl* method !  to generate an unsigned 128-bit integer number. PROCEDURE :: NextU128Impl => Default_NextU128 !> *NextDoubleImpl* is a deferred procedure. <br> !  Use the *NextDouble* method in place of the *NextDoubleImpl* method !  to generate a 64-bit real number. PROCEDURE :: NextDoubleImpl => Default_NextDouble !> *NextQuadImpl* is a deferred procedure. <br> !  Use the *NextQuad* method in place of the *NextQuadImpl* method !  to generate a 128-bit real number. PROCEDURE :: NextQuadImpl => Default_NextQuad ! --------------------------------------------------------------------- ! -----               Public Procedures                           ----- ! --------------------------------------------------------------------- !> *InitWSeedImpl* is a procedure to initialize the generator with !  specified seed(s).  Instances of the PRNG initialized with the same !  seed(s) in the same program should  produce identical sequences of !  values. <br> !  Use the *Initialize* method in place of the *InitWSeedImpl* method to !  initialize the PRNG with specified seed(s). PROCEDURE :: InitWSeedImpl => Default_InitWithSeeds !> **Type-Bound Subroutine**: CopySeed <br> !  **Purpose**:  To copy the initial seeds of the source PRNG to !                that of the destination PRNG. <br> !  **Usage**: <br> !   --->    CALL SrcRNG%CopySeed(DstRNG) <br> !  **Usage**: This method is intended for internal use only. PROCEDURE :: CopySeed => Copy_InitSeed ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   --->    CALL RNG%Initialize() <br> !   --->    CALL RNG%Initialize(Seeds) GENERIC :: Initialize => InitWSeedImpl ! --------------------------------------------------------------------- END TYPE LongRNG !** INTERFACE DEFINITIONS: ! abstract interface for deferred procedure ABSTRACT INTERFACE !> InitBase is a deferred procedure to initialize the generator with !  specified seed(s).  Instances of the PRNG initialized with the same !  seed(s) in the same program should  produce identical sequences of !  values. <br> !  This procedure is intentionally employed as a base initialization that !  all other initialization procedures should call this procedure.  Also, !  it is intended to be used internally by an implementor, not a user. SUBROUTINE InitBase ( RNG , Seed ) IMPORT !% random number generator CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !> seed(s) whose size depends on the PRNG to be initialized tSInt64 , INTENT ( IN ) :: Seed (:) END SUBROUTINE END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Default_InitNoSeed ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize an 'LongRNG' object without specified seeds. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! allocate InitSeed used for re-initialization CALL MemAlloc ( RNG % InitSeed , [ 1_kIndex ]) ! set InitSeed RNG % InitSeed = GetRandomSeed64 () + GOLDEN_RATIO_64 ! initialize the PRNG CALL RNG % BaseInit ( RNG % InitSeed ) RETURN END SUBROUTINE Default_InitNoSeed !****************************************************************************** SUBROUTINE Default_InitWithSeeds ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize an 'LongRNG' object with specified seeds. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( SIZE ( Seed , KIND = kIndex ) >= 11_kIndex ) THEN ! allocate InitSeed used for re-initialization CALL MemAlloc ( RNG % InitSeed , [ SIZE ( Seed , KIND = kIndex )]) ! set InitSeed RNG % InitSeed = Seed ELSE ! +++ a zero-sized array -> no valuable information available +++ ! allocate InitSeed used for re-initialization CALL MemAlloc ( RNG % InitSeed , [ 1_kIndex ]) ! set InitSeed RNG % InitSeed = GetRandomSeed64 () + GOLDEN_RATIO_64 END IF ! initialize the PRNG CALL RNG % BaseInit ( RNG % InitSeed ) RETURN END SUBROUTINE Default_InitWithSeeds !****************************************************************************** SUBROUTINE Default_ReInitialize ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To re-initialize an 'LongRNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW IF ( ALLOCATED ( RNG % InitSeed )) THEN ! re-initialize the PRNG CALL RNG % BaseInit ( RNG % InitSeed ) ELSE ! initialize without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE Default_ReInitialize !****************************************************************************** SUBROUTINE Copy_InitSeed ( SrcRng , DstRng ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy the InitSeed of the source to that of the destination. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( IN ) :: SrcRng !! the source CLASS ( LongRNG ), INTENT ( INOUT ) :: DstRng !! the destination !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! allocate InitSeed used for re-initialization CALL MemAlloc ( DstRng % InitSeed , [ SIZE ( SrcRng % InitSeed , KIND = kIndex )]) ! set InitSeed DstRng % InitSeed = SrcRng % InitSeed RETURN END SUBROUTINE Copy_InitSeed !****************************************************************************** FUNCTION Default_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 32-bit-integer value.  This default implementation !  uses the 32 high-order bits from a call to the 'NextLong' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = ToInt32 ( SHIFTR ( RNG % NextLong (), 32 )) RETURN END FUNCTION Default_NextInteger !****************************************************************************** FUNCTION Default_NextI128 ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the signed 128-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object TYPE ( SInt128 ) :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! construct SInt128 object from two 64-bit random numbers RandNum = SInt128 ( RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION Default_NextI128 !****************************************************************************** FUNCTION Default_NextU128 ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the unsigned 128-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object TYPE ( UInt128 ) :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! construct UInt128 object from two 64-bit random numbers RandNum = UInt128 ( RNG % NextLong (), RNG % NextLong ()) RETURN END FUNCTION Default_NextU128 !****************************************************************************** FUNCTION Default_NextDouble ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 64-bit-floating-point value between zero (inclusive) !  and one (exclusive).  This default implementation uses the 53 high-order !  bits from a call to the 'NextLong' procedure. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object tRealDP :: RandNum !! random number !** SUBROUTINE PARAMETER DECLARATIONS: ! although these three parameters use different formulas, they are essentially the same. tRealDP , PARAMETER :: DNorm1 = 2.0_kDouble ** ( - 53 ) tRealDP , PARAMETER :: DNorm2 = 1.0_kDouble / SHIFTL ( 1_kInt64 , 53 ) tRealDP , PARAMETER :: DNorm3 = 0.5_kDouble * EPSILON ( 1.0_kDouble ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = SHIFTR ( RNG % NextLong (), 11 ) * DNorm1 RETURN END FUNCTION Default_NextDouble !****************************************************************************** FUNCTION Default_NextQuad ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return a random 128-bit-floating-point value between zero (inclusive) !  and one (exclusive). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( LongRNG ), INTENT ( INOUT ) :: RNG !! 'LongRNG' object tRealQP :: RandNum !! random number !** SUBROUTINE ARGUMENT DECLARATIONS: ! although these two parameters use different formulas, they are essentially the same. tRealQP , PARAMETER :: QNorm1 = 2.0_kQuad ** ( - 113 ) tRealQP , PARAMETER :: QNorm2 = 0.5_kQuad * EPSILON ( 1.0_kQuad ) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: High , Low tUInt64 :: I128Hi , I128Lo tRealQP :: R128 ! FLOW ! get two long values High = RNG % NextLong () Low = RNG % NextLong () ! join the most significant 57 bits of Low and 56 bits of High ! to get upper and lower 64 bits of 128-bit integer number I128Lo = 0_kInt64 I128Hi = 0_kInt64 CALL MVBITS ( Low , 7 , 57 , I128Lo , 0 ) CALL MVBITS ( High , 8 , 7 , I128Lo , 57 ) CALL MVBITS ( High , 15 , 49 , I128Hi , 0 ) ! convert 128-bit integer number to 128-bit real number R128 = I128_To_R128 ( I128Hi , I128Lo ) ! normalize the 128-bit real random number ! Note: Although the above block treats 128-bit integer as signed number, !       it is always positive because only the lower 113 bits are set and !       the higher 15 bits are all zero. RandNum = R128 * QNorm1 RETURN END FUNCTION Default_NextQuad !****************************************************************************** END MODULE MClass_LongRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_longrng.f90.html"},{"title":"MClass_L64XMRNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_L64XMRNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *L64XMRNG* type and its related routines. !   The *L64XMRNG* type is a *Long* PRNG type that directly extends !   the *LongRNG* type.  Therefore, it provides all remaining deferred !   procedures required by a *Long* PRNG type. <br> !   In particular, the *L64XMRNG* type provides an implementation of the !   *NextLongImpl* deferred procedure based on the *L64XM* algorithms. !   The *L64XM* algorithms are specific members of the LXM family of algorithms !   for pseudo-random number generators where <br> !   -  L stands for Linear congruential generator (LCG); <br> !   -  X stands for Xor-based generator (XBG); and <br> !   -  M stands for Mix. <br> !   The *L64XMRNG* type can represent four PRNG classes:  <br> !   - the L64X128Mix RNG, <br> !   - the L64X128StarStar RNG, <br> !   - the L64X256Mix RNG, or <br> !   - the L64X1024Mix RNG.  <br> !   The *L64X128* RNGs employ a 64-bit LCG, a 128-bit XBG and a mixing function !   where its memory footprint is 256 bits and its period is roughly 2<sup>192</sup>. <br> !   The *L64X256* RNG employ a 64-bit LCG, a 256-bit XBG and a mixing function !   where its memory footprint is 384 bits and its period is roughly 2<sup>320</sup>. <br> !   The *L64X1024* RNGs employ a 64-bit LCG, a 1024-bit XBG and a mixing function !   where its memory footprint is 1184 bits and its period is roughly 2<sup>1088</sup>. <br> !   By default, The *L64X128Mix* PRNG is employed.  However, other *L64XM* PRNG !   variants can be utilized by specifying an algorithm flag (between 1 to 4) !   when initializing the generator.  <br> !   In addition to common operations of a PRNG, the *L64XMRNG* type provides !   the *Split* method to split a generator into two instances (the original and !   a new instance) where the two generators can be used concurrently.  Presumably, !   the new generator is statistically independent and uniform. <br> !   The *L64XMRNG* type also provides the *Jump* and *LongJump* methods where !   a large (or very large) number of steps of the output sequence can be advanced !   in a single operation.  Each method creates (and also returns) a copy of the !   input PRNG and then advances the state of the specified PRNG.  The PRNG and its !   copy produce non-overlapping output for the length of the jump intendedly for !   use in parallel computations. <br> !   It is important to note that the *L64XM* PRNG requires an explicit initialization !   by first calling the *Initialize* method before using any other methods.  Otherwise, !   the generator may produce undesirable random sequences.  Also, it should be noted !   that the implementation of this PRNG type is based on references #3-6 whereas the !   *L64X128RNG*, *L64X256RNG*, and *L64X1024RNG* types, which are based on the same !   algorithms, are based their implementation on reference #2.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://dl.acm.org/doi/abs/10.1145/3485525\"> !       Steele and Vigna (2021).  LXM: better splittable pseudo-random number generators !      (and almost as fast). Proceedings of the ACM on Programming Languages, Volume 5, !       Article 148, pp 1-31.</a> <br> !   [2] <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html\"> !       Package: Java.Util.Random</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/L64X128Mix.html\"> !       Apache Commons RNG: Class L64X128Mix</a> <br> !   [4] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/L64X128StarStar.html\"> !       Apache Commons RNG: Class L64X128StarStar</a> <br> !   [5] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/L64X256Mix.html\"> !       Apache Commons RNG: Class L64X256Mix</a> <br> !   [6] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source64/L64X1024Mix.html\"> !       Apache Commons RNG: L64X1024Mix</a> !** USE STATEMENTS: USE MBase_Common USE MBase_MemHandlers , ONLY : MemAlloc , MemFree USE MClass_BaseRNG USE MClass_LongRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: L64XMRNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! 64-bit LCG multiplier. Note: (M % 8) = 5. tSInt64 , PARAMETER :: M64 = ToInt64 ( Z 'D1342543DE82EF95' ) ! Jump constant {m'} for an advance of the 64-bit LCG by 2&#94;32. ! Computed as: {m' = m&#94;(2&#94;32) (mod 2&#94;64)}. tSInt64 , PARAMETER :: M64P = ToInt64 ( Z '8D23804C00000001' ) ! Jump constant precursor for {c'} for an advance of the 64-bit LCG by 2&#94;32. ! Computed as: ! product_{i=0}&#94;{31} { M&#94;(2&#94;i) + 1 } (mod 2&#94;64) ! The jump is computed for the LCG with an update step of {s = m * s + c} as: ! s = m' * s + c' * c tSInt64 , PARAMETER :: C64P = ToInt64 ( Z '16691C9700000000' ) ! size of LCG states tIndex , PARAMETER :: LCG_STATE_SIZE = 2_kIndex ! Parameters for algorithm flag tSInt32 , PARAMETER , PUBLIC :: L64X128Mix = 1 !! flag for L64X128Mix PRNG tSInt32 , PARAMETER , PUBLIC :: L64X128StarStar = 2 !! flag for L64X128StarStar PRNG tSInt32 , PARAMETER , PUBLIC :: L64X256Mix = 3 !! flag for L64X256Mix PRNG tSInt32 , PARAMETER , PUBLIC :: L64X1024Mix = 4 !! flag for L64X1024Mix PRNG !** DERIVED TYPE DEFINITIONS !> The *L64XMRNG* type is a *Long* PRNG type based on the *L64XM* !  algorithms, which are specific members of the LXM family of !  algorithms for pseudo-random number generators. TYPE , EXTENDS ( LongRNG ) :: L64XMRNG PRIVATE ! The parameter that is used as an additive constant for the LCG.  Must be odd. tSInt64 :: A ! The per-instance state: S for the LCG, and X0 ... for the XBG. ! At least one of the fields Xs must be nonzero. tSInt64 :: S tSInt64 , ALLOCATABLE :: X (:) ! index into the X \"state\" array tSInt32 :: Indx ! algorithm flag tSInt32 :: L64XMAlgo = L64X128Mix ! pointers to Next and Update routines PROCEDURE ( Next ), POINTER :: NextOutput => NULL () PROCEDURE ( Update ), POINTER :: UpdateState => NULL () CONTAINS ! --------------------------------------------------------------------- ! -----                 Private Procedures                        ----- ! --------------------------------------------------------------------- PROCEDURE , PRIVATE :: InitWithFlag => L64XMRNG_InitWithFlag PROCEDURE , PRIVATE :: MakeACopy => L64XMRNG_Copy ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => L64XMRNG_BaseInit !> *NextLongImpl* is a deferred procedure. <br> !  Use the *NextLong* method in place of the *NextLongImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextLongImpl => L64XMRNG_NextLong !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => L64XMRNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => L64XMRNG_GetSeedSize ! --------------------------------------------------------------------- ! -----               Generic Interface                           ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Initialize <br> !  **Purpose**:  To initialize the pseudo-random number generator. <br> !  **Usage**: <br> !   ! initialize without seed; use L64X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize() <br> !   ! initialize with seed(s); use L64X128Mix (default) algorithm <br> !   --->    CALL RNG%Initialize(Seeds) <br> !   ! initialize without seed; use L64X128StarStar algorithm <br> !   --->    CALL RNG%Initialize(L64X128StarStar) <br> !   ! initialize with seed(s); use L64X1024Mix algorithm <br> !   --->    CALL RNG%Initialize(L64X1024Mix, Seeds) GENERIC :: Initialize => InitWithFlag ! --------------------------------------------------------------------- ! -----                 Public Procedures                         ----- ! --------------------------------------------------------------------- !> **Type-Bound Function**: Split <br> !  **Purpose**:  To return a new PRNG, split off from the current one. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Split() <br> !  **Note**: The *Split* method is intended to be used in a parallel environment !            where the current generator and the new one can be used concurrently. PROCEDURE :: Split => L64XMRNG_Split !> **Type-Bound Function**: Jump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%Jump() <br> !  **Note**: The *Jump* method is equivalent to calling the *NextInteger* !            method repeatedly a large number of times. PROCEDURE :: Jump => L64XMRNG_Jump !> **Type-Bound Function**: LongJump <br> !  **Purpose**:  To create a copy of the specified PRNG and then retreat !                the state of the current PRNG.  The copy is returned as !                a new PRNG. <br> !  **Usage**: <br> !   --->    NewRNG = PRNG%LongJump() <br> !  **Note**: The *LongJump* method is equivalent to calling the *NextInteger* !            method repeatedly a very large number of times. PROCEDURE :: LongJump => L64XMRNG_LongJump ! --------------------------------------------------------------------- ! -----             Final Procedure                               ----- ! --------------------------------------------------------------------- !> To perform finalization of the PRNG. FINAL :: L64XMRNG_Finalization ! --------------------------------------------------------------------- END TYPE L64XMRNG !** INTERFACE DEFINITIONS: ABSTRACT INTERFACE FUNCTION Next ( RNG , NextIndex ) RESULT ( Output ) IMPORT CLASS ( L64XMRNG ), INTENT ( IN ) :: RNG tSInt32 , INTENT ( OUT ) :: NextIndex tSInt64 :: Output END FUNCTION Next SUBROUTINE Update ( RNG , NextIndex ) IMPORT CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG tSInt32 , INTENT ( IN ) :: NextIndex END SUBROUTINE Update END INTERFACE !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE L64XMRNG_InitWithFlag ( RNG , L64XMAlgo , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with the specified algorithm flag.  Optionally, !  initial seeds can be specified. !** SUBROUTINE ARGUMENT DECLARATIONS: !% 'L64XMRNG' object CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !% algorithm flag (1-4); if out of applicable range, set it to default (L64X128Mix) tSInt32 , INTENT ( IN ) :: L64XMAlgo !% optional seed(s) tSInt64 , OPTIONAL , INTENT ( IN ) :: Seed (:) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! check and set algorithm flag IF ( IN_RANGE ( L64XMAlgo , 1 , 4 )) THEN RNG % L64XMAlgo = L64XMAlgo ELSE RNG % L64XMAlgo = L64X128Mix END IF IF ( PRESENT ( Seed )) THEN ! initialize the generator with seed(s) CALL RNG % Initialize ( Seed ) ELSE ! initialize the generator without seed CALL RNG % Initialize () END IF RETURN END SUBROUTINE L64XMRNG_InitWithFlag !****************************************************************************** SUBROUTINE L64XMRNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'L64XMRNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object tSInt64 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 , ALLOCATABLE :: Seed0 (:) tIndex :: SeedSize , XBGStateSize ! FLOW ! get array sizes and allocate working arrays SELECT CASE ( RNG % L64XMAlgo ) CASE ( L64X128Mix , L64X128StarStar ) XBGStateSize = 2_kIndex CASE ( L64X256Mix ) XBGStateSize = 4_kIndex CASE ( L64X1024Mix ) XBGStateSize = 16_kIndex END SELECT SeedSize = XBGStateSize + LCG_STATE_SIZE CALL MemAlloc ( Seed0 , SeedSize , StartID = 0_kIndex ) CALL MemAlloc ( RNG % X , XBGStateSize , StartID = 0_kIndex ) ! set initial seed CALL Extend_Seed ( Seed , Seed0 ) ! set states RNG % A = IOR ( Seed0 ( 0 ), 1_kInt64 ) ! Additive parameter must be odd RNG % S = Seed0 ( 1 ) RNG % X ( 0 : XBGStateSize - 1 ) = Seed0 ( 2 : SeedSize - 1 ) ! Initializing to (XBGStateSize - 1) ensures that (Indx + 1) % XBGStateSize == 0 ! and the first state picked from the XBG generator is state[0]. RNG % Indx = XBGStateSize - 1_kIndex ! set pointers to NextOutput and Update procedures SELECT CASE ( RNG % L64XMAlgo ) CASE ( L64X128Mix ) RNG % NextOutput => X128256_Next RNG % UpdateState => X128_Update CASE ( L64X128StarStar ) RNG % NextOutput => X128StarStar_Next RNG % UpdateState => X128_Update CASE ( L64X256Mix ) RNG % NextOutput => X128256_Next RNG % UpdateState => X256_Update CASE ( L64X1024Mix ) RNG % NextOutput => X1024_Next RNG % UpdateState => X1024_Update END SELECT RETURN END SUBROUTINE L64XMRNG_BaseInit !****************************************************************************** FUNCTION L64XMRNG_NextLong ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: NextIndex ! FLOW ! compute next output RandNum = RNG % NextOutput ( NextIndex ) ! update states CALL RNG % UpdateState ( NextIndex ) RETURN END FUNCTION L64XMRNG_NextLong !****************************************************************************** FUNCTION L64XMRNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( IN ) :: RNG !! 'L64XMRNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW SELECT CASE ( RNG % L64XMAlgo ) CASE ( L64X128Mix ) Name = 'L64X128MixRNG' CASE ( L64X128StarStar ) Name = 'L64X128StarStarRNG' CASE ( L64X256Mix ) Name = 'L64X256MixRNG' CASE ( L64X1024Mix ) Name = 'L64X1024MixRNG' END SELECT RETURN END FUNCTION L64XMRNG_GetName !****************************************************************************** FUNCTION L64XMRNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( IN ) :: RNG !! 'L64XMRNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: XBGStateSize ! FLOW SELECT CASE ( RNG % L64XMAlgo ) CASE ( L64X128Mix , L64X128StarStar ) XBGStateSize = 2_kIndex CASE ( L64X256Mix ) XBGStateSize = 4_kIndex CASE ( L64X1024Mix ) XBGStateSize = 16_kIndex END SELECT Size = XBGStateSize + LCG_STATE_SIZE RETURN END FUNCTION L64XMRNG_GetSeedSize !****************************************************************************** FUNCTION X128256_Next ( RNG , NextIndex ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( IN ) :: RNG !! 'L64XMRNG' tSInt32 , INTENT ( OUT ) :: NextIndex !! dummy here tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % S + RNG % X ( 0 )) NextIndex = 0 RETURN END FUNCTION X128256_Next !****************************************************************************** FUNCTION X128StarStar_Next ( RNG , NextIndex ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( IN ) :: RNG !! 'L64XMRNG' tSInt32 , INTENT ( OUT ) :: NextIndex !! dummy here tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = RotateLeft (( RNG % S + RNG % X ( 0 )) * 5_kInt64 , 7 ) * 9_kInt64 ! \"starstar\" scrambler NextIndex = 0 RETURN END FUNCTION X128StarStar_Next !****************************************************************************** SUBROUTINE X128_Update ( RNG , NextIndex ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object tSInt32 , INTENT ( IN ) :: NextIndex !! dummy here !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Q0 , Q1 ! FLOW ! Update the LCG subgenerator RNG % S = M64 * RNG % S + RNG % A ! Update the XBG subgenerator Q0 = RNG % X ( 0 ) Q1 = RNG % X ( 1 ) ! xoroshiro128v1_0 Q1 = IEOR ( Q1 , Q0 ) RNG % X ( 0 ) = IEOR ( IEOR ( RotateLeft ( Q0 , 24 ), Q1 ), SHIFTL ( Q1 , 16 )) RNG % X ( 1 ) = RotateLeft ( Q1 , 37 ) ASSOCIATE ( Dummy => NextIndex ); END ASSOCIATE RETURN END SUBROUTINE X128_Update !****************************************************************************** SUBROUTINE X256_Update ( RNG , NextIndex ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object tSInt32 , INTENT ( IN ) :: NextIndex !! dummy here !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: Q0 , Q1 , Q2 , Q3 , T ! FLOW ! Update the LCG subgenerator RNG % S = M64 * RNG % S + RNG % A ! Update the XBG subgenerator Q0 = RNG % X ( 0 ) Q1 = RNG % X ( 1 ) Q2 = RNG % X ( 2 ) Q3 = RNG % X ( 3 ) ! xoshiro256 1.0 T = SHIFTL ( Q1 , 17 ) Q2 = IEOR ( Q2 , Q0 ) Q3 = IEOR ( Q3 , Q1 ) Q1 = IEOR ( Q1 , Q2 ) Q0 = IEOR ( Q0 , Q3 ) Q2 = IEOR ( Q2 , T ) Q3 = RotateLeft ( Q3 , 45 ) RNG % X ( 0 ) = Q0 RNG % X ( 1 ) = Q1 RNG % X ( 2 ) = Q2 RNG % X ( 3 ) = Q3 ASSOCIATE ( Dummy => NextIndex ); END ASSOCIATE RETURN END SUBROUTINE X256_Update !****************************************************************************** FUNCTION X1024_Next ( RNG , NextIndex ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 64-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( IN ) :: RNG !! 'L64XMRNG' tSInt32 , INTENT ( OUT ) :: NextIndex !! dummy here tSInt64 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW NextIndex = IAND ( RNG % Indx + 1 , SIZE ( RNG % X ) - 1 ) ! Compute the RandNum based on current state information ! (this allows the computation to be overlapped with state update). RandNum = Mix_Lea ( RNG % S + RNG % X ( NextIndex )) RETURN END FUNCTION X1024_Next !****************************************************************************** SUBROUTINE X1024_Update ( RNG , NextIndex ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To update the states of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object tSInt32 , INTENT ( IN ) :: NextIndex !! dummy here !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt64 :: S0 , S15 tSInt32 :: Q ! FLOW ! First part of xoroshiro1024: fetch array data Q = RNG % Indx RNG % Indx = NextIndex S0 = RNG % X ( RNG % Indx ) S15 = RNG % X ( Q ) ! Update the LCG subgenerator RNG % S = M64 * RNG % S + RNG % A ! Second part of xoroshiro1024: update array data S15 = IEOR ( S15 , S0 ) RNG % X ( Q ) = IEOR ( IEOR ( RotateLeft ( S0 , 25 ), S15 ), SHIFTL ( S15 , 27 )) RNG % X ( RNG % Indx ) = RotateLeft ( S15 , 36 ) RETURN END SUBROUTINE X1024_Update !****************************************************************************** FUNCTION L64XMRNG_Copy ( Src ) RESULT ( Dst ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To copy all components of the source object to the destination object. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: Src !! source object TYPE ( L64XMRNG ) :: Dst !! destination object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Dst % A = Src % A Dst % S = Src % S ALLOCATE ( Dst % X , SOURCE = Src % X ) Dst % Indx = Src % Indx Dst % L64XMAlgo = Src % L64XMAlgo Dst % NextOutput => Src % NextOutput Dst % UpdateState => Src % UpdateState CALL Src % CopySeed ( Dst ) RETURN END FUNCTION L64XMRNG_Copy !****************************************************************************** FUNCTION L64XMRNG_Jump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The jump is performed by advancing the state of the LCG sub-generator by 1 cycle. !  The XBG state is unchanged.  <br> !  For L64X128MixRNGs, the jump size is the equivalent of moving the state backwards !  by (2<sup>128</sup> - 1) positions.  It can provide up to 2<sup>64</sup> !  non-overlapping subsequences.  <br> !  For L64X256MixRNG, the jump size is the equivalent of moving the state backwards !  by (2<sup>256</sup> - 1) positions.  It can provide up to 2<sup>64</sup> !  non-overlapping subsequences.  <br> !  For L64X128MixRNG, the jump size is the equivalent of moving the state backwards !  by (2<sup>1024</sup> - 1) positions.  It can provide up to 2<sup>64</sup> !  non-overlapping subsequences. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object TYPE ( L64XMRNG ) :: NewRNG !! new 'L64XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! Advance the LCG 1 step RNG % S = M64 * RNG % S + RNG % A RETURN END FUNCTION L64XMRNG_Jump !****************************************************************************** FUNCTION L64XMRNG_LongJump ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a copy of the generator and then advances the state of the current !  instance.  The new instance is returned.  <br> !  The jump is performed by advancing the state of the LCG sub-generator by !  2<sup>64</sup> cycles.  The XBG state is unchanged.  <br> !  For L64X128MixRNGs, the jump size is the equivalent of moving the state backwards !  by roughly 2<sup>160</sup> positions.  It can provide up to 2<sup>32</sup> !  non-overlapping subsequences of length approximately 2<sup>160</sup>; each !  subsequence can provide up to 2<sup>32</sup> non-overlapping subsequences of !  length (2<sup>128</sup> - 1) using the Jump() method.  <br> !  For L64X256MixRNG, the jump size is the equivalent of moving the state backwards !  by roughly 2<sup>288</sup> positions.  It can provide up to 2<sup>32</sup> !  non-overlapping subsequences of length approximately 2<sup>288</sup>; each !  subsequence can provide up to 2<sup>32</sup> non-overlapping subsequences of !  length (2<sup>256</sup> - 1) using the Jump() method.  <br> !  For L64X256MixRNG, the jump size is the equivalent of moving the state backwards !  by roughly 2<sup>1056</sup> positions.  It can provide up to 2<sup>32</sup> !  non-overlapping subsequences of length approximately 2<sup>1056</sup>; each !  subsequence can provide up to 2<sup>32</sup> non-overlapping subsequences of !  length (2<sup>1024</sup> - 1) using the Jump() method. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object TYPE ( L64XMRNG ) :: NewRNG !! new 'L64XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW ! make a copy of the generator NewRNG = RNG % MakeACopy () ! Advance the LCG 2**32 steps RNG % S = M64P * RNG % S + C64P * RNG % A RETURN END FUNCTION L64XMRNG_LongJump !****************************************************************************** FUNCTION L64XMRNG_Split ( RNG ) RESULT ( NewRNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To create a new generator split off from the current instance. !  Use the current generator to generate an initial seed and also !  employ it as a source of randomness used to initialize the !  new generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object TYPE ( L64XMRNG ) :: NewRNG !! new 'L64XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tIndex :: SeedSize , I tSInt64 :: Seed , X tSInt64 , ALLOCATABLE :: S (:) ! FLOW ! allocate working variables SeedSize = RNG % GetSeedSize () CALL MemAlloc ( S , SeedSize , StartID = 0_kIndex ) Seed = RNG % NextLong () ! LCG state. The addition uses the input seed. ! The LCG addition parameter is set to odd so left-shift the seed. S ( 0 ) = SHIFTL ( Seed , 1 ) S ( 1 ) = RNG % NextLong () ! XBG state must not be all zero X = 0_kInt64 DO I = LCG_STATE_SIZE , SeedSize - 1 S ( I ) = RNG % NextLong () X = IOR ( X , S ( I )) END DO IF ( X == 0_kInt64 ) THEN !/ SplitMix style seed ensures at least one non-zero value X = S ( LCG_STATE_SIZE - 1_kIndex ) DO I = LCG_STATE_SIZE , SeedSize - 1 S ( I ) = Mix_Lea ( X ) X = X + GOLDEN_RATIO_64 END DO END IF ! initialize the new generator CALL NewRNG % Initialize ( RNG % L64XMAlgo , S ) RETURN END FUNCTION L64XMRNG_Split !****************************************************************************** SUBROUTINE L64XMRNG_Finalization ( RNG ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To perform finalization of the 'L64XMRNG' object. !** SUBROUTINE ARGUMENT DECLARATIONS: TYPE ( L64XMRNG ), INTENT ( INOUT ) :: RNG !! 'L64XMRNG' object !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW CALL MemFree ( RNG % X ) NULLIFY ( RNG % NextOutput ) NULLIFY ( RNG % UpdateState ) RETURN END SUBROUTINE L64XMRNG_Finalization !****************************************************************************** END MODULE MClass_L64XMRNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_l64xmrng.f90.html"},{"title":"MClass_Sfc32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Sfc32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Sfc32RNG* type and its related routines. !   The *Sfc32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Sfc32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the Small, Fast, Counting !   (SFC) 32-bit generator by Chris Doty-Humphrey.  It has a state size of !   128-bits. The period is a minimum of 2<sup>32</sup> and an average of !   approximately 2<sup>127</sup>. <br> !   It is important to note that the *Sfc32* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"https://pracrand.sourceforge.net/\">PractRand Test Suite</a> <br> !   [2] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/DotyHumphreySmallFastCounting32.html\"> !       Apache Commons RNG: Class DotyHumphreySmallFastCounting32</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Sfc32RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" #include    \"../../MacroDef/Macro - Util Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *Sfc32RNG* type is an *Integer* PRNG type based on the Small, !  Fast, Counting (SFC) 32-bit generator by Chris Doty-Humphrey. TYPE , EXTENDS ( IntegerRNG ) :: Sfc32RNG PRIVATE ! the working states tSInt32 :: A , B , C ! the counter tSInt32 :: Counter CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Sfc32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Sfc32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Sfc32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Sfc32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Sfc32RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Sfc32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the 'Sfc32RNG' object with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc32RNG ), INTENT ( INOUT ) :: RNG !! 'Sfc32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 3 ) tSInt32 :: I , RandNum ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) ! set states and counter RNG % A = Seed0 ( 1 ) RNG % B = Seed0 ( 2 ) RNG % C = Seed0 ( 3 ) RNG % Counter = 1 ! warming up before using the output DO I = 1 , 15 RandNum = RNG % NextInteger () END DO RETURN END SUBROUTINE Sfc32RNG_BaseInit !****************************************************************************** FUNCTION Sfc32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc32RNG ), INTENT ( INOUT ) :: RNG !! 'Sfc32RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW RandNum = RNG % A + RNG % B + RNG % Counter RNG % Counter = RNG % Counter + 1 RNG % A = IEOR ( RNG % B , SHIFTR ( RNG % B , 9 )) RNG % B = RNG % C + SHIFTL ( RNG % C , 3 ) RNG % C = RotateLeft ( RNG % C , 21 ) + RandNum RETURN END FUNCTION Sfc32RNG_NextInteger !****************************************************************************** FUNCTION Sfc32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc32RNG ), INTENT ( IN ) :: RNG !! 'Sfc32RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Sfc32RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Sfc32RNG_GetName !****************************************************************************** FUNCTION Sfc32RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Sfc32RNG ), INTENT ( IN ) :: RNG !! 'Sfc32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 3 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Sfc32RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Sfc32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_sfc32rng.f90.html"},{"title":"MClass_Kiss32RNG.f90 â€“ eXPerimental Fortran Library (XpfLib) Documentation","text":"Source Code MODULE MClass_Kiss32RNG !&#94; **PURPOSE OF THIS MODULE**: <br> !   This module contains the *Kiss32RNG* type and its related routines. !   The *Kiss32RNG* type is an *Integer* PRNG type that directly extends !   the *IntegerRNG* type.  Therefore, it provides all remaining deferred !   procedures required by an *Integer* PRNG type.  <br> !   In particular, the *Kiss32RNG* type provides an implementation of the !   *NextIntegerImpl* deferred procedure based on the 32-bit *KISS* (Keep !   it Simple Stupid) algorithm by George Marsaglia. <br> !   The 32-bit *KISS* algorithm consists of a combination of four sub-generators, !   each with 32 bits of state, of three kinds: <br> !   - one linear congruential generator modulo 2<sup>32</sup> <br> !   - one general binary linear generator over the vector space GF(2)<sup>32</sup> <br> !   - two multiply-with-carry generators modulo 2<sup>16</sup>, with different !     parameters <br> !   The four generators are updated independently, and their states are combined !   to form a sequence of 32-bit output words with period of about 2<sup>123</sup>. <br> !   It is important to note that the *KISS* PRNG requires an explicit !   initialization by first calling the *Initialize* method before using !   any other methods.  Otherwise, the generator may produce undesirable !   random sequences.  <br> !   <br> !&#94; **REFERENCES**: <br> !   [1] <a href=\"http://www.cse.yorku.ca/~oz/marsaglia-rng.html\"> !       Random Number for C: End, at last?</a> <br> !   [2] <a href=\"https://programmingpraxis.com/2010/10/05/george-marsaglias-random-number-generators/\"> !       George Marsaglia's Random Number Generators</a> <br> !   [3] <a href=\"https://commons.apache.org/proper/commons-rng/commons-rng-core/apidocs/org/apache/commons/rng/core/source32/KISSRandom.html\"> !       Apache Commons RNG: Class KISSRandom</a> !** USE STATEMENTS: USE MBase_Common USE MClass_BaseRNG USE MClass_IntegerRNG IMPLICIT NONE ! Enforce explicit typing of all variables !** ACCESSIBLE SPECIFICATIONS OF MODULE DATA, SUBROUTINES OR FUNCTONS PUBLIC :: Kiss32RNG PRIVATE ! by default, hide all data and routines except those declared explicitly !** MACRO DEFINITIONS: #include    \"../../MacroDef/Macro - Basic Definitions.f90\" !** MODULE PARAMETERS: ! na !** DERIVED TYPE DEFINITIONS !> The *Kiss32RNG* type is an *Integer* PRNG type based on the *KISS* !  (Keep it Simple Stupid) algorithm by George Marsaglia. TYPE , EXTENDS ( IntegerRNG ) :: Kiss32RNG PRIVATE ! the working states tSInt32 :: Z , W , Jsr , Jcong CONTAINS ! --------------------------------------------------------------------- ! -----                 Deferred Procedures                       ----- ! --------------------------------------------------------------------- !> *BaseInit* is a deferred procedure intended to be used internally. <br> !  Use the *Initialize* method to initialize the PRNG instead. PROCEDURE :: BaseInit => Kiss32RNG_BaseInit !> *NextIntegerImpl* is a deferred procedure. <br> !  Use the *NextInteger* method in place of the *NextIntegerImpl* method !  to generate a 32-bit integer number. PROCEDURE :: NextIntegerImpl => Kiss32RNG_NextInteger !> *GetName* is a deferred procedure. <br> !  **Type-Bound Function**: GetName <br> !  **Purpose**:  To get the name of the PRNG. <br> !  **Usage**: <br> !   --->    Name = PRNG%GetName() PROCEDURE :: GetName => Kiss32RNG_GetName !> *GetSeedSize* is a deferred procedure. <br> !  **Type-Bound Function**: GetSeedSize <br> !  **Purpose**:  To get size of specified seed(s) needed to initialize !                the generator. <br> !  **Usage**: <br> !   --->    SeedSize = PRNG%GetSeedSize() PROCEDURE :: GetSeedSize => Kiss32RNG_GetSeedSize ! --------------------------------------------------------------------- END TYPE Kiss32RNG !** INTERFACE DEFINITIONS: ! na !** MODULE VARIABLE DECLARATIONS: ! na CONTAINS !** MODULE PROCEDURES (SUBROUTINES OR FUNCTIONS): SUBROUTINE Kiss32RNG_BaseInit ( RNG , Seed ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To initialize the PRNG with specified seed(s). !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss32RNG ), INTENT ( INOUT ) :: RNG !! 'Kiss32RNG' object tSInt32 , INTENT ( IN ) :: Seed (:) !! seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: Seed0 ( 4 ) ! FLOW ! set initial seed CALL Fill_State ( Seed , Seed0 ) RNG % Z = Seed0 ( 1 ) RNG % W = Seed0 ( 2 ) RNG % Jsr = Seed0 ( 3 ) RNG % Jcong = Seed0 ( 4 ) RETURN END SUBROUTINE Kiss32RNG_BaseInit !****************************************************************************** FUNCTION Kiss32RNG_NextInteger ( RNG ) RESULT ( RandNum ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the 32-bit random integer value. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss32RNG ), INTENT ( INOUT ) :: RNG !! 'Kiss32RNG' object tSInt32 :: RandNum !! random number !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: tSInt32 :: MWC ! FLOW ! compute new state values for MWC RNG % Z = 36969 * IAND ( RNG % Z , 65535 ) + SHIFTR ( RNG % Z , 16 ) RNG % W = 18000 * IAND ( RNG % W , 65535 ) + SHIFTR ( RNG % W , 16 ) ! +++ multiply-with-carry generators +++ MWC = SHIFTL ( RNG % Z , 16 ) + RNG % W ! +++ 3-shift-register generator +++ ! With correction mentioned in the reference# 3 (swap 17 and 13 places) RNG % Jsr = IEOR ( RNG % Jsr , SHIFTL ( RNG % Jsr , 13 )) ! original 17 RNG % Jsr = IEOR ( RNG % Jsr , SHIFTR ( RNG % Jsr , 17 )) ! original 13 RNG % Jsr = IEOR ( RNG % Jsr , SHIFTL ( RNG % Jsr , 5 )) ! +++ congruential generator +++ RNG % Jcong = 69069 * RNG % Jcong + 1234567 ! +++ KISS generator +++ RandNum = IEOR ( MWC , RNG % Jcong ) + RNG % Jsr RETURN END FUNCTION Kiss32RNG_NextInteger !****************************************************************************** FUNCTION Kiss32RNG_GetName ( RNG ) RESULT ( Name ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return the name of the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss32RNG ), INTENT ( IN ) :: RNG !! 'Kiss32RNG' object tCharAlloc :: Name !! name of the generator !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Name = 'Kiss32RNG' ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Kiss32RNG_GetName !****************************************************************************** FUNCTION Kiss32RNG_GetSeedSize ( RNG ) RESULT ( Size ) !** PURPOSE OF THIS SUBROUTINE: !&#94; To return size of specified seed(s) needed to initialize the generator. !** SUBROUTINE ARGUMENT DECLARATIONS: CLASS ( Kiss32RNG ), INTENT ( IN ) :: RNG !! 'Kiss32RNG' object tIndex :: Size !! size of specified seed(s) !** SUBROUTINE INTERNAL VARIABLE DECLARATIONS: ! na ! FLOW Size = 4 ASSOCIATE ( Dummy => RNG ); END ASSOCIATE RETURN END FUNCTION Kiss32RNG_GetSeedSize !****************************************************************************** END MODULE MClass_Kiss32RNG !******************************************************************************","tags":"","loc":"sourcefile\\mclass_kiss32rng.f90.html"}]}